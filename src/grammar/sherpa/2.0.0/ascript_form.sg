NAME ascript_formatter

IGNORE { c:sp c:nl }

<> ascript_form > script_statement+

<> script_statement > text | function | format | call | object | block::<t_SBlock, script_statement+>

<> function_statement > text | format | call | match | object | block::<t_SBlock, function_statement+>

<> function > fn_name param* '{' function_statement* "}"{kw}
                                    
                                    :ast { t_Funct, name: str($1), params:$2, content: $4, tok }

<> param > id ":" type              
                                    :ast { t_Param, name: $1, ty: str($3), tok }

<> type 
    > "obj"                         :ast { t_ObjType, tok }
    | "num"                         :ast { t_NumType, tok }
    | "int"                         :ast { t_IntType, tok }
    | "str"                         :ast { t_StringType, tok }    

<> call > fn_name args              :ast { t_Call, name: str($1), args: $2, tok }

<> args > "(" expr(*",") ")" 
                                    :ast { [$2] }

<> format 
    > tk:( "@" "+"{:9999})          :ast { t_Indent, tok }
    | tk:( "@" "-"{:9999})          :ast { t_Dedent, tok }
    | tk:( "@" ";"{:9999})          :ast { t_BreakPoint, tok }
    | "@" tk:(c:num+)               :ast { t_Space, count: u32($2), tok }
    | tk:( "\\" " "{:9999})         :ast { t_Space, tok }
    | tk:( "\\" "n"{:9999})         :ast { t_NewLine, tok }
    

<> text 
    > ( c:sym ) 
                                    :ast { t_Text, val: str(tok), tok }

    | tk:( "\\" "match" ) 
                                    :ast { t_Text, val: str(tok<1>), tok }
    | num

    | literal

    | expression
    
<> expression 
    > "[["  expr  "]]"              :ast { t_Expression, val: $2, tok }

<> expr 
    > expr "+"{1} expr{1}           :ast { t_Add, l:$1, r:$3, tok }
    | expr "-"{1} expr{1}           :ast { t_Sub, l:$1, r:$3, tok }
    | expr "*"{3} expr{3}           :ast { t_Mul, l:$1, r:$3, tok }
    | expr "/"{2} expr{2}           :ast { t_Div, l:$1, r:$3, tok }
    | num
    | object
    | literal

<> num > tk:( c:num+ ) 
                                    :ast { t_Num, val: str(tok), tok }

<> literal > "{{"  c:any+  "}}"     :ast { t_Literal, val: str($2), tok }

<t_T:ast, Content:sym> block 
    >   "[" Content? "]"            :ast { t_T, ty: str($1), content: $2, tok }
    |   "(" Content? ")"            :ast { t_T, ty: str($1), content: $2, tok }
    |   "{" Content? "}"            :ast { t_T, ty: str($1), content: $2, tok }
    
<> match > "match" expr "{"  match_arm*  "}" 
                                    :ast { t_Match, expr: $2, matches:$4, tok }

<> match_arm 
    
    > expr "{" ( function_statement )*{2} "}"
                                    :ast { t_MatchArm, match_expr: $1, content: $3, tok }

    | "{" ( function_statement )*{2} ";"? "}"
                                    :ast { t_MatchArm, default: true, content: $2, tok }
 
<> object > id{1} object_accessor*{2}            
                                    :ast { t_Obj, id: $1, path:$2, tok }

<> object_accessor 
    > "." id                       :ast { t_Prop, name: str($2), tok }
    | ".[" expr "]"                 :ast { t_Index, expr: $2, tok }
    
<> id 
    > tk:( "@" ( c:id | "_" | '-' ) ( c:id | "_" | '-' | c:num )* )
                                    :ast { t_Id, name: str($1), at: true, tok }

    | tk:( ( c:id | "_" | '-' ) ( c:id | "_" | '-' | c:num )* ) 
                                    :ast { t_Id, name: str($1), tok }


<> fn_name > tk:( "#" ( c:id | "_" | '-' ) ( c:id | "_" | '-' | c:num )* )  
