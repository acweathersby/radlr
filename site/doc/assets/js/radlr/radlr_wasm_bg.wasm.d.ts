/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_jsbytecodeparser_free(a: number, b: number): void;
export function jsbytecodeparser_new(a: number, b: number, c: number): number;
export function jsbytecodeparser_init(a: number, b: number, c: number): void;
export function jsbytecodeparser_next(a: number): number;
export function get_nonterminal_names(): number;
export function __wbg_jsctxstate_free(a: number, b: number): void;
export function __wbg_get_jsctxstate_is_scanner(a: number): number;
export function __wbg_set_jsctxstate_is_scanner(a: number, b: number): void;
export function __wbg_get_jsctxstate_end_ptr(a: number): number;
export function __wbg_set_jsctxstate_end_ptr(a: number, b: number): void;
export function __wbg_get_jsctxstate_input_ptr(a: number): number;
export function __wbg_set_jsctxstate_input_ptr(a: number, b: number): void;
export function __wbg_get_jsctxstate_sym_ptr(a: number): number;
export function __wbg_set_jsctxstate_sym_ptr(a: number, b: number): void;
export function __wbg_get_jsctxstate_begin_ptr(a: number): number;
export function __wbg_set_jsctxstate_begin_ptr(a: number, b: number): void;
export function __wbg_get_jsctxstate_anchor_ptr(a: number): number;
export function __wbg_set_jsctxstate_anchor_ptr(a: number, b: number): void;
export function __wbg_get_jsctxstate_tok_len(a: number): number;
export function __wbg_set_jsctxstate_tok_len(a: number, b: number): void;
export function __wbg_get_jsctxstate_tok_id(a: number): number;
export function __wbg_set_jsctxstate_tok_id(a: number, b: number): void;
export function __wbg_get_jsctxstate_sym_len(a: number): number;
export function __wbg_set_jsctxstate_sym_len(a: number, b: number): void;
export function __wbg_jsdebugpacket_free(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_event(a: number): number;
export function __wbg_set_jsdebugpacket_event(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_ctx(a: number): number;
export function __wbg_set_jsdebugpacket_ctx(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_instruction(a: number): number;
export function __wbg_set_jsdebugpacket_instruction(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_offset_start(a: number): number;
export function __wbg_set_jsdebugpacket_offset_start(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_offset_end(a: number): number;
export function __wbg_set_jsdebugpacket_offset_end(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_nonterminal_id(a: number): number;
export function __wbg_set_jsdebugpacket_nonterminal_id(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_rule_id(a: number): number;
export function __wbg_set_jsdebugpacket_rule_id(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_symbol_count(a: number): number;
export function __wbg_set_jsdebugpacket_symbol_count(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_complete(a: number): number;
export function __wbg_set_jsdebugpacket_complete(a: number, b: number): void;
export function __wbg_get_jsdebugpacket_is_scanner(a: number): number;
export function __wbg_set_jsdebugpacket_is_scanner(a: number, b: number): void;
export function __wbg_jsradlrsourceerror_free(a: number, b: number): void;
export function __wbg_get_jsradlrsourceerror_line(a: number): number;
export function __wbg_set_jsradlrsourceerror_line(a: number, b: number): void;
export function __wbg_get_jsradlrsourceerror_col(a: number): number;
export function __wbg_set_jsradlrsourceerror_col(a: number, b: number): void;
export function __wbg_get_jsradlrsourceerror_len(a: number): number;
export function __wbg_set_jsradlrsourceerror_len(a: number, b: number): void;
export function __wbg_get_jsradlrsourceerror_start_offset(a: number): number;
export function __wbg_set_jsradlrsourceerror_start_offset(a: number, b: number): void;
export function __wbg_get_jsradlrsourceerror_end_offset(a: number): number;
export function __wbg_set_jsradlrsourceerror_end_offset(a: number, b: number): void;
export function jsradlrsourceerror_message(a: number, b: number): void;
export function __wbg_positionederrors_free(a: number, b: number): void;
export function positionederrors_length(a: number): number;
export function positionederrors_get_error_at(a: number, b: number): number;
export function __wbg_editgraph_free(a: number, b: number): void;
export function editgraph_new(a: number, b: number, c: number): number;
export function editgraph_patch_insert(a: number, b: number, c: number, d: number, e: number): number;
export function editgraph_patch_remove(a: number, b: number, c: number, d: number): number;
export function editgraph_get_offset(a: number, b: number, c: number): number;
export function editgraph_get_root(a: number): number;
export function editgraph_add_child(a: number, b: number, c: number, d: number): number;
export function editgraph_remove_child(a: number, b: number, c: number): number;
export function __wbg_jscstnode_free(a: number, b: number): void;
export function jscstnode_get_type(a: number, b: number): void;
export function jscstnode_get_text(a: number, b: number, c: number): void;
export function jscstnode_child_at(a: number, b: number): number;
export function jscstnode_num_of_children(a: number): number;
export function jscstnode_len(a: number): number;
export function __wbg_jspatchresult_free(a: number, b: number): void;
export function jspatchresult_node_at(a: number, b: number): number;
export function jspatchresult_num_of_nodes(a: number): number;
export function __wbg_jsparserconfig_free(a: number, b: number): void;
export function jsparserconfig_new(): number;
export function jsparserconfig_cst_editor(): number;
export function jsparserconfig_ALLOW_CALLS(a: number): number;
export function jsparserconfig_set_ALLOW_CALLS(a: number, b: number): void;
export function jsparserconfig_ALLOW_LR(a: number): number;
export function jsparserconfig_set_ALLOW_LR(a: number, b: number): void;
export function jsparserconfig_ALLOW_PEEKING(a: number): number;
export function jsparserconfig_set_ALLOW_PEEKING(a: number, b: number): void;
export function jsparserconfig_max_k(a: number): number;
export function jsparserconfig_set_max_k(a: number, b: number): void;
export function jsparserconfig_ALLOW_CONTEXT_SPLITTING(a: number): number;
export function jsparserconfig_set_ALLOW_CONTEXT_SPLITTING(a: number, b: number): void;
export function jsparserconfig_CONTEXT_FREE(a: number): number;
export function jsparserconfig_set_CONTEXT_FREE(a: number, b: number): void;
export function jsparserconfig_AllOW_CST_MERGING(a: number): number;
export function jsparserconfig_set_AllOW_CST_MERGING(a: number, b: number): void;
export function jsparserconfig_ALLOW_CST_NONTERM_SHIFT(a: number): number;
export function jsparserconfig_set_ALLOW_CST_NONTERM_SHIFT(a: number, b: number): void;
export function jsparserconfig_EXPORT_ALL_NONTERMS(a: number): number;
export function jsparserconfig_set_EXPORT_ALL_NONTERMS(a: number, b: number): void;
export function __wbg_jsparserclassification_free(a: number, b: number): void;
export function __wbg_get_jsparserclassification_bottom_up(a: number): number;
export function __wbg_set_jsparserclassification_bottom_up(a: number, b: number): void;
export function __wbg_get_jsparserclassification_max_k(a: number): number;
export function __wbg_set_jsparserclassification_max_k(a: number, b: number): void;
export function __wbg_get_jsparserclassification_gotos_present(a: number): number;
export function __wbg_set_jsparserclassification_gotos_present(a: number, b: number): void;
export function __wbg_get_jsparserclassification_calls_present(a: number): number;
export function __wbg_set_jsparserclassification_calls_present(a: number, b: number): void;
export function __wbg_get_jsparserclassification_peeks_present(a: number): number;
export function __wbg_set_jsparserclassification_peeks_present(a: number, b: number): void;
export function __wbg_get_jsparserclassification_forks_present(a: number): number;
export function __wbg_set_jsparserclassification_forks_present(a: number, b: number): void;
export function jsparserclassification_get_type(a: number, b: number): void;
export function __wbg_jsparsermetrics_free(a: number, b: number): void;
export function __wbg_get_jsparsermetrics_classification(a: number): number;
export function __wbg_set_jsparsermetrics_classification(a: number, b: number): void;
export function __wbg_get_jsparsermetrics_num_of_states(a: number): number;
export function __wbg_set_jsparsermetrics_num_of_states(a: number, b: number): void;
export function __wbg_get_jsparsermetrics_optimized(a: number): number;
export function __wbg_set_jsparsermetrics_optimized(a: number, b: number): void;
export function __wbg_jsgrammaridentities_free(a: number, b: number): void;
export function __wbg_jsparserdb_free(a: number, b: number): void;
export function __wbg_jsparsergraph_free(a: number, b: number): void;
export function __wbg_jsirparser_free(a: number, b: number): void;
export function jsirparser_classification(a: number): number;
export function jsirparser_num_of_states(a: number): number;
export function jsirparser_optimized(a: number): number;
export function __wbg_jsradlrgrammar_free(a: number, b: number): void;
export function __wbg_jsbytecodeparserdb_free(a: number, b: number): void;
export function jsbytecodeparserdb_bytecode(a: number): number;
export function jsbytecodeparserdb_entry_points(a: number): number;
export function jsradlrgrammar_add_grammar(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function jsradlrgrammar_add_nonterminal(a: number, b: number, c: number, d: number): void;
export function create_soup(a: number): void;
export function create_parse_db(a: number, b: number, c: number, d: number, e: number): void;
export function create_rust_ast_output(a: number, b: number): void;
export function create_parser_states(a: number, b: number, c: number, d: number): void;
export function create_bytecode(a: number, b: number): void;
export function create_bytecode_disassembly(a: number, b: number): void;
export function create_instruction_disassembly(a: number, b: number, c: number): void;
export function get_debug_symbol_ids(a: number, b: number): number;
export function get_debug_state_name(a: number, b: number, c: number): number;
export function __wbg_tokenoffsets_free(a: number, b: number): void;
export function __wbg_get_tokenoffsets_start(a: number): number;
export function __wbg_set_tokenoffsets_start(a: number, b: number): void;
export function __wbg_get_tokenoffsets_end(a: number): number;
export function __wbg_set_tokenoffsets_end(a: number, b: number): void;
export function get_debug_tok_offsets(a: number, b: number): number;
export function get_state_source_string(a: number, b: number, c: number): number;
export function get_symbol_name_from_id(a: number, b: number): number;
export function get_entry_names(a: number): number;
export function get_nonterminal_name_from_id(a: number, b: number, c: number): void;
export function get_nonterminal_names_from_db(a: number): number;
export function get_rule_location(a: number, b: number): number;
export function get_rule_expression_string(a: number, b: number, c: number): void;
export function get_rule_reduce_type(a: number, b: number): number;
export function radlr_free_stack(a: number, b: number): void;
export function radlr_get_token_class_from_codepoint(a: number): number;
export function radlr_allocate_stack(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
