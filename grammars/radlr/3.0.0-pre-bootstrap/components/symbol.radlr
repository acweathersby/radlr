IGNORE { c:sp c:nl }

IMPORT primitive as prim
IMPORT regex as re


<> annotated_symbol 
  
  > repetition^s [tk:reference^r? "?"^o?  precedence?^p ]!?

    :ast { t_Annotated_Symbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  }


<> repetition 

    > symbol '+'

            :ast { t_List_Rules, symbol:$1, tok, min: u32(1) }

    | symbol "*"

            :ast { t_List_Rules, symbol:$1, tok }

    | symbol "(+" token? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok, min: u32(1) }

    | symbol "(*" token? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok }

    | symbol "(" prim::int ("," prim::int)?  token? ")"

            :ast { t_List_Rules, terminal_symbol:$5, symbol:$1, tok, min: u32($3), max: u32($4) }

    | symbol


<> symbol
  
  > terminal | nonterm


<> terminal 

  > token | token_non_terminal | class


<> token

  > prim::string

  :ast { t_Token_Symbol, val:str(tok<1,1>), tok, is_exclusive:true } 

  | prim::quote

  :ast { t_Token_Symbol, val:str(tok<1,1>), tok }

  | re::grammar_regex

  :ast { t_Regex_Symbol, val:$1 }


<> token_non_terminal >

    "tk:" nonterm

        :ast { t_Token_NonTerm_Symbol, nonterm:$2, tok }


<> class 

  > ( '\\n' | '\\s' | '\\id' | '\\sym' | '\\any' | '\\tab' | '\\vtab' | tk:( "\\" c:id+) )

        :ast { t_Class_Symbol, val:str($1<1,0>),  tok }


<> precedence 

  > "{" tk:precedence_num? ( ":" tk:precedence_num? :ast u32($2) )? '}' 
    
    :ast { t_Precedence, sym_prec: u32($2), tok_prec: $3 }

  | "{" ( tk:precedence_num^prec ":" )? "kw" '}' 
  
    :ast { t_Precedence, sym_prec: u32($prec), is_keyword: true }


<> precedence_num > c:num(+)


<> reference > "^" prim::id 


<> nonterm > nonterm_symbol | import_nonterm_symbol


<> import_nonterm_symbol 

    > prim::id '::' prim::id

        :ast { t_Import_NonTerm_Symbol, module:str($1), name:str($3), tok }


<> nonterm_symbol 
  
  > prim::id

  :ast { t_NonTerm_Symbol, val:str($1), tok }