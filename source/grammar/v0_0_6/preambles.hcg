# Copyright 2022 Anthony Weathersby

#
# continued from ./hcg.hcg
#
# Imported files can have their own imports. Hydrocarbon automatically resolves 
# relative references and deduplicate imports.

@IMPORT ./comments.hcg as cm

@IMPORT ./symbols.hcg as sym

@IGNORE g:sp g:nl tk:cm::comment

<> hcg_preamble > preamble

# Repetition of symbols can be achieved through appending `(*)` or `(+)` to the end
# of the symbol.  `(*)` indicates zero or more iterations of the symbol should occur, 
# and `(+)` indicates one or more iterations should occur. 

<> preamble > preamble_clause(*)

# Separating symbols can also be defined through `(+ <separator-symbols>)` or 
# `(* <separator-symbols>)`. 
# For example:
# `g:num(*,)` would match inputs of one or more series integers separated by a comma, 
# such as `1,2,3,4,5,6,7,8,9`, `123456789`, or `12,345,6789`.

# TODO: Detailed annotation on production rule separator `|`

<> preamble_clause >  ignore_preamble
    | import_preamble
    | export_preamble

# Production bodies, the symbols defined after `<> <production-name> >` can contain a mixture of 
# non-terminal production names, terminal symbols, and meta statements such as "(ERR g:sp)"

# In either the Constructor Reduce function or the Return Expression Reduce function
# the symbols of the production can be addressed using the $ operator, which resolves
# to the index location of the terminal symbol or non-terminal production within the 
# production rule. In the following case, $3 resolves to the third symbol in the proceeding
# precedence_preamble rule, sym::terminal_symbol ( keep in mind [(ERR g:sp)] is a meta object 
# and is not an actual symbol of the production rule). $4 resolves to the g:num symbol.

<> ignore_preamble >         \@IGNORE sym::ignore_symbols g:nl                

                                                                        f:r { { t_Ignore , c_Preamble, symbols : $2 } }

<> import_preamble >         \@IMPORT ( g:id | g:sym  )(+\" ) ( t:AS | t:as ) sym::identifier 

                                                                        f:r { { t_Import , c_Preamble, uri: $2, reference:$4, tok } } 

<> export_preamble >         \@EXPORT sym::production_symbol ( t:AS | t:as ) g:id

                                                                        f:r { { t_Export , c_Preamble, production: $2, reference:$4 } } 

