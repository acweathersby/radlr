IGNORE { c:sp c:nl }

EXPORT state as state
EXPORT ir as ir

<> ir > state(+)

<> state > 

        state_declaration  scanner_declaration? "excepts"? top_level_instructions expected_symbols?

            :ast { t_IR_STATE, c_IR, c_IrState, id:$1, scanner: $2, except_handler: bool($3), instructions: $4, symbol_meta:$5 }

<> state_declaration > 

        "state" '['  tk:state_hash_token ']'

            :ast str($3)

<> scanner_declaration > 

        "scanner" '['  tk:state_hash_token ']'

            :ast str($3)

<> state_reference > 

        "state" '[' tk:state_hash_token  ']'

            :ast { t_HASH_NAME, val:str($3) } 

<> top_level_instructions > 

        assertion_instruction(+) 

    |   instruction_sequence

<> instruction_sequence > 

        goto_instruction

        :ast [ $1 ]

    |    except_handler?
        sequence_instruction(+ "then" )
        ( "then" push_goto_instruction(+ "then" ) )? 
        ( "then" goto_instruction )?

        :ast [ $1, $2, $3, $4 ]

    |   push_goto_instruction(+ "then" ) ( "then" goto_instruction )? 

        :ast [$1, $2 ]

<> assertion_instruction >

        "assert" assert_class production_id_list '(' instruction_sequence ')'

            :ast { t_ASSERT, c_IR, c_IR_Instruction, c_IR_Branch, mode:str($2), ids: $3, instructions: $5 }

        | "default"  '(' instruction_sequence ')'

            :ast { t_DEFAULT, c_IR, c_IR_Instruction, c_IR_Branch, instructions: $3}

<> assert_class > 'PRODUCTION' | 'TOKEN'  | 'BYTE' | 'CODEPOINT' | 'CLASS' | 'EOF'


<> goto_instruction > 

    "goto" state_reference

        :ast { t_Goto, c_IR, c_IR_Instruction, state: $2 }

<> push_goto_instruction > 

    "push" state_reference

        :ast { t_PushGoto, c_IR, c_IR_Instruction, state: $2 }

<> except_handler > 

    "push-catch" state_reference "then"

        :ast { t_PushExceptHandler, c_IR, c_IR_Instruction, state: $2 }

<> sequence_instruction >

        reduce_instruction

    |   "assign" "token" token_id_list

        :ast { t_TokenAssign, c_IR, c_IR_Instruction, ids: $3 }

    | "pop"

        :ast { t_Pop, c_IR, c_IR_Instruction  }

    | "pass"

        :ast { t_Pass, c_IR, c_IR_Instruction  }

    | "skip-token"

        :ast { t_SkipToken, c_IR, c_IR_Instruction }

    | "skip-token-scanless"

        :ast { t_SkipTokenScanless, c_IR, c_IR_Instruction }

    | "fail"

        :ast { t_Fail, c_IR, c_IR_Instruction }

    | "peek-token"

        :ast { t_PeekToken, c_IR, c_IR_Instruction }

    | "peek-token-scanless"

        :ast { t_PeekTokenScanless, c_IR, c_IR_Instruction }

    | "peek-skip"

        :ast { t_SkipPeekToken, c_IR, c_IR_Instruction }

    | "peek-skip-scanless"

        :ast { t_SkipPeekTokenScanless, c_IR, c_IR_Instruction }

    | "peek-reset"

        :ast { t_PeekReset, c_IR, c_IR_Instruction }

    | "shift-token" "nothing"?

        :ast { t_ShiftToken, c_IR, c_IR_Instruction, EMPTY:bool($2) }

    | "shift-token-scanless"

        :ast { t_ShiftTokenScanless, c_IR, c_IR_Instruction }

    | "scan-shift"

        :ast { t_ScanShift, c_IR, c_IR_Instruction }

    | "accept" 

        :ast { t_Accept }

<> reduce_instruction > 

    "reduce" tk:integer ( "symbols" "to" )? tk:integer ( "with" "rule" )? tk:integer 

        :ast { t_Reduce, c_IR, c_IR_Instruction, len: i32($2), rule_id: i32($6), prod_id: i32($4) }

<> expected_symbols > 

        'symbols:' 'expected' token_id_list ( 'skipped' token_id_list )?

            :ast { t_Symbols, c_IR, expected:$3, skipped:$4 }

<> token_id_list > 

        '[' ( token_num  )(+)  ']' 

            :ast [ $2 ]

<> production_id_list > 

        '[' tk:integer ']' 

            :ast { t_Num, val: i64($2) }

<> state_hash_token > 

        state_hash_token ( '_' | '-' | c:id | c:num )
    |   c:id
    |   c:num
    |   '_'
    |   '-'

<> token_num > 
        tk:integer :ast { t_Num, val: i64($1) }

<> integer > 
        c:num(+)