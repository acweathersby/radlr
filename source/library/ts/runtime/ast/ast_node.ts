/* 
 * Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
 * see /source/typescript/hydrocarbon.ts for full copyright and warranty 
 * disclaimer notice.
 */

import {
    ByteWriter
} from '@hctoolkit/common';

export type HCObjIterator<T> = (
    node: ASTNode<T>,
    par: ASTNode<T>,
    replace_prop_index: number,
    replace_array_index: number
) => void;
/**
 * Base class for all ASTs generated by the ASYTrip
 * compiler. 
 */
export class ASTNode<T, Type extends keyof T = any> {
    constructor() { }

    Iterate(parent: ASTNode<T>, replace_prop_index: number, replace_array_index: number) { }
    * iterate(parent: ASTNode<T>, replace_prop_index: number, replace_array_index: number) { }

    replace(node: ASTNode<T>, node_index: number, array_index: number) { }

    /**
     * Render this node back to its source code representation
     */
    render(column: number): string { return this.toString(); }

    toString(): string { return ""; }

    get type(): T { return <any>0; }

    set type(t: T) { }

    serialize(writer: ByteWriter) { };
}

export function* iterate<T>(node: ASTNode<T>) {

    let par = null;

    for (const n of node.iterate(par, -1, -1)) {

        yield { node: n };

    }
}

