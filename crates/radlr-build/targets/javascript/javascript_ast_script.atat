@{

/// ### `radlr` Rust Parser
///
/// - **GENERATOR**: radlr 1.0.1-beta2
/// - **SOURCE**: /home/work/projects/lib_radlr/grammars/v2_0_0/grammar.sg
///
/// #### WARNING:
///
/// This is a generated file. Any changes to this file may be **overwritten
/// without notice**.
///
/// #### License:
/// Copyright (c) 2020-2024 Anthony Weathersby
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the 'Software'), to
/// deal in the Software without restriction, including without limitation the
/// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
/// sell copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
/// IN THE SOFTWARE

class Token {
  trim(start, end) {
    return new Token();
  }
};


#ast_nodes(TYPES, STRUCTS, ANY_ENUMS)
  
@RULES.iter#rule_function()
}

#_ {@"This is a comment function. Since we never call it, it has the same effect as a comment in other languages."}

#any_items_union {
  #ast_node_ts_type(self)
  match _iter_last_ {
    true { } { \ |\ }
  }
}

#ty_to_ts ty:obj {
  match ty.#type {
    "Token"       { Token }
    "TokenRange"  { TokenRange }
    "String"      { string } 
    "Bool"        { boolean }
    "I8"          { number }
    "I16"         { number }
    "I32"         { number }
    "I64"         { BigInt }
    "U8"          { number }
    "U16"         { number }
    "U32"         { number }
    "U64"         { BigInt }
    "F32"         { number }
    "F64"         { number }
    "Struct"      { @ty.name }
    "Any"         { (@ANY_ENUMS.[@ty.index].types.iter#any_items_union()) }
    { @{ [TODO: ScalarType @type_name ] } }
  }
}

#ast_node_ts_type ty:obj {
  @agg_type={ @ty.agg_type }
  match @agg_type {
    
    "Map" { Map<#ty_to_ts(ty.key),#ty_to_ts(ty.val)> }
    
    "Vec" { #ty_to_ts(ty.val)[] }
    
    { #ty_to_ts(ty.val) }
  }
}

#ast_nodes types:obj structs:obj any_enums:obj {
  
  #_{ AST DECLARATION -------------------------------------------------------------------------- }
  #_{ Not Used }
  #_{ ------------------------------------------------------------------------------------------ }

  #_{ TYPE DECLARATIONS ------------------------------------------------------------------------ }
  #_{ Not Used }
  #_{ ------------------------------------------------------------------------------------------ }

  #_{ ANY DECLARATIONS ------------------------------------------------------------------------- }
  #_{ Not Used }
  #_{ ------------------------------------------------------------------------------------------ }

  #_{ STRUCT DECLARATIONS----------------------------------------------------------------------- }

  #type_structs {
    #struct_define {

      #param_define del:str {
        @self.name @del @;
      }


      #prop_declare {
        this.@self.name\ =\ @self.name; @;
      }

      \n\n
      export\ class\ @self.name{ 
        constructor(@self.props.iter#param_define(",")) {
          @self.props.iter#prop_declare()
        }
      }
    }

    @self.iter#struct_define()
  }

  @structs.()

  #_{ ------------------------------------------------------------------------------------------ }
}

#rule_function {

  #_{ GRAPH NODE RENDERERS --------------------------------------------------------------------- }

  #type_StrNode ref:str rc:num {    
    @self.init.(ref, rc + 1)

    @r1={ rc + 1 }
    @n={ ref + r1 }

    match (self.init.agg_type, self.init.val.#type) {
      ("Vec", "Token") {  
        var\ @ref@rc\ =\ @n[0]\ .slice(@n[@n\ .length - 1]); @;
      }
      (None, "String") { 
        @{ if(!(typeof @n == "string")) throw("Node is not a String!"); @; }
        var\ @ref@rc\ =\ @n; @;
      }
      (None, "Token") { 
        var\ @ref@rc\ =\ @n . toString(); @;
      }
      { let\ @ref@rc:string\ =\ ""; @; }
    }@;
  }

  #type_NumNode ref:str rc:num {
    match self.init {
      & { 
        @r1={ rc + 1 }
        @n={ ref + r1 }

        @self.init.(ref, rc+1)

        match (self.init.agg_type, self.init.val.#type) {
          ("Map", _)  { todo_map_to_num }
          ("Vec", _) { 
            @{ if(!Array.isArray(@n)) throw("Node is not a Vector "); @; }
            let\ @ref@rc\ =\ @n . length\ ; @;
          }
          (_, "Token")  {  var\ @ref@rc = \ parseFloat(@n . toString()); @; }
          (_, "String")  {  var\ @ref@rc = \ parseFloat(@n . toString()); @; }
          (_, _)  {  var\ @ref@rc\ = @n\ as\ #ty_to_ts(@self.val); @; }
          { @{ [TODO: num convert (@self.init.agg_type, @self.init.val) ] }  }
        }@;
      }
      { var\ @ref\ =\ @self.literal;@; }
    }
  }

  #type_TokNode ref:str rc:num {
    var\ @ref@rc\ =\ tokens[@self.index];@;
  }

  #type_TokRuleNode ref:str rc:num {
    var\ @ref@rc\ =\ nterm_tok;@;
  }

  #type_TrimNode ref:str rc:num {
    @self.init.(ref, rc+1)
    @r1={ rc + 1 }
    @n={ ref + r1 }
    var\ @ref@rc\ =\ @n . trim(@self.start, @self.end);@;
  }

  #type_SymNode r:str  rc:num {
    match (self.agg_type, self.val.#type) {
      (None, "Token") { 
        var\ @r@rc\ =\ nodes[@self.index];@;
        var\ @r@rc\ =\ @r. to_token();@; 
      }
      (_, Some) { 
        var\ @r@rc\ =\ nodes[@self.index];@;
      }
    }@;
  }

  #type_AddNode ref:str rc:num {
    
    @ref_l={ @ref + "_l" }
    @ref_r={ @ref + "_r" }

    @self.right.(@ref_r, rc)
    @self.left.(@ref_l, rc)

    match (self.left.agg_type, self.right.agg_type) {
      ("Map",  "Map") {
        var\ @ref@rc\ =\ {\ ...@ref_l@rc,\ ...@ref_r@rc }; @;
      }

      ("Vec",  "Vec") {
        var\ @ref@rc\ =\ [\ ...@ref_l@rc,\ ...@ref_r@rc ]; @;
      }

      ("Vec",  "Map") { vec_map }
      ("Map",  "Vec") { map_vec }
      (_,  "Vec") { add_vec }
      (_,  "Map") { add_map }
      ("Map",  _) { map_add }

      ("Vec",  _) {
        match self.right.val.#type {
          { 
            var\ @ref@rc\ =\ @ref_l@rc; @;
            @ref@rc . push ( @ref_r@rc ) ; @;
          }
        }
      }

      (_, _) { var\ @ref@rc\ =\ @ref_l@rc\ +\ @ref_r@rc; @; }
    } @;
  }

  #type_MulNode ref:str rc:num  {
    
    @ref_l={ @ref + "_l" }
    @ref_r={ @ref + "_r" }

    @self.right.(@ref_r, @rc)
    @self.left.(@ref_l, @rc)

    match (self.left.agg_type, self.right.agg_type) {
      (None, None) { var\ @ref@rc\ =\ @ref_l@rc\ *\ @ref_r@rc; @; }
    }
  }

  #type_VecNode ref:str rc:num {

    #vec_elements_initializers ref:str rc:num {
      @ref={ ref + "_" + rc + "_" }
      @self.(ref, _index_)@;
    }

    #vec_elements_names ref:str rc:num {
      @ref={ ref + "_" + rc + "_" + _index_ }
      @ref match _iter_last_ { true { } { , } }@;
    }

    @self.init.iter#vec_elements_initializers(ref, rc + 1) 

    var\ @ref@rc\ =\ [\ @self.init.iter#vec_elements_names(ref, rc + 1)\ ];@;
  }


  #type_MapNode ref:str rc:num {

    @ref_key={ @ref + "_key" }
    @ref_val={ @ref + "_val" }

    @self.left.(@ref_key, rc)
    @self.right.(@ref_val, rc)

    var\ @ref@rc\ =\ {};@;
    @ref@rc [@ref_key@rc]\ = @ref_val@rc; @;
  }

  #type_BoolNode ref:str rc:num {
    match self.init {
      { var\ @ref@rc\ =\ false ; @; }
      & { 
        var\ @ref@rc\ =\ match self.literal 
          { "false" { false } "true" { false } } 
          ; @; 
        }
    }
  }

  #_{ ------------------------------------------------------------------------------------------ }

  #_{ Initializers ----------------------------------------------------------------------------- }

  #type_StructInitializer {

    #print_struct_initializer { 
      match self.node {
        Some { @self.node.(@self.name, 0)@; }
      }
    }
    #print_struct_assign { 
      match self.node {
        Some { @self.name 0 }
        { undefined }
      } 
      match _iter_last_ {false{,}} @; 
    }

    @self.props.iter#print_struct_initializer()

    return\ new\ @self.name(
      @self.props.iter#print_struct_assign()
    );@;
  } 

  #type_Initializer {
    @out={ "out" }
    @agg_type={ @self.node.agg_type }
    @key_type={ @self.node.key.#type }
    @val_type={ @self.node.val.#type }
    
    @self.node.(@out, 0)@;

    return\ @out 0;@;
  }

  #_{ 
      Here we iterate through each rule and print out a 
      function that is used to build an AST node from 
      the rule's symbols 
    }

  @r={ self }

  \n
  function\ rule_@_index_(
    \ nodes,@;\ tokens,@;\ nterm_tok 
  )\ { 
    @r.init.()
  }
  \n

  #_{ ------------------------------------------------------------------------------------------ }
}

#_{ Rule LUT ----------------------------------------------------------------------------------- }
 
#print_rule_lookup { rule_@self.id,\ @; }

\n\n

export\ const\ reduce_rules\ =\ [ @RULES.iter#print_rule_lookup() ];

#_{ -------------------------------------------------------------------------------------------- }