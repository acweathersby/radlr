
/// ### `radlr` Rust Parser
///
/// - **GENERATOR**: radlr 1.0.1-beta2
/// - **SOURCE**: /home/work/projects/lib_radlr/grammars/v2_0_0/grammar.sg
///
/// #### WARNING:
///
/// This is a generated file. Any changes to this file may be **overwritten
/// without notice**.
///
/// #### License:
/// Copyright (c) 2023 Anthony Weathersby
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to
/// deal in the Software without restriction, including without limitation the
/// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
/// sell copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
/// IN THE SOFTWARE.

// 
use std::hash::Hash;
use radlr_rust_runtime::{
  types::{ast::*, Token, TokenRange}, deprecate::*,
};



impl State{
  /// Create a [State] node from a `String` input.
  
  pub fn from_string (input: String)-> Result<Box<State>, RadlrParseError> {
    let reader = UTF8StringReader::from(&input);
    ast::ir_from(reader)
  }
}

impl State{
  /// Create a [State] node from a `String` input.
  
  pub fn from_str (input: &str)-> Result<Box<State>, RadlrParseError> {
    let reader = UTF8StringReader::from(input);
    ast::ir_from(reader)
  }
}

impl Grammar{
  /// Create a [Grammar] node from a `String` input.
  
  pub fn from_string (input: String)-> Result<Box<Grammar>, RadlrParseError> {
    let reader = UTF8StringReader::from(&input);
    ast::grammar_from(reader)
  }
}

impl Grammar{
  /// Create a [Grammar] node from a `String` input.
  
  pub fn from_str (input: &str)-> Result<Box<Grammar>, RadlrParseError> {
    let reader = UTF8StringReader::from(input);
    ast::grammar_from(reader)
  }
}

impl AST_Struct{
  /// Create a [AST_Struct] node from a `String` input.
  
  pub fn from_string (input: String)-> Result<Box<AST_Struct>, RadlrParseError> {
    let reader = UTF8StringReader::from(&input);
    ast::ast_struct_from(reader)
  }
}

impl AST_Struct{
  /// Create a [AST_Struct] node from a `String` input.
  
  pub fn from_str (input: &str)-> Result<Box<AST_Struct>, RadlrParseError> {
    let reader = UTF8StringReader::from(input);
    ast::ast_struct_from(reader)
  }
}

pub trait ASTParse<T>{
  fn ir_from(input:T) -> Result<Box<State>, RadlrParseError>;
  fn escaped_from(input:T) -> Result<Vec<String>, RadlrParseError>;
  fn grammar_from(input:T) -> Result<Box<Grammar>, RadlrParseError>;
  fn type_eval_from(input:T) -> Result<ASTNode, RadlrParseError>;
  fn ast_expression_from(input:T) -> Result<ASTNode, RadlrParseError>;
  fn ast_struct_from(input:T) -> Result<Box<AST_Struct>, RadlrParseError>;
}

macro_rules! into_vec {
  ($fn_name:ident, $out_type: ty, $type:ident) => {
    pub fn $fn_name(self) -> Vec<$out_type> {
      if let ASTNode::$type(v) = self {
        v
      } else {
        vec![]
      }
    }
  };
}

macro_rules! to_numeric {
  ($fn_name:ident,  $Num:ty) => {
    fn $fn_name(&self) -> $Num {
      if self.is_numeric() || matches!(self, ASTNode::STRING(..) | ASTNode::TOKEN(..)) {
        match self {
          ASTNode::STRING(str) => str.parse::<i64>().unwrap_or(0) as $Num,
          ASTNode::TOKEN(tok) => tok.to_string().parse::<i64>().unwrap_or(0) as $Num,
          ASTNode::F64(val) => *val as $Num,
          ASTNode::F32(val) => *val as $Num,
          ASTNode::I64(val) => *val as $Num,
          ASTNode::I32(val) => *val as $Num,
          ASTNode::I16(val) => *val as $Num,
          ASTNode::U64(val) => *val as $Num,
          ASTNode::U32(val) => *val as $Num,
          ASTNode::U16(val) => *val as $Num,
          ASTNode::U8(val) => *val as $Num,
          ASTNode::BOOL(val) => (*val as usize) as $Num,
          _ => 0 as $Num,
        }
      } else {
        0 as $Num
      }
    }
  };
}

#[derive(Clone, Debug)]
#[repr(C, u32)]
pub enum ASTNode{
  NONE,
  NODES(Vec<ASTNode>),
  STRING(String),
  STRINGS(Vec<String>),
  F64(f64),
  F32(f32),
  I64(i64),
  I32(i32),
  I16(i16),
  I8(i8),
  U64(u64),
  U32(u32),
  U16(u16),
  U8(u8),
  BOOL(bool),
  F32Vec(Vec<f32>),
  F64Vec(Vec<f64>),
  I64Vec(Vec<i64>),
  I32Vec(Vec<i32>),
  I16Vec(Vec<i16>),
  I8Vec(Vec<i8>),
  U64Vec(Vec<u64>),
  U32Vec(Vec<u32>),
  U16Vec(Vec<u16>),
  U8Vec(Vec<u8>),
  TOKEN(Token),
  TOKENS(Vec<Token>),
  Reset(Box<Reset>),
  Grouped_Rules(Box<Grouped_Rules>),
  AST_NamedReference(Box<AST_NamedReference>),
  Fork(Box<Fork>),
  Reduce(Box<Reduce>),
  SetTokenLen(Box<SetTokenLen>),
  EOFSymbol(Box<EOFSymbol>),
  CFRules(Box<CFRules>),
  AST_Statement(Box<AST_Statement>),
  AST_Add(Box<AST_Add>),
  Precedence(Box<Precedence>),
  NonTermMatch(Box<NonTermMatch>),
  TokenGroupRules(Box<TokenGroupRules>),
  AST_Flag(Box<AST_Flag>),
  SetTokenId(Box<SetTokenId>),
  TerminalToken(Box<TerminalToken>),
  AST_Bool(Box<AST_Bool>),
  Pop(Box<Pop>),
  AST_Vector(Box<AST_Vector>),
  FailHint(Box<FailHint>),
  Grammar(Box<Grammar>),
  AppendRules(Box<AppendRules>),
  TemplateSym(Box<TemplateSym>),
  AST_U64(Box<AST_U64>),
  DEFINED_TYPE_IDENT(Box<DEFINED_TYPE_IDENT>),
  NonTerminal_Symbol(Box<NonTerminal_Symbol>),
  Pass(Box<Pass>),
  Import(Box<Import>),
  Init(Box<Init>),
  AST_IndexReference(Box<AST_IndexReference>),
  AST_Pow(Box<AST_Pow>),
  Template_NonTerminal_Symbol(Box<Template_NonTerminal_Symbol>),
  AST_Member(Box<AST_Member>),
  AST_TrimmedReference(Box<AST_TrimmedReference>),
  AST_F16(Box<AST_F16>),
  AST_I32(Box<AST_I32>),
  Goto(Box<Goto>),
  AST_I8(Box<AST_I8>),
  TemplateASTType(Box<TemplateASTType>),
  AST_F32(Box<AST_F32>),
  Gotos(Box<Gotos>),
  TerminalMatches(Box<TerminalMatches>),
  NonTerminal_Import_Symbol(Box<NonTerminal_Import_Symbol>),
  AST_Mod(Box<AST_Mod>),
  AST_Token(Box<AST_Token>),
  Shift(Box<Shift>),
  Export(Box<Export>),
  Name(Box<Name>),
  NonTerminal_Terminal_Symbol(Box<NonTerminal_Terminal_Symbol>),
  Fail(Box<Fail>),
  AST_NumberLiteral(Box<AST_NumberLiteral>),
  TemplateRules(Box<TemplateRules>),
  AST_U8(Box<AST_U8>),
  AST_U128(Box<AST_U128>),
  Ignore(Box<Ignore>),
  AST_U32(Box<AST_U32>),
  State(Box<State>),
  AST_BoolLiteral(Box<AST_BoolLiteral>),
  List_Rules(Box<List_Rules>),
  AST_Neg(Box<AST_Neg>),
  AST_String(Box<AST_String>),
  AST_I64(Box<AST_I64>),
  DefaultMatch(Box<DefaultMatch>),
  SetLine(Box<SetLine>),
  AST_U16(Box<AST_U16>),
  PegRules(Box<PegRules>),
  AST_STRUCT_TEMPLATE_NAME(Box<AST_STRUCT_TEMPLATE_NAME>),
  NotEmptySet(Box<NotEmptySet>),
  Accept(Box<Accept>),
  ClassSymbol(Box<ClassSymbol>),
  ReduceRaw(Box<ReduceRaw>),
  Statement(Box<Statement>),
  AST_F64(Box<AST_F64>),
  AST_Map(Box<AST_Map>),
  Range(Box<Range>),
  IntMatch(Box<IntMatch>),
  AST_I16(Box<AST_I16>),
  Push(Box<Push>),
  AST_Struct(Box<AST_Struct>),
  Peek(Box<Peek>),
  Matches(Box<Matches>),
  AST_Mul(Box<AST_Mul>),
  ProductionMatches(Box<ProductionMatches>),
  TermMatch(Box<TermMatch>),
  DEFINED_TYPE_NUM(Box<DEFINED_TYPE_NUM>),
  AST_Div(Box<AST_Div>),
  Rule(Box<Rule>),
  AST_Sub(Box<AST_Sub>),
  AnnotatedSymbol(Box<AnnotatedSymbol>),
  AST_Property(Box<AST_Property>),
  Ascript(Box<Ascript>),
  AST_F128(Box<AST_F128>),
  AST_StringLiteral(Box<AST_StringLiteral>),
}

#[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]
pub enum ASTNodeType{
  NODES,
  STRING,
  STRINGS,
  F64,
  F32,
  I64,
  I32,
  I16,
  I8,
  U64,
  U32,
  U16,
  U8,
  F32Vec,
  F64Vec,
  I64Vec,
  I32Vec,
  I16Vec,
  I8Vec,
  U64Vec,
  U32Vec,
  U16Vec,
  U8Vec,
  TOKEN,
  TOKENS,
  BOOL,
  NONE,
  Reset,
  Grouped_Rules,
  AST_NamedReference,
  Fork,
  Reduce,
  SetTokenLen,
  EOFSymbol,
  CFRules,
  AST_Statement,
  AST_Add,
  Precedence,
  NonTermMatch,
  TokenGroupRules,
  AST_Flag,
  SetTokenId,
  TerminalToken,
  AST_Bool,
  Pop,
  AST_Vector,
  FailHint,
  Grammar,
  AppendRules,
  TemplateSym,
  AST_U64,
  DEFINED_TYPE_IDENT,
  NonTerminal_Symbol,
  Pass,
  Import,
  Init,
  AST_IndexReference,
  AST_Pow,
  Template_NonTerminal_Symbol,
  AST_Member,
  AST_TrimmedReference,
  AST_F16,
  AST_I32,
  Goto,
  AST_I8,
  TemplateASTType,
  AST_F32,
  Gotos,
  TerminalMatches,
  NonTerminal_Import_Symbol,
  AST_Mod,
  AST_Token,
  Shift,
  Export,
  Name,
  NonTerminal_Terminal_Symbol,
  Fail,
  AST_NumberLiteral,
  TemplateRules,
  AST_U8,
  AST_U128,
  Ignore,
  AST_U32,
  State,
  AST_BoolLiteral,
  List_Rules,
  AST_Neg,
  AST_String,
  AST_I64,
  DefaultMatch,
  SetLine,
  AST_U16,
  PegRules,
  AST_STRUCT_TEMPLATE_NAME,
  NotEmptySet,
  Accept,
  ClassSymbol,
  ReduceRaw,
  Statement,
  AST_F64,
  AST_Map,
  Range,
  IntMatch,
  AST_I16,
  Push,
  AST_Struct,
  Peek,
  Matches,
  AST_Mul,
  ProductionMatches,
  TermMatch,
  DEFINED_TYPE_NUM,
  AST_Div,
  Rule,
  AST_Sub,
  AnnotatedSymbol,
  AST_Property,
  Ascript,
  AST_F128,
  AST_StringLiteral,
}

impl ASTNode{
  
  into_vec!(into_nodes, ASTNode, NODES);
  into_vec!(into_f64_vec, f64, F64Vec);
  into_vec!(into_f32_vec, f32, F32Vec);
  into_vec!(into_i64_vec, i64, I64Vec);
  into_vec!(into_i32_vec, i32, I32Vec);
  into_vec!(into_i16_vec, i16, I16Vec);
  into_vec!(into_i8_vec, i8, I8Vec);
  into_vec!(into_u64_vec, u64, U64Vec);
  into_vec!(into_u32_vec, u32, U32Vec);
  into_vec!(into_u16_vec, u16, U16Vec);
  into_vec!(into_u8_vec, u8, U8Vec);
  into_vec!(into_tokens, Token, TOKENS);
  to_numeric!(to_i8, i8);
  to_numeric!(to_i16, i16);
  to_numeric!(to_i32, i32);
  to_numeric!(to_i64, i64);
  to_numeric!(to_u8, u8);
  to_numeric!(to_u16, u16);
  to_numeric!(to_u32, u32);
  to_numeric!(to_u64, u64);
  to_numeric!(to_f32, f32);
  to_numeric!(to_f64, f64);
  
  pub fn is_numeric (&self)-> bool {
    use ASTNode::*;
    matches!(self, F64(_) | F32(_)| I64(_)| I32(_)| I16(_)| I8(_)| U64(_)| U32(_)| U16(_)| U8(_))
  }
  
  pub fn to_bool (&self)-> bool {
    self.to_u8() != 0
  }
  
  pub fn into_strings (self)-> Vec<String> {
    
    match self{
      ASTNode::STRINGS(strings) => strings,
      _ => Default::default(),
    }
  }
  
  pub fn to_string (&self)-> String {
    
    match self{
      ASTNode::BOOL(val) => val.to_string(),
      ASTNode::STRING(string) => string.to_owned(),
      ASTNode::TOKEN(val) => val.to_string(),
      _ => self.to_token().to_string(),
    }
  }
  
  pub fn to_token (&self)-> Token {
    
    match self{
      ASTNode::Reset(node) => node.tok.clone(),
      ASTNode::Grouped_Rules(node) => node.tok.clone(),
      ASTNode::AST_NamedReference(node) => node.tok.clone(),
      ASTNode::Fork(node) => node.tok.clone(),
      ASTNode::Reduce(node) => node.tok.clone(),
      ASTNode::EOFSymbol(node) => node.tok.clone(),
      ASTNode::CFRules(node) => node.tok.clone(),
      ASTNode::AST_Statement(node) => node.tok.clone(),
      ASTNode::AST_Add(node) => node.tok.clone(),
      ASTNode::TokenGroupRules(node) => node.tok.clone(),
      ASTNode::AST_Flag(node) => node.tok.clone(),
      ASTNode::SetTokenId(node) => node.tok.clone(),
      ASTNode::TerminalToken(node) => node.tok.clone(),
      ASTNode::AST_Bool(node) => node.tok.clone(),
      ASTNode::Pop(node) => node.tok.clone(),
      ASTNode::AST_Vector(node) => node.tok.clone(),
      ASTNode::Grammar(node) => node.tok.clone(),
      ASTNode::AppendRules(node) => node.tok.clone(),
      ASTNode::AST_U64(node) => node.tok.clone(),
      ASTNode::NonTerminal_Symbol(node) => node.tok.clone(),
      ASTNode::Pass(node) => node.tok.clone(),
      ASTNode::Import(node) => node.tok.clone(),
      ASTNode::AST_IndexReference(node) => node.tok.clone(),
      ASTNode::AST_Pow(node) => node.tok.clone(),
      ASTNode::Template_NonTerminal_Symbol(node) => node.tok.clone(),
      ASTNode::AST_TrimmedReference(node) => node.tok.clone(),
      ASTNode::AST_F16(node) => node.tok.clone(),
      ASTNode::AST_I32(node) => node.tok.clone(),
      ASTNode::Goto(node) => node.tok.clone(),
      ASTNode::AST_I8(node) => node.tok.clone(),
      ASTNode::AST_F32(node) => node.tok.clone(),
      ASTNode::NonTerminal_Import_Symbol(node) => node.tok.clone(),
      ASTNode::AST_Mod(node) => node.tok.clone(),
      ASTNode::Shift(node) => node.tok.clone(),
      ASTNode::NonTerminal_Terminal_Symbol(node) => node.tok.clone(),
      ASTNode::Fail(node) => node.tok.clone(),
      ASTNode::TemplateRules(node) => node.tok.clone(),
      ASTNode::AST_U8(node) => node.tok.clone(),
      ASTNode::AST_U128(node) => node.tok.clone(),
      ASTNode::AST_U32(node) => node.tok.clone(),
      ASTNode::State(node) => node.tok.clone(),
      ASTNode::List_Rules(node) => node.tok.clone(),
      ASTNode::AST_Neg(node) => node.tok.clone(),
      ASTNode::AST_String(node) => node.tok.clone(),
      ASTNode::AST_I64(node) => node.tok.clone(),
      ASTNode::SetLine(node) => node.tok.clone(),
      ASTNode::AST_U16(node) => node.tok.clone(),
      ASTNode::PegRules(node) => node.tok.clone(),
      ASTNode::NotEmptySet(node) => node.tok.clone(),
      ASTNode::Accept(node) => node.tok.clone(),
      ASTNode::ClassSymbol(node) => node.tok.clone(),
      ASTNode::ReduceRaw(node) => node.tok.clone(),
      ASTNode::AST_F64(node) => node.tok.clone(),
      ASTNode::AST_Map(node) => node.tok.clone(),
      ASTNode::AST_I16(node) => node.tok.clone(),
      ASTNode::Push(node) => node.tok.clone(),
      ASTNode::AST_Struct(node) => node.tok.clone(),
      ASTNode::Peek(node) => node.tok.clone(),
      ASTNode::Matches(node) => node.tok.clone(),
      ASTNode::AST_Mul(node) => node.tok.clone(),
      ASTNode::AST_Div(node) => node.tok.clone(),
      ASTNode::Rule(node) => node.tok.clone(),
      ASTNode::AST_Sub(node) => node.tok.clone(),
      ASTNode::AnnotatedSymbol(node) => node.tok.clone(),
      ASTNode::AST_Property(node) => node.tok.clone(),
      ASTNode::Ascript(node) => node.tok.clone(),
      ASTNode::AST_F128(node) => node.tok.clone(),
      ASTNode::AST_StringLiteral(node) => node.tok.clone(),
      ASTNode::TOKEN(val) => val.to_owned(),
      _ => Token::empty(),
    }
  }
}

pub trait GetASTNodeType{
  fn get_type(&self) -> ASTNodeType;
}

impl GetASTNodeType for ASTNode{
  
  fn get_type (&self)-> ASTNodeType {
    
    match self{
      ASTNode::Reset(..) => ASTNodeType::Reset,
      ASTNode::Grouped_Rules(..) => ASTNodeType::Grouped_Rules,
      ASTNode::AST_NamedReference(..) => ASTNodeType::AST_NamedReference,
      ASTNode::Fork(..) => ASTNodeType::Fork,
      ASTNode::Reduce(..) => ASTNodeType::Reduce,
      ASTNode::SetTokenLen(..) => ASTNodeType::SetTokenLen,
      ASTNode::EOFSymbol(..) => ASTNodeType::EOFSymbol,
      ASTNode::CFRules(..) => ASTNodeType::CFRules,
      ASTNode::AST_Statement(..) => ASTNodeType::AST_Statement,
      ASTNode::AST_Add(..) => ASTNodeType::AST_Add,
      ASTNode::Precedence(..) => ASTNodeType::Precedence,
      ASTNode::NonTermMatch(..) => ASTNodeType::NonTermMatch,
      ASTNode::TokenGroupRules(..) => ASTNodeType::TokenGroupRules,
      ASTNode::AST_Flag(..) => ASTNodeType::AST_Flag,
      ASTNode::SetTokenId(..) => ASTNodeType::SetTokenId,
      ASTNode::TerminalToken(..) => ASTNodeType::TerminalToken,
      ASTNode::AST_Bool(..) => ASTNodeType::AST_Bool,
      ASTNode::Pop(..) => ASTNodeType::Pop,
      ASTNode::AST_Vector(..) => ASTNodeType::AST_Vector,
      ASTNode::FailHint(..) => ASTNodeType::FailHint,
      ASTNode::Grammar(..) => ASTNodeType::Grammar,
      ASTNode::AppendRules(..) => ASTNodeType::AppendRules,
      ASTNode::TemplateSym(..) => ASTNodeType::TemplateSym,
      ASTNode::AST_U64(..) => ASTNodeType::AST_U64,
      ASTNode::DEFINED_TYPE_IDENT(..) => ASTNodeType::DEFINED_TYPE_IDENT,
      ASTNode::NonTerminal_Symbol(..) => ASTNodeType::NonTerminal_Symbol,
      ASTNode::Pass(..) => ASTNodeType::Pass,
      ASTNode::Import(..) => ASTNodeType::Import,
      ASTNode::Init(..) => ASTNodeType::Init,
      ASTNode::AST_IndexReference(..) => ASTNodeType::AST_IndexReference,
      ASTNode::AST_Pow(..) => ASTNodeType::AST_Pow,
      ASTNode::Template_NonTerminal_Symbol(..) => ASTNodeType::Template_NonTerminal_Symbol,
      ASTNode::AST_Member(..) => ASTNodeType::AST_Member,
      ASTNode::AST_TrimmedReference(..) => ASTNodeType::AST_TrimmedReference,
      ASTNode::AST_F16(..) => ASTNodeType::AST_F16,
      ASTNode::AST_I32(..) => ASTNodeType::AST_I32,
      ASTNode::Goto(..) => ASTNodeType::Goto,
      ASTNode::AST_I8(..) => ASTNodeType::AST_I8,
      ASTNode::TemplateASTType(..) => ASTNodeType::TemplateASTType,
      ASTNode::AST_F32(..) => ASTNodeType::AST_F32,
      ASTNode::Gotos(..) => ASTNodeType::Gotos,
      ASTNode::TerminalMatches(..) => ASTNodeType::TerminalMatches,
      ASTNode::NonTerminal_Import_Symbol(..) => ASTNodeType::NonTerminal_Import_Symbol,
      ASTNode::AST_Mod(..) => ASTNodeType::AST_Mod,
      ASTNode::AST_Token(..) => ASTNodeType::AST_Token,
      ASTNode::Shift(..) => ASTNodeType::Shift,
      ASTNode::Export(..) => ASTNodeType::Export,
      ASTNode::Name(..) => ASTNodeType::Name,
      ASTNode::NonTerminal_Terminal_Symbol(..) => ASTNodeType::NonTerminal_Terminal_Symbol,
      ASTNode::Fail(..) => ASTNodeType::Fail,
      ASTNode::AST_NumberLiteral(..) => ASTNodeType::AST_NumberLiteral,
      ASTNode::TemplateRules(..) => ASTNodeType::TemplateRules,
      ASTNode::AST_U8(..) => ASTNodeType::AST_U8,
      ASTNode::AST_U128(..) => ASTNodeType::AST_U128,
      ASTNode::Ignore(..) => ASTNodeType::Ignore,
      ASTNode::AST_U32(..) => ASTNodeType::AST_U32,
      ASTNode::State(..) => ASTNodeType::State,
      ASTNode::AST_BoolLiteral(..) => ASTNodeType::AST_BoolLiteral,
      ASTNode::List_Rules(..) => ASTNodeType::List_Rules,
      ASTNode::AST_Neg(..) => ASTNodeType::AST_Neg,
      ASTNode::AST_String(..) => ASTNodeType::AST_String,
      ASTNode::AST_I64(..) => ASTNodeType::AST_I64,
      ASTNode::DefaultMatch(..) => ASTNodeType::DefaultMatch,
      ASTNode::SetLine(..) => ASTNodeType::SetLine,
      ASTNode::AST_U16(..) => ASTNodeType::AST_U16,
      ASTNode::PegRules(..) => ASTNodeType::PegRules,
      ASTNode::AST_STRUCT_TEMPLATE_NAME(..) => ASTNodeType::AST_STRUCT_TEMPLATE_NAME,
      ASTNode::NotEmptySet(..) => ASTNodeType::NotEmptySet,
      ASTNode::Accept(..) => ASTNodeType::Accept,
      ASTNode::ClassSymbol(..) => ASTNodeType::ClassSymbol,
      ASTNode::ReduceRaw(..) => ASTNodeType::ReduceRaw,
      ASTNode::Statement(..) => ASTNodeType::Statement,
      ASTNode::AST_F64(..) => ASTNodeType::AST_F64,
      ASTNode::AST_Map(..) => ASTNodeType::AST_Map,
      ASTNode::Range(..) => ASTNodeType::Range,
      ASTNode::IntMatch(..) => ASTNodeType::IntMatch,
      ASTNode::AST_I16(..) => ASTNodeType::AST_I16,
      ASTNode::Push(..) => ASTNodeType::Push,
      ASTNode::AST_Struct(..) => ASTNodeType::AST_Struct,
      ASTNode::Peek(..) => ASTNodeType::Peek,
      ASTNode::Matches(..) => ASTNodeType::Matches,
      ASTNode::AST_Mul(..) => ASTNodeType::AST_Mul,
      ASTNode::ProductionMatches(..) => ASTNodeType::ProductionMatches,
      ASTNode::TermMatch(..) => ASTNodeType::TermMatch,
      ASTNode::DEFINED_TYPE_NUM(..) => ASTNodeType::DEFINED_TYPE_NUM,
      ASTNode::AST_Div(..) => ASTNodeType::AST_Div,
      ASTNode::Rule(..) => ASTNodeType::Rule,
      ASTNode::AST_Sub(..) => ASTNodeType::AST_Sub,
      ASTNode::AnnotatedSymbol(..) => ASTNodeType::AnnotatedSymbol,
      ASTNode::AST_Property(..) => ASTNodeType::AST_Property,
      ASTNode::Ascript(..) => ASTNodeType::Ascript,
      ASTNode::AST_F128(..) => ASTNodeType::AST_F128,
      ASTNode::AST_StringLiteral(..) => ASTNodeType::AST_StringLiteral,
      _ => ASTNodeType::NONE,
    }
  }
}

impl Default for ASTNode{
  
  fn default ()-> Self {
    ASTNode::NONE
  }
}

impl Hash for ASTNode{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    use ASTNode::*;
    
    match self{
      NONE => {},
      F32(val) => val.to_le_bytes().hash(hasher),
      F64(val) => val.to_le_bytes().hash(hasher),
      U8(val) => val.hash(hasher),
      U16(val) => val.hash(hasher),
      U32(val) => val.hash(hasher),
      U64(val) => val.hash(hasher),
      I8(val) => val.hash(hasher),
      I32(val) => val.hash(hasher),
      I16(val) => val.hash(hasher),
      I64(val) => val.hash(hasher),
      BOOL(val) => val.hash(hasher),
      I8Vec(val) => val.hash(hasher),
      I16Vec(val) => val.hash(hasher),
      I32Vec(val) => val.hash(hasher),
      I64Vec(val) => val.hash(hasher),
      U8Vec(val) => val.hash(hasher),
      U16Vec(val) => val.hash(hasher),
      U32Vec(val) => val.hash(hasher),
      U64Vec(val) => val.hash(hasher),
      STRING(string) => string.hash(hasher),
      STRINGS(strings) => strings.hash(hasher),
      Reset(node) => node.hash(hasher),
      Grouped_Rules(node) => node.hash(hasher),
      AST_NamedReference(node) => node.hash(hasher),
      Fork(node) => node.hash(hasher),
      Reduce(node) => node.hash(hasher),
      SetTokenLen(node) => node.hash(hasher),
      EOFSymbol(node) => node.hash(hasher),
      CFRules(node) => node.hash(hasher),
      AST_Statement(node) => node.hash(hasher),
      AST_Add(node) => node.hash(hasher),
      Precedence(node) => node.hash(hasher),
      NonTermMatch(node) => node.hash(hasher),
      TokenGroupRules(node) => node.hash(hasher),
      AST_Flag(node) => node.hash(hasher),
      SetTokenId(node) => node.hash(hasher),
      TerminalToken(node) => node.hash(hasher),
      AST_Bool(node) => node.hash(hasher),
      Pop(node) => node.hash(hasher),
      AST_Vector(node) => node.hash(hasher),
      FailHint(node) => node.hash(hasher),
      Grammar(node) => node.hash(hasher),
      AppendRules(node) => node.hash(hasher),
      TemplateSym(node) => node.hash(hasher),
      AST_U64(node) => node.hash(hasher),
      DEFINED_TYPE_IDENT(node) => node.hash(hasher),
      NonTerminal_Symbol(node) => node.hash(hasher),
      Pass(node) => node.hash(hasher),
      Import(node) => node.hash(hasher),
      Init(node) => node.hash(hasher),
      AST_IndexReference(node) => node.hash(hasher),
      AST_Pow(node) => node.hash(hasher),
      Template_NonTerminal_Symbol(node) => node.hash(hasher),
      AST_Member(node) => node.hash(hasher),
      AST_TrimmedReference(node) => node.hash(hasher),
      AST_F16(node) => node.hash(hasher),
      AST_I32(node) => node.hash(hasher),
      Goto(node) => node.hash(hasher),
      AST_I8(node) => node.hash(hasher),
      TemplateASTType(node) => node.hash(hasher),
      AST_F32(node) => node.hash(hasher),
      Gotos(node) => node.hash(hasher),
      TerminalMatches(node) => node.hash(hasher),
      NonTerminal_Import_Symbol(node) => node.hash(hasher),
      AST_Mod(node) => node.hash(hasher),
      AST_Token(node) => node.hash(hasher),
      Shift(node) => node.hash(hasher),
      Export(node) => node.hash(hasher),
      Name(node) => node.hash(hasher),
      NonTerminal_Terminal_Symbol(node) => node.hash(hasher),
      Fail(node) => node.hash(hasher),
      AST_NumberLiteral(node) => node.hash(hasher),
      TemplateRules(node) => node.hash(hasher),
      AST_U8(node) => node.hash(hasher),
      AST_U128(node) => node.hash(hasher),
      Ignore(node) => node.hash(hasher),
      AST_U32(node) => node.hash(hasher),
      State(node) => node.hash(hasher),
      AST_BoolLiteral(node) => node.hash(hasher),
      List_Rules(node) => node.hash(hasher),
      AST_Neg(node) => node.hash(hasher),
      AST_String(node) => node.hash(hasher),
      AST_I64(node) => node.hash(hasher),
      DefaultMatch(node) => node.hash(hasher),
      SetLine(node) => node.hash(hasher),
      AST_U16(node) => node.hash(hasher),
      PegRules(node) => node.hash(hasher),
      AST_STRUCT_TEMPLATE_NAME(node) => node.hash(hasher),
      NotEmptySet(node) => node.hash(hasher),
      Accept(node) => node.hash(hasher),
      ClassSymbol(node) => node.hash(hasher),
      ReduceRaw(node) => node.hash(hasher),
      Statement(node) => node.hash(hasher),
      AST_F64(node) => node.hash(hasher),
      AST_Map(node) => node.hash(hasher),
      Range(node) => node.hash(hasher),
      IntMatch(node) => node.hash(hasher),
      AST_I16(node) => node.hash(hasher),
      Push(node) => node.hash(hasher),
      AST_Struct(node) => node.hash(hasher),
      Peek(node) => node.hash(hasher),
      Matches(node) => node.hash(hasher),
      AST_Mul(node) => node.hash(hasher),
      ProductionMatches(node) => node.hash(hasher),
      TermMatch(node) => node.hash(hasher),
      DEFINED_TYPE_NUM(node) => node.hash(hasher),
      AST_Div(node) => node.hash(hasher),
      Rule(node) => node.hash(hasher),
      AST_Sub(node) => node.hash(hasher),
      AnnotatedSymbol(node) => node.hash(hasher),
      AST_Property(node) => node.hash(hasher),
      Ascript(node) => node.hash(hasher),
      AST_F128(node) => node.hash(hasher),
      AST_StringLiteral(node) => node.hash(hasher),
      
      TOKEN(tk) =>{
        tk.to_string().replace(" ", "").replace("\n", "").hash(hasher);
      }
      
      TOKENS(tks) =>{
        
        for tk in tks{
          tk.to_string().replace(" ", "").replace("\n", "").hash(hasher);
        }
      }
      
      NODES(nodes) =>{
        
        for node in nodes{
          node.hash(hasher);
        }
      }
      
      F32Vec(vals) =>{
        
        for v in vals{
          v.to_le_bytes().hash(hasher);
        }
      }
      
      F64Vec(vals) =>{
        
        for v in vals{
          v.to_le_bytes().hash(hasher);
        }
      }
    }
  }
}

#[derive(Clone, Debug)]
pub struct Reset{
  pub ptr_type:String, 
  pub tok: Token, 
}

impl Reset{
  
  pub fn new (ptr_type: String, tok: Token)-> Self {
    
    Self{
      ptr_type,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Reset
  }
}

impl ASTNode{
  
  pub fn to_Reset (self)-> Box::<Reset> {
    
    match self{
      Self::Reset(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Reset (&self)-> Option<&Reset> {
    
    match self{
      Self::Reset(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Reset_mut (&mut self)-> Option<&mut Reset> {
    
    match self{
      Self::Reset(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Reset{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ptr_type.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Grouped_Rules{
  pub rules:Vec<Box<Rule>>, 
  pub tok: Token, 
}

impl Grouped_Rules{
  
  pub fn new (rules: Vec<Box<Rule>>, tok: Token)-> Self {
    
    Self{
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Grouped_Rules
  }
}

impl ASTNode{
  
  pub fn to_Grouped_Rules (self)-> Box::<Grouped_Rules> {
    
    match self{
      Self::Grouped_Rules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Grouped_Rules (&self)-> Option<&Grouped_Rules> {
    
    match self{
      Self::Grouped_Rules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Grouped_Rules_mut (&mut self)-> Option<&mut Grouped_Rules> {
    
    match self{
      Self::Grouped_Rules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Grouped_Rules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_NamedReference{
  pub value:String, 
  pub tok: Token, 
}

impl AST_NamedReference{
  
  pub fn new (value: String, tok: Token)-> Self {
    
    Self{
      value,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_NamedReference
  }
}

impl ASTNode{
  
  pub fn to_AST_NamedReference (self)-> Box::<AST_NamedReference> {
    
    match self{
      Self::AST_NamedReference(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_NamedReference (&self)-> Option<&AST_NamedReference> {
    
    match self{
      Self::AST_NamedReference(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_NamedReference_mut (&mut self)-> Option<&mut AST_NamedReference> {
    
    match self{
      Self::AST_NamedReference(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_NamedReference{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.value.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Fork{
  pub paths:Vec<Box<Goto>>, 
  pub tok: Token, 
}

impl Fork{
  
  pub fn new (paths: Vec<Box<Goto>>, tok: Token)-> Self {
    
    Self{
      paths,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Fork
  }
}

impl ASTNode{
  
  pub fn to_Fork (self)-> Box::<Fork> {
    
    match self{
      Self::Fork(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Fork (&self)-> Option<&Fork> {
    
    match self{
      Self::Fork(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Fork_mut (&mut self)-> Option<&mut Fork> {
    
    match self{
      Self::Fork(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Fork{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.paths{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct Reduce{
  pub ast:Option<ASTNode>, 
  pub len:u32, 
  pub nonterminal:ASTNode, 
  pub tok: Token, 
}

impl Reduce{
  
  pub fn new (ast: Option<ASTNode>, len: u32, nonterminal: ASTNode, tok: Token)-> Self {
    
    Self{
      ast,
      len,
      nonterminal,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Reduce
  }
}

impl ASTNode{
  
  pub fn to_Reduce (self)-> Box::<Reduce> {
    
    match self{
      Self::Reduce(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Reduce (&self)-> Option<&Reduce> {
    
    match self{
      Self::Reduce(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Reduce_mut (&mut self)-> Option<&mut Reduce> {
    
    match self{
      Self::Reduce(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Reduce{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ast.hash(hasher);
    self.len.hash(hasher);
    self.nonterminal.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct SetTokenLen{
  pub id:u32, 
}

impl SetTokenLen{
  
  pub fn new (id: u32)-> Self {
    
    Self{
      id,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::SetTokenLen
  }
}

impl ASTNode{
  
  pub fn to_SetTokenLen (self)-> Box::<SetTokenLen> {
    
    match self{
      Self::SetTokenLen(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_SetTokenLen (&self)-> Option<&SetTokenLen> {
    
    match self{
      Self::SetTokenLen(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_SetTokenLen_mut (&mut self)-> Option<&mut SetTokenLen> {
    
    match self{
      Self::SetTokenLen(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for SetTokenLen{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.id.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct EOFSymbol{
  pub tok: Token, 
}

impl EOFSymbol{
  
  pub fn new (tok: Token)-> Self {
    
    Self{
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::EOFSymbol
  }
}

impl ASTNode{
  
  pub fn to_EOFSymbol (self)-> Box::<EOFSymbol> {
    
    match self{
      Self::EOFSymbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_EOFSymbol (&self)-> Option<&EOFSymbol> {
    
    match self{
      Self::EOFSymbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_EOFSymbol_mut (&mut self)-> Option<&mut EOFSymbol> {
    
    match self{
      Self::EOFSymbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for EOFSymbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct CFRules{
  pub name_sym:Box<NonTerminal_Symbol>, 
  pub rules:Vec<Box<Rule>>, 
  pub tok: Token, 
}

impl CFRules{
  
  pub fn new (name_sym: Box<NonTerminal_Symbol>, rules: Vec<Box<Rule>>, tok: Token)-> Self {
    
    Self{
      name_sym,
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::CFRules
  }
}

impl ASTNode{
  
  pub fn to_CFRules (self)-> Box::<CFRules> {
    
    match self{
      Self::CFRules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_CFRules (&self)-> Option<&CFRules> {
    
    match self{
      Self::CFRules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_CFRules_mut (&mut self)-> Option<&mut CFRules> {
    
    match self{
      Self::CFRules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for CFRules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name_sym.hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_Statement{
  pub expression:ASTNode, 
  pub tok: Token, 
}

impl AST_Statement{
  
  pub fn new (expression: ASTNode, tok: Token)-> Self {
    
    Self{
      expression,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Statement
  }
}

impl ASTNode{
  
  pub fn to_AST_Statement (self)-> Box::<AST_Statement> {
    
    match self{
      Self::AST_Statement(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Statement (&self)-> Option<&AST_Statement> {
    
    match self{
      Self::AST_Statement(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Statement_mut (&mut self)-> Option<&mut AST_Statement> {
    
    match self{
      Self::AST_Statement(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Statement{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.expression.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Add{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Add{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Add
  }
}

impl ASTNode{
  
  pub fn to_AST_Add (self)-> Box::<AST_Add> {
    
    match self{
      Self::AST_Add(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Add (&self)-> Option<&AST_Add> {
    
    match self{
      Self::AST_Add(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Add_mut (&mut self)-> Option<&mut AST_Add> {
    
    match self{
      Self::AST_Add(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Add{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Precedence{
  pub is_keyword:bool, 
  pub kot_prec:u32, 
  pub sym_prec:u32, 
}

impl Precedence{
  
  pub fn new (is_keyword: bool, kot_prec: u32, sym_prec: u32)-> Self {
    
    Self{
      is_keyword,
      kot_prec,
      sym_prec,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Precedence
  }
}

impl ASTNode{
  
  pub fn to_Precedence (self)-> Box::<Precedence> {
    
    match self{
      Self::Precedence(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Precedence (&self)-> Option<&Precedence> {
    
    match self{
      Self::Precedence(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Precedence_mut (&mut self)-> Option<&mut Precedence> {
    
    match self{
      Self::Precedence(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Precedence{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.is_keyword.hash(hasher);
    self.kot_prec.hash(hasher);
    self.sym_prec.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct NonTermMatch{
  pub statement:Box<Statement>, 
  pub sym:ASTNode, 
}

impl NonTermMatch{
  
  pub fn new (statement: Box<Statement>, sym: ASTNode)-> Self {
    
    Self{
      statement,
      sym,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::NonTermMatch
  }
}

impl ASTNode{
  
  pub fn to_NonTermMatch (self)-> Box::<NonTermMatch> {
    
    match self{
      Self::NonTermMatch(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_NonTermMatch (&self)-> Option<&NonTermMatch> {
    
    match self{
      Self::NonTermMatch(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_NonTermMatch_mut (&mut self)-> Option<&mut NonTermMatch> {
    
    match self{
      Self::NonTermMatch(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for NonTermMatch{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.statement.hash(hasher);
    self.sym.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct TokenGroupRules{
  pub rules:Vec<Box<Rule>>, 
  pub tok: Token, 
}

impl TokenGroupRules{
  
  pub fn new (rules: Vec<Box<Rule>>, tok: Token)-> Self {
    
    Self{
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TokenGroupRules
  }
}

impl ASTNode{
  
  pub fn to_TokenGroupRules (self)-> Box::<TokenGroupRules> {
    
    match self{
      Self::TokenGroupRules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TokenGroupRules (&self)-> Option<&TokenGroupRules> {
    
    match self{
      Self::TokenGroupRules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TokenGroupRules_mut (&mut self)-> Option<&mut TokenGroupRules> {
    
    match self{
      Self::TokenGroupRules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TokenGroupRules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_Flag{
  pub ty:String, 
  pub val:Token, 
  pub tok: Token, 
}

impl AST_Flag{
  
  pub fn new (ty: String, val: Token, tok: Token)-> Self {
    
    Self{
      ty,
      val,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Flag
  }
}

impl ASTNode{
  
  pub fn to_AST_Flag (self)-> Box::<AST_Flag> {
    
    match self{
      Self::AST_Flag(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Flag (&self)-> Option<&AST_Flag> {
    
    match self{
      Self::AST_Flag(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Flag_mut (&mut self)-> Option<&mut AST_Flag> {
    
    match self{
      Self::AST_Flag(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Flag{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ty.hash(hasher);
    self.val.to_string().replace(" ", "").replace("\n", "").hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct SetTokenId{
  pub id:u32, 
  pub tok: Token, 
}

impl SetTokenId{
  
  pub fn new (id: u32, tok: Token)-> Self {
    
    Self{
      id,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::SetTokenId
  }
}

impl ASTNode{
  
  pub fn to_SetTokenId (self)-> Box::<SetTokenId> {
    
    match self{
      Self::SetTokenId(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_SetTokenId (&self)-> Option<&SetTokenId> {
    
    match self{
      Self::SetTokenId(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_SetTokenId_mut (&mut self)-> Option<&mut SetTokenId> {
    
    match self{
      Self::SetTokenId(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for SetTokenId{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.id.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct TerminalToken{
  pub is_exclusive:bool, 
  pub val:String, 
  pub tok: Token, 
}

impl TerminalToken{
  
  pub fn new (is_exclusive: bool, val: String, tok: Token)-> Self {
    
    Self{
      is_exclusive,
      val,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TerminalToken
  }
}

impl ASTNode{
  
  pub fn to_TerminalToken (self)-> Box::<TerminalToken> {
    
    match self{
      Self::TerminalToken(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TerminalToken (&self)-> Option<&TerminalToken> {
    
    match self{
      Self::TerminalToken(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TerminalToken_mut (&mut self)-> Option<&mut TerminalToken> {
    
    match self{
      Self::TerminalToken(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TerminalToken{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.is_exclusive.hash(hasher);
    self.val.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Bool{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_Bool{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Bool
  }
}

impl ASTNode{
  
  pub fn to_AST_Bool (self)-> Box::<AST_Bool> {
    
    match self{
      Self::AST_Bool(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Bool (&self)-> Option<&AST_Bool> {
    
    match self{
      Self::AST_Bool(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Bool_mut (&mut self)-> Option<&mut AST_Bool> {
    
    match self{
      Self::AST_Bool(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Bool{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Pop{
  pub count:u32, 
  pub tok: Token, 
}

impl Pop{
  
  pub fn new (count: u32, tok: Token)-> Self {
    
    Self{
      count,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Pop
  }
}

impl ASTNode{
  
  pub fn to_Pop (self)-> Box::<Pop> {
    
    match self{
      Self::Pop(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Pop (&self)-> Option<&Pop> {
    
    match self{
      Self::Pop(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Pop_mut (&mut self)-> Option<&mut Pop> {
    
    match self{
      Self::Pop(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Pop{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.count.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Vector{
  pub initializer:Vec<ASTNode>, 
  pub tok: Token, 
}

impl AST_Vector{
  
  pub fn new (initializer: Vec<ASTNode>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Vector
  }
}

impl ASTNode{
  
  pub fn to_AST_Vector (self)-> Box::<AST_Vector> {
    
    match self{
      Self::AST_Vector(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Vector (&self)-> Option<&AST_Vector> {
    
    match self{
      Self::AST_Vector(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Vector_mut (&mut self)-> Option<&mut AST_Vector> {
    
    match self{
      Self::AST_Vector(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Vector{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.initializer{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct FailHint{
  pub message:String, 
}

impl FailHint{
  
  pub fn new (message: String)-> Self {
    
    Self{
      message,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::FailHint
  }
}

impl ASTNode{
  
  pub fn to_FailHint (self)-> Box::<FailHint> {
    
    match self{
      Self::FailHint(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_FailHint (&self)-> Option<&FailHint> {
    
    match self{
      Self::FailHint(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_FailHint_mut (&mut self)-> Option<&mut FailHint> {
    
    match self{
      Self::FailHint(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for FailHint{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.message.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Grammar{
  pub preamble:Vec<ASTNode>, 
  pub rules:Vec<ASTNode>, 
  pub tok: Token, 
}

impl Grammar{
  
  pub fn new (preamble: Vec<ASTNode>, rules: Vec<ASTNode>, tok: Token)-> Self {
    
    Self{
      preamble,
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Grammar
  }
}

impl ASTNode{
  
  pub fn to_Grammar (self)-> Box::<Grammar> {
    
    match self{
      Self::Grammar(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Grammar (&self)-> Option<&Grammar> {
    
    match self{
      Self::Grammar(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Grammar_mut (&mut self)-> Option<&mut Grammar> {
    
    match self{
      Self::Grammar(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Grammar{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.preamble{
      val.hash(hasher);
    }
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AppendRules{
  pub name_sym:ASTNode, 
  pub rules:Vec<Box<Rule>>, 
  pub tok: Token, 
}

impl AppendRules{
  
  pub fn new (name_sym: ASTNode, rules: Vec<Box<Rule>>, tok: Token)-> Self {
    
    Self{
      name_sym,
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AppendRules
  }
}

impl ASTNode{
  
  pub fn to_AppendRules (self)-> Box::<AppendRules> {
    
    match self{
      Self::AppendRules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AppendRules (&self)-> Option<&AppendRules> {
    
    match self{
      Self::AppendRules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AppendRules_mut (&mut self)-> Option<&mut AppendRules> {
    
    match self{
      Self::AppendRules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AppendRules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name_sym.hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct TemplateSym{
  pub val:String, 
}

impl TemplateSym{
  
  pub fn new (val: String)-> Self {
    
    Self{
      val,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TemplateSym
  }
}

impl ASTNode{
  
  pub fn to_TemplateSym (self)-> Box::<TemplateSym> {
    
    match self{
      Self::TemplateSym(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TemplateSym (&self)-> Option<&TemplateSym> {
    
    match self{
      Self::TemplateSym(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TemplateSym_mut (&mut self)-> Option<&mut TemplateSym> {
    
    match self{
      Self::TemplateSym(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TemplateSym{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.val.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_U64{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_U64{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_U64
  }
}

impl ASTNode{
  
  pub fn to_AST_U64 (self)-> Box::<AST_U64> {
    
    match self{
      Self::AST_U64(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_U64 (&self)-> Option<&AST_U64> {
    
    match self{
      Self::AST_U64(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_U64_mut (&mut self)-> Option<&mut AST_U64> {
    
    match self{
      Self::AST_U64(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_U64{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct DEFINED_TYPE_IDENT{
}

impl DEFINED_TYPE_IDENT{
  
  pub fn new ()-> Self {
    
    Self{
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::DEFINED_TYPE_IDENT
  }
}

impl ASTNode{
  
  pub fn to_DEFINED_TYPE_IDENT (self)-> Box::<DEFINED_TYPE_IDENT> {
    
    match self{
      Self::DEFINED_TYPE_IDENT(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_DEFINED_TYPE_IDENT (&self)-> Option<&DEFINED_TYPE_IDENT> {
    
    match self{
      Self::DEFINED_TYPE_IDENT(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_DEFINED_TYPE_IDENT_mut (&mut self)-> Option<&mut DEFINED_TYPE_IDENT> {
    
    match self{
      Self::DEFINED_TYPE_IDENT(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for DEFINED_TYPE_IDENT{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct NonTerminal_Symbol{
  pub name:String, 
  pub tok: Token, 
}

impl NonTerminal_Symbol{
  
  pub fn new (name: String, tok: Token)-> Self {
    
    Self{
      name,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::NonTerminal_Symbol
  }
}

impl ASTNode{
  
  pub fn to_NonTerminal_Symbol (self)-> Box::<NonTerminal_Symbol> {
    
    match self{
      Self::NonTerminal_Symbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_NonTerminal_Symbol (&self)-> Option<&NonTerminal_Symbol> {
    
    match self{
      Self::NonTerminal_Symbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_NonTerminal_Symbol_mut (&mut self)-> Option<&mut NonTerminal_Symbol> {
    
    match self{
      Self::NonTerminal_Symbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for NonTerminal_Symbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Pass{
  pub tok: Token, 
}

impl Pass{
  
  pub fn new (tok: Token)-> Self {
    
    Self{
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Pass
  }
}

impl ASTNode{
  
  pub fn to_Pass (self)-> Box::<Pass> {
    
    match self{
      Self::Pass(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Pass (&self)-> Option<&Pass> {
    
    match self{
      Self::Pass(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Pass_mut (&mut self)-> Option<&mut Pass> {
    
    match self{
      Self::Pass(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Pass{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Import{
  pub reference:String, 
  pub uri:String, 
  pub tok: Token, 
}

impl Import{
  
  pub fn new (reference: String, uri: String, tok: Token)-> Self {
    
    Self{
      reference,
      uri,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Import
  }
}

impl ASTNode{
  
  pub fn to_Import (self)-> Box::<Import> {
    
    match self{
      Self::Import(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Import (&self)-> Option<&Import> {
    
    match self{
      Self::Import(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Import_mut (&mut self)-> Option<&mut Import> {
    
    match self{
      Self::Import(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Import{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.reference.hash(hasher);
    self.uri.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Init{
  pub expression:ASTNode, 
}

impl Init{
  
  pub fn new (expression: ASTNode)-> Self {
    
    Self{
      expression,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Init
  }
}

impl ASTNode{
  
  pub fn to_Init (self)-> Box::<Init> {
    
    match self{
      Self::Init(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Init (&self)-> Option<&Init> {
    
    match self{
      Self::Init(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Init_mut (&mut self)-> Option<&mut Init> {
    
    match self{
      Self::Init(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Init{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.expression.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_IndexReference{
  pub value:i64, 
  pub tok: Token, 
}

impl AST_IndexReference{
  
  pub fn new (value: i64, tok: Token)-> Self {
    
    Self{
      value,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_IndexReference
  }
}

impl ASTNode{
  
  pub fn to_AST_IndexReference (self)-> Box::<AST_IndexReference> {
    
    match self{
      Self::AST_IndexReference(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_IndexReference (&self)-> Option<&AST_IndexReference> {
    
    match self{
      Self::AST_IndexReference(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_IndexReference_mut (&mut self)-> Option<&mut AST_IndexReference> {
    
    match self{
      Self::AST_IndexReference(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_IndexReference{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.value.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Pow{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Pow{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Pow
  }
}

impl ASTNode{
  
  pub fn to_AST_Pow (self)-> Box::<AST_Pow> {
    
    match self{
      Self::AST_Pow(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Pow (&self)-> Option<&AST_Pow> {
    
    match self{
      Self::AST_Pow(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Pow_mut (&mut self)-> Option<&mut AST_Pow> {
    
    match self{
      Self::AST_Pow(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Pow{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Template_NonTerminal_Symbol{
  pub name:ASTNode, 
  pub template_args:Vec<ASTNode>, 
  pub tok: Token, 
}

impl Template_NonTerminal_Symbol{
  
  pub fn new (name: ASTNode, template_args: Vec<ASTNode>, tok: Token)-> Self {
    
    Self{
      name,
      template_args,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Template_NonTerminal_Symbol
  }
}

impl ASTNode{
  
  pub fn to_Template_NonTerminal_Symbol (self)-> Box::<Template_NonTerminal_Symbol> {
    
    match self{
      Self::Template_NonTerminal_Symbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Template_NonTerminal_Symbol (&self)-> Option<&Template_NonTerminal_Symbol> {
    
    match self{
      Self::Template_NonTerminal_Symbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Template_NonTerminal_Symbol_mut (&mut self)-> Option<&mut Template_NonTerminal_Symbol> {
    
    match self{
      Self::Template_NonTerminal_Symbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Template_NonTerminal_Symbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name.hash(hasher);
    
    for val in &self.template_args{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_Member{
  pub property:Token, 
  pub reference:ASTNode, 
}

impl AST_Member{
  
  pub fn new (property: Token, reference: ASTNode)-> Self {
    
    Self{
      property,
      reference,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Member
  }
}

impl ASTNode{
  
  pub fn to_AST_Member (self)-> Box::<AST_Member> {
    
    match self{
      Self::AST_Member(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Member (&self)-> Option<&AST_Member> {
    
    match self{
      Self::AST_Member(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Member_mut (&mut self)-> Option<&mut AST_Member> {
    
    match self{
      Self::AST_Member(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Member{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.property.to_string().replace(" ", "").replace("\n", "").hash(hasher);
    self.reference.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_TrimmedReference{
  pub range:Box<Range>, 
  pub reference:ASTNode, 
  pub tok: Token, 
}

impl AST_TrimmedReference{
  
  pub fn new (range: Box<Range>, reference: ASTNode, tok: Token)-> Self {
    
    Self{
      range,
      reference,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_TrimmedReference
  }
}

impl ASTNode{
  
  pub fn to_AST_TrimmedReference (self)-> Box::<AST_TrimmedReference> {
    
    match self{
      Self::AST_TrimmedReference(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_TrimmedReference (&self)-> Option<&AST_TrimmedReference> {
    
    match self{
      Self::AST_TrimmedReference(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_TrimmedReference_mut (&mut self)-> Option<&mut AST_TrimmedReference> {
    
    match self{
      Self::AST_TrimmedReference(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_TrimmedReference{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.range.hash(hasher);
    self.reference.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_F16{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_F16{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_F16
  }
}

impl ASTNode{
  
  pub fn to_AST_F16 (self)-> Box::<AST_F16> {
    
    match self{
      Self::AST_F16(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_F16 (&self)-> Option<&AST_F16> {
    
    match self{
      Self::AST_F16(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_F16_mut (&mut self)-> Option<&mut AST_F16> {
    
    match self{
      Self::AST_F16(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_F16{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_I32{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_I32{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_I32
  }
}

impl ASTNode{
  
  pub fn to_AST_I32 (self)-> Box::<AST_I32> {
    
    match self{
      Self::AST_I32(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_I32 (&self)-> Option<&AST_I32> {
    
    match self{
      Self::AST_I32(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_I32_mut (&mut self)-> Option<&mut AST_I32> {
    
    match self{
      Self::AST_I32(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_I32{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Goto{
  pub name:String, 
  pub nonterminal:ASTNode, 
  pub tok: Token, 
}

impl Goto{
  
  pub fn new (name: String, nonterminal: ASTNode, tok: Token)-> Self {
    
    Self{
      name,
      nonterminal,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Goto
  }
}

impl ASTNode{
  
  pub fn to_Goto (self)-> Box::<Goto> {
    
    match self{
      Self::Goto(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Goto (&self)-> Option<&Goto> {
    
    match self{
      Self::Goto(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Goto_mut (&mut self)-> Option<&mut Goto> {
    
    match self{
      Self::Goto(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Goto{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name.hash(hasher);
    self.nonterminal.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_I8{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_I8{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_I8
  }
}

impl ASTNode{
  
  pub fn to_AST_I8 (self)-> Box::<AST_I8> {
    
    match self{
      Self::AST_I8(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_I8 (&self)-> Option<&AST_I8> {
    
    match self{
      Self::AST_I8(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_I8_mut (&mut self)-> Option<&mut AST_I8> {
    
    match self{
      Self::AST_I8(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_I8{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct TemplateASTType{
  pub val:String, 
}

impl TemplateASTType{
  
  pub fn new (val: String)-> Self {
    
    Self{
      val,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TemplateASTType
  }
}

impl ASTNode{
  
  pub fn to_TemplateASTType (self)-> Box::<TemplateASTType> {
    
    match self{
      Self::TemplateASTType(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TemplateASTType (&self)-> Option<&TemplateASTType> {
    
    match self{
      Self::TemplateASTType(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TemplateASTType_mut (&mut self)-> Option<&mut TemplateASTType> {
    
    match self{
      Self::TemplateASTType(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TemplateASTType{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.val.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_F32{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_F32{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_F32
  }
}

impl ASTNode{
  
  pub fn to_AST_F32 (self)-> Box::<AST_F32> {
    
    match self{
      Self::AST_F32(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_F32 (&self)-> Option<&AST_F32> {
    
    match self{
      Self::AST_F32(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_F32_mut (&mut self)-> Option<&mut AST_F32> {
    
    match self{
      Self::AST_F32(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_F32{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Gotos{
  pub fork:Option<Box<Fork>>, 
  pub goto:Option<Box<Goto>>, 
  pub pushes:Vec<Box<Push>>, 
}

impl Gotos{
  
  pub fn new (fork: Option<Box<Fork>>, goto: Option<Box<Goto>>, pushes: Vec<Box<Push>>)-> Self {
    
    Self{
      fork,
      goto,
      pushes,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Gotos
  }
}

impl ASTNode{
  
  pub fn to_Gotos (self)-> Box::<Gotos> {
    
    match self{
      Self::Gotos(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Gotos (&self)-> Option<&Gotos> {
    
    match self{
      Self::Gotos(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Gotos_mut (&mut self)-> Option<&mut Gotos> {
    
    match self{
      Self::Gotos(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Gotos{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.fork.hash(hasher);
    self.goto.hash(hasher);
    
    for val in &self.pushes{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct TerminalMatches{
  pub matches:Vec<ASTNode>, 
}

impl TerminalMatches{
  
  pub fn new (matches: Vec<ASTNode>)-> Self {
    
    Self{
      matches,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TerminalMatches
  }
}

impl ASTNode{
  
  pub fn to_TerminalMatches (self)-> Box::<TerminalMatches> {
    
    match self{
      Self::TerminalMatches(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TerminalMatches (&self)-> Option<&TerminalMatches> {
    
    match self{
      Self::TerminalMatches(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TerminalMatches_mut (&mut self)-> Option<&mut TerminalMatches> {
    
    match self{
      Self::TerminalMatches(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TerminalMatches{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.matches{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct NonTerminal_Import_Symbol{
  pub module:String, 
  pub name:String, 
  pub tok: Token, 
}

impl NonTerminal_Import_Symbol{
  
  pub fn new (module: String, name: String, tok: Token)-> Self {
    
    Self{
      module,
      name,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::NonTerminal_Import_Symbol
  }
}

impl ASTNode{
  
  pub fn to_NonTerminal_Import_Symbol (self)-> Box::<NonTerminal_Import_Symbol> {
    
    match self{
      Self::NonTerminal_Import_Symbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_NonTerminal_Import_Symbol (&self)-> Option<&NonTerminal_Import_Symbol> {
    
    match self{
      Self::NonTerminal_Import_Symbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_NonTerminal_Import_Symbol_mut (&mut self)-> Option<&mut NonTerminal_Import_Symbol> {
    
    match self{
      Self::NonTerminal_Import_Symbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for NonTerminal_Import_Symbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.module.hash(hasher);
    self.name.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Mod{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Mod{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Mod
  }
}

impl ASTNode{
  
  pub fn to_AST_Mod (self)-> Box::<AST_Mod> {
    
    match self{
      Self::AST_Mod(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Mod (&self)-> Option<&AST_Mod> {
    
    match self{
      Self::AST_Mod(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Mod_mut (&mut self)-> Option<&mut AST_Mod> {
    
    match self{
      Self::AST_Mod(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Mod{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Token{
  pub range:Option<Box<Range>>, 
}

impl AST_Token{
  
  pub fn new (range: Option<Box<Range>>)-> Self {
    
    Self{
      range,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Token
  }
}

impl ASTNode{
  
  pub fn to_AST_Token (self)-> Box::<AST_Token> {
    
    match self{
      Self::AST_Token(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Token (&self)-> Option<&AST_Token> {
    
    match self{
      Self::AST_Token(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Token_mut (&mut self)-> Option<&mut AST_Token> {
    
    match self{
      Self::AST_Token(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Token{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.range.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Shift{
  pub ptr_type:String, 
  pub skip:bool, 
  pub tok: Token, 
}

impl Shift{
  
  pub fn new (ptr_type: String, skip: bool, tok: Token)-> Self {
    
    Self{
      ptr_type,
      skip,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Shift
  }
}

impl ASTNode{
  
  pub fn to_Shift (self)-> Box::<Shift> {
    
    match self{
      Self::Shift(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Shift (&self)-> Option<&Shift> {
    
    match self{
      Self::Shift(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Shift_mut (&mut self)-> Option<&mut Shift> {
    
    match self{
      Self::Shift(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Shift{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ptr_type.hash(hasher);
    self.skip.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Export{
  pub nonterminal:ASTNode, 
  pub reference:String, 
}

impl Export{
  
  pub fn new (nonterminal: ASTNode, reference: String)-> Self {
    
    Self{
      nonterminal,
      reference,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Export
  }
}

impl ASTNode{
  
  pub fn to_Export (self)-> Box::<Export> {
    
    match self{
      Self::Export(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Export (&self)-> Option<&Export> {
    
    match self{
      Self::Export(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Export_mut (&mut self)-> Option<&mut Export> {
    
    match self{
      Self::Export(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Export{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.nonterminal.hash(hasher);
    self.reference.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Name{
  pub name:String, 
}

impl Name{
  
  pub fn new (name: String)-> Self {
    
    Self{
      name,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Name
  }
}

impl ASTNode{
  
  pub fn to_Name (self)-> Box::<Name> {
    
    match self{
      Self::Name(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Name (&self)-> Option<&Name> {
    
    match self{
      Self::Name(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Name_mut (&mut self)-> Option<&mut Name> {
    
    match self{
      Self::Name(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Name{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct NonTerminal_Terminal_Symbol{
  pub nonterminal:ASTNode, 
  pub tok: Token, 
}

impl NonTerminal_Terminal_Symbol{
  
  pub fn new (nonterminal: ASTNode, tok: Token)-> Self {
    
    Self{
      nonterminal,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::NonTerminal_Terminal_Symbol
  }
}

impl ASTNode{
  
  pub fn to_NonTerminal_Terminal_Symbol (self)-> Box::<NonTerminal_Terminal_Symbol> {
    
    match self{
      Self::NonTerminal_Terminal_Symbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_NonTerminal_Terminal_Symbol (&self)-> Option<&NonTerminal_Terminal_Symbol> {
    
    match self{
      Self::NonTerminal_Terminal_Symbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_NonTerminal_Terminal_Symbol_mut (&mut self)-> Option<&mut NonTerminal_Terminal_Symbol> {
    
    match self{
      Self::NonTerminal_Terminal_Symbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for NonTerminal_Terminal_Symbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.nonterminal.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Fail{
  pub tok: Token, 
}

impl Fail{
  
  pub fn new (tok: Token)-> Self {
    
    Self{
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Fail
  }
}

impl ASTNode{
  
  pub fn to_Fail (self)-> Box::<Fail> {
    
    match self{
      Self::Fail(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Fail (&self)-> Option<&Fail> {
    
    match self{
      Self::Fail(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Fail_mut (&mut self)-> Option<&mut Fail> {
    
    match self{
      Self::Fail(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Fail{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_NumberLiteral{
  pub value:f64, 
}

impl AST_NumberLiteral{
  
  pub fn new (value: f64)-> Self {
    
    Self{
      value,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_NumberLiteral
  }
}

impl ASTNode{
  
  pub fn to_AST_NumberLiteral (self)-> Box::<AST_NumberLiteral> {
    
    match self{
      Self::AST_NumberLiteral(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_NumberLiteral (&self)-> Option<&AST_NumberLiteral> {
    
    match self{
      Self::AST_NumberLiteral(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_NumberLiteral_mut (&mut self)-> Option<&mut AST_NumberLiteral> {
    
    match self{
      Self::AST_NumberLiteral(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_NumberLiteral{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.value.to_le_bytes().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct TemplateRules{
  pub name_sym:Box<NonTerminal_Symbol>, 
  pub rules:Vec<Box<Rule>>, 
  pub template_params:Vec<ASTNode>, 
  pub tok: Token, 
}

impl TemplateRules{
  
  pub fn new (name_sym: Box<NonTerminal_Symbol>, rules: Vec<Box<Rule>>, template_params: Vec<ASTNode>, tok: Token)-> Self {
    
    Self{
      name_sym,
      rules,
      template_params,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TemplateRules
  }
}

impl ASTNode{
  
  pub fn to_TemplateRules (self)-> Box::<TemplateRules> {
    
    match self{
      Self::TemplateRules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TemplateRules (&self)-> Option<&TemplateRules> {
    
    match self{
      Self::TemplateRules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TemplateRules_mut (&mut self)-> Option<&mut TemplateRules> {
    
    match self{
      Self::TemplateRules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TemplateRules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name_sym.hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
    
    for val in &self.template_params{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_U8{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_U8{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_U8
  }
}

impl ASTNode{
  
  pub fn to_AST_U8 (self)-> Box::<AST_U8> {
    
    match self{
      Self::AST_U8(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_U8 (&self)-> Option<&AST_U8> {
    
    match self{
      Self::AST_U8(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_U8_mut (&mut self)-> Option<&mut AST_U8> {
    
    match self{
      Self::AST_U8(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_U8{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_U128{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_U128{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_U128
  }
}

impl ASTNode{
  
  pub fn to_AST_U128 (self)-> Box::<AST_U128> {
    
    match self{
      Self::AST_U128(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_U128 (&self)-> Option<&AST_U128> {
    
    match self{
      Self::AST_U128(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_U128_mut (&mut self)-> Option<&mut AST_U128> {
    
    match self{
      Self::AST_U128(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_U128{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Ignore{
  pub symbols:Vec<ASTNode>, 
}

impl Ignore{
  
  pub fn new (symbols: Vec<ASTNode>)-> Self {
    
    Self{
      symbols,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Ignore
  }
}

impl ASTNode{
  
  pub fn to_Ignore (self)-> Box::<Ignore> {
    
    match self{
      Self::Ignore(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Ignore (&self)-> Option<&Ignore> {
    
    match self{
      Self::Ignore(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Ignore_mut (&mut self)-> Option<&mut Ignore> {
    
    match self{
      Self::Ignore(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Ignore{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.symbols{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_U32{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_U32{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_U32
  }
}

impl ASTNode{
  
  pub fn to_AST_U32 (self)-> Box::<AST_U32> {
    
    match self{
      Self::AST_U32(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_U32 (&self)-> Option<&AST_U32> {
    
    match self{
      Self::AST_U32(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_U32_mut (&mut self)-> Option<&mut AST_U32> {
    
    match self{
      Self::AST_U32(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_U32{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct State{
  pub catches:bool, 
  pub id:Box<NonTerminal_Symbol>, 
  pub statement:Box<Statement>, 
  pub tok: Token, 
}

impl State{
  
  pub fn new (catches: bool, id: Box<NonTerminal_Symbol>, statement: Box<Statement>, tok: Token)-> Self {
    
    Self{
      catches,
      id,
      statement,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::State
  }
}

impl ASTNode{
  
  pub fn to_State (self)-> Box::<State> {
    
    match self{
      Self::State(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_State (&self)-> Option<&State> {
    
    match self{
      Self::State(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_State_mut (&mut self)-> Option<&mut State> {
    
    match self{
      Self::State(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for State{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.catches.hash(hasher);
    self.id.hash(hasher);
    self.statement.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_BoolLiteral{
  pub value:bool, 
}

impl AST_BoolLiteral{
  
  pub fn new (value: bool)-> Self {
    
    Self{
      value,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_BoolLiteral
  }
}

impl ASTNode{
  
  pub fn to_AST_BoolLiteral (self)-> Box::<AST_BoolLiteral> {
    
    match self{
      Self::AST_BoolLiteral(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_BoolLiteral (&self)-> Option<&AST_BoolLiteral> {
    
    match self{
      Self::AST_BoolLiteral(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_BoolLiteral_mut (&mut self)-> Option<&mut AST_BoolLiteral> {
    
    match self{
      Self::AST_BoolLiteral(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_BoolLiteral{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.value.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct List_Rules{
  pub optional:bool, 
  pub symbol:ASTNode, 
  pub terminal_symbol:Option<ASTNode>, 
  pub tok: Token, 
}

impl List_Rules{
  
  pub fn new (optional: bool, symbol: ASTNode, terminal_symbol: Option<ASTNode>, tok: Token)-> Self {
    
    Self{
      optional,
      symbol,
      terminal_symbol,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::List_Rules
  }
}

impl ASTNode{
  
  pub fn to_List_Rules (self)-> Box::<List_Rules> {
    
    match self{
      Self::List_Rules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_List_Rules (&self)-> Option<&List_Rules> {
    
    match self{
      Self::List_Rules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_List_Rules_mut (&mut self)-> Option<&mut List_Rules> {
    
    match self{
      Self::List_Rules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for List_Rules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.optional.hash(hasher);
    self.symbol.hash(hasher);
    self.terminal_symbol.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Neg{
  pub expr:ASTNode, 
  pub tok: Token, 
}

impl AST_Neg{
  
  pub fn new (expr: ASTNode, tok: Token)-> Self {
    
    Self{
      expr,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Neg
  }
}

impl ASTNode{
  
  pub fn to_AST_Neg (self)-> Box::<AST_Neg> {
    
    match self{
      Self::AST_Neg(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Neg (&self)-> Option<&AST_Neg> {
    
    match self{
      Self::AST_Neg(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Neg_mut (&mut self)-> Option<&mut AST_Neg> {
    
    match self{
      Self::AST_Neg(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Neg{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.expr.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_String{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_String{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_String
  }
}

impl ASTNode{
  
  pub fn to_AST_String (self)-> Box::<AST_String> {
    
    match self{
      Self::AST_String(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_String (&self)-> Option<&AST_String> {
    
    match self{
      Self::AST_String(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_String_mut (&mut self)-> Option<&mut AST_String> {
    
    match self{
      Self::AST_String(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_String{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_I64{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_I64{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_I64
  }
}

impl ASTNode{
  
  pub fn to_AST_I64 (self)-> Box::<AST_I64> {
    
    match self{
      Self::AST_I64(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_I64 (&self)-> Option<&AST_I64> {
    
    match self{
      Self::AST_I64(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_I64_mut (&mut self)-> Option<&mut AST_I64> {
    
    match self{
      Self::AST_I64(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_I64{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct DefaultMatch{
  pub statement:Box<Statement>, 
}

impl DefaultMatch{
  
  pub fn new (statement: Box<Statement>)-> Self {
    
    Self{
      statement,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::DefaultMatch
  }
}

impl ASTNode{
  
  pub fn to_DefaultMatch (self)-> Box::<DefaultMatch> {
    
    match self{
      Self::DefaultMatch(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_DefaultMatch (&self)-> Option<&DefaultMatch> {
    
    match self{
      Self::DefaultMatch(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_DefaultMatch_mut (&mut self)-> Option<&mut DefaultMatch> {
    
    match self{
      Self::DefaultMatch(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for DefaultMatch{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.statement.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct SetLine{
  pub tok: Token, 
}

impl SetLine{
  
  pub fn new (tok: Token)-> Self {
    
    Self{
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::SetLine
  }
}

impl ASTNode{
  
  pub fn to_SetLine (self)-> Box::<SetLine> {
    
    match self{
      Self::SetLine(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_SetLine (&self)-> Option<&SetLine> {
    
    match self{
      Self::SetLine(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_SetLine_mut (&mut self)-> Option<&mut SetLine> {
    
    match self{
      Self::SetLine(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for SetLine{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_U16{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_U16{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_U16
  }
}

impl ASTNode{
  
  pub fn to_AST_U16 (self)-> Box::<AST_U16> {
    
    match self{
      Self::AST_U16(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_U16 (&self)-> Option<&AST_U16> {
    
    match self{
      Self::AST_U16(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_U16_mut (&mut self)-> Option<&mut AST_U16> {
    
    match self{
      Self::AST_U16(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_U16{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct PegRules{
  pub name_sym:Box<NonTerminal_Symbol>, 
  pub rules:Vec<Box<Rule>>, 
  pub tok: Token, 
}

impl PegRules{
  
  pub fn new (name_sym: Box<NonTerminal_Symbol>, rules: Vec<Box<Rule>>, tok: Token)-> Self {
    
    Self{
      name_sym,
      rules,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::PegRules
  }
}

impl ASTNode{
  
  pub fn to_PegRules (self)-> Box::<PegRules> {
    
    match self{
      Self::PegRules(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_PegRules (&self)-> Option<&PegRules> {
    
    match self{
      Self::PegRules(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_PegRules_mut (&mut self)-> Option<&mut PegRules> {
    
    match self{
      Self::PegRules(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for PegRules{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name_sym.hash(hasher);
    
    for val in &self.rules{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_STRUCT_TEMPLATE_NAME{
  pub typ:String, 
}

impl AST_STRUCT_TEMPLATE_NAME{
  
  pub fn new (typ: String)-> Self {
    
    Self{
      typ,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_STRUCT_TEMPLATE_NAME
  }
}

impl ASTNode{
  
  pub fn to_AST_STRUCT_TEMPLATE_NAME (self)-> Box::<AST_STRUCT_TEMPLATE_NAME> {
    
    match self{
      Self::AST_STRUCT_TEMPLATE_NAME(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_STRUCT_TEMPLATE_NAME (&self)-> Option<&AST_STRUCT_TEMPLATE_NAME> {
    
    match self{
      Self::AST_STRUCT_TEMPLATE_NAME(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_STRUCT_TEMPLATE_NAME_mut (&mut self)-> Option<&mut AST_STRUCT_TEMPLATE_NAME> {
    
    match self{
      Self::AST_STRUCT_TEMPLATE_NAME(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_STRUCT_TEMPLATE_NAME{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.typ.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct NotEmptySet{
  pub allow_empty:bool, 
  pub symbols:Vec<ASTNode>, 
  pub unordered:bool, 
  pub tok: Token, 
}

impl NotEmptySet{
  
  pub fn new (allow_empty: bool, symbols: Vec<ASTNode>, unordered: bool, tok: Token)-> Self {
    
    Self{
      allow_empty,
      symbols,
      unordered,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::NotEmptySet
  }
}

impl ASTNode{
  
  pub fn to_NotEmptySet (self)-> Box::<NotEmptySet> {
    
    match self{
      Self::NotEmptySet(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_NotEmptySet (&self)-> Option<&NotEmptySet> {
    
    match self{
      Self::NotEmptySet(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_NotEmptySet_mut (&mut self)-> Option<&mut NotEmptySet> {
    
    match self{
      Self::NotEmptySet(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for NotEmptySet{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.allow_empty.hash(hasher);
    
    for val in &self.symbols{
      val.hash(hasher);
    }
    self.unordered.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Accept{
  pub tok: Token, 
}

impl Accept{
  
  pub fn new (tok: Token)-> Self {
    
    Self{
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Accept
  }
}

impl ASTNode{
  
  pub fn to_Accept (self)-> Box::<Accept> {
    
    match self{
      Self::Accept(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Accept (&self)-> Option<&Accept> {
    
    match self{
      Self::Accept(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Accept_mut (&mut self)-> Option<&mut Accept> {
    
    match self{
      Self::Accept(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Accept{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct ClassSymbol{
  pub val:String, 
  pub tok: Token, 
}

impl ClassSymbol{
  
  pub fn new (val: String, tok: Token)-> Self {
    
    Self{
      val,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::ClassSymbol
  }
}

impl ASTNode{
  
  pub fn to_ClassSymbol (self)-> Box::<ClassSymbol> {
    
    match self{
      Self::ClassSymbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_ClassSymbol (&self)-> Option<&ClassSymbol> {
    
    match self{
      Self::ClassSymbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_ClassSymbol_mut (&mut self)-> Option<&mut ClassSymbol> {
    
    match self{
      Self::ClassSymbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for ClassSymbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.val.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct ReduceRaw{
  pub len:u32, 
  pub nonterminal_id:u32, 
  pub rule_id:u32, 
  pub tok: Token, 
}

impl ReduceRaw{
  
  pub fn new (len: u32, nonterminal_id: u32, rule_id: u32, tok: Token)-> Self {
    
    Self{
      len,
      nonterminal_id,
      rule_id,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::ReduceRaw
  }
}

impl ASTNode{
  
  pub fn to_ReduceRaw (self)-> Box::<ReduceRaw> {
    
    match self{
      Self::ReduceRaw(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_ReduceRaw (&self)-> Option<&ReduceRaw> {
    
    match self{
      Self::ReduceRaw(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_ReduceRaw_mut (&mut self)-> Option<&mut ReduceRaw> {
    
    match self{
      Self::ReduceRaw(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for ReduceRaw{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.len.hash(hasher);
    self.nonterminal_id.hash(hasher);
    self.rule_id.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Statement{
  pub branch:Option<ASTNode>, 
  pub non_branch:Vec<ASTNode>, 
  pub pop:Option<Box<Pop>>, 
  pub transitive:Option<ASTNode>, 
}

impl Statement{
  
  pub fn new (branch: Option<ASTNode>, non_branch: Vec<ASTNode>, pop: Option<Box<Pop>>, transitive: Option<ASTNode>)-> Self {
    
    Self{
      branch,
      non_branch,
      pop,
      transitive,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Statement
  }
}

impl ASTNode{
  
  pub fn to_Statement (self)-> Box::<Statement> {
    
    match self{
      Self::Statement(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Statement (&self)-> Option<&Statement> {
    
    match self{
      Self::Statement(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Statement_mut (&mut self)-> Option<&mut Statement> {
    
    match self{
      Self::Statement(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Statement{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.branch.hash(hasher);
    
    for val in &self.non_branch{
      val.hash(hasher);
    }
    self.pop.hash(hasher);
    self.transitive.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_F64{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_F64{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_F64
  }
}

impl ASTNode{
  
  pub fn to_AST_F64 (self)-> Box::<AST_F64> {
    
    match self{
      Self::AST_F64(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_F64 (&self)-> Option<&AST_F64> {
    
    match self{
      Self::AST_F64(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_F64_mut (&mut self)-> Option<&mut AST_F64> {
    
    match self{
      Self::AST_F64(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_F64{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Map{
  pub key:ASTNode, 
  pub val:ASTNode, 
  pub tok: Token, 
}

impl AST_Map{
  
  pub fn new (key: ASTNode, val: ASTNode, tok: Token)-> Self {
    
    Self{
      key,
      val,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Map
  }
}

impl ASTNode{
  
  pub fn to_AST_Map (self)-> Box::<AST_Map> {
    
    match self{
      Self::AST_Map(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Map (&self)-> Option<&AST_Map> {
    
    match self{
      Self::AST_Map(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Map_mut (&mut self)-> Option<&mut AST_Map> {
    
    match self{
      Self::AST_Map(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Map{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.key.hash(hasher);
    self.val.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Range{
  pub end_trim:i32, 
  pub start_trim:i32, 
}

impl Range{
  
  pub fn new (end_trim: i32, start_trim: i32)-> Self {
    
    Self{
      end_trim,
      start_trim,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Range
  }
}

impl ASTNode{
  
  pub fn to_Range (self)-> Box::<Range> {
    
    match self{
      Self::Range(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Range (&self)-> Option<&Range> {
    
    match self{
      Self::Range(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Range_mut (&mut self)-> Option<&mut Range> {
    
    match self{
      Self::Range(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Range{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.end_trim.hash(hasher);
    self.start_trim.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct IntMatch{
  pub statement:Box<Statement>, 
  pub vals:Vec<u64>, 
}

impl IntMatch{
  
  pub fn new (statement: Box<Statement>, vals: Vec<u64>)-> Self {
    
    Self{
      statement,
      vals,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::IntMatch
  }
}

impl ASTNode{
  
  pub fn to_IntMatch (self)-> Box::<IntMatch> {
    
    match self{
      Self::IntMatch(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_IntMatch (&self)-> Option<&IntMatch> {
    
    match self{
      Self::IntMatch(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_IntMatch_mut (&mut self)-> Option<&mut IntMatch> {
    
    match self{
      Self::IntMatch(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for IntMatch{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.statement.hash(hasher);
    self.vals.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_I16{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_I16{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_I16
  }
}

impl ASTNode{
  
  pub fn to_AST_I16 (self)-> Box::<AST_I16> {
    
    match self{
      Self::AST_I16(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_I16 (&self)-> Option<&AST_I16> {
    
    match self{
      Self::AST_I16(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_I16_mut (&mut self)-> Option<&mut AST_I16> {
    
    match self{
      Self::AST_I16(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_I16{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Push{
  pub name:String, 
  pub nonterminal:ASTNode, 
  pub tok: Token, 
}

impl Push{
  
  pub fn new (name: String, nonterminal: ASTNode, tok: Token)-> Self {
    
    Self{
      name,
      nonterminal,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Push
  }
}

impl ASTNode{
  
  pub fn to_Push (self)-> Box::<Push> {
    
    match self{
      Self::Push(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Push (&self)-> Option<&Push> {
    
    match self{
      Self::Push(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Push_mut (&mut self)-> Option<&mut Push> {
    
    match self{
      Self::Push(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Push{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.name.hash(hasher);
    self.nonterminal.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Struct{
  pub props:Vec<ASTNode>, 
  pub ty:String, 
  pub tok: Token, 
}

impl AST_Struct{
  
  pub fn new (props: Vec<ASTNode>, ty: String, tok: Token)-> Self {
    
    Self{
      props,
      ty,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Struct
  }
}

impl ASTNode{
  
  pub fn to_AST_Struct (self)-> Box::<AST_Struct> {
    
    match self{
      Self::AST_Struct(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Struct (&self)-> Option<&AST_Struct> {
    
    match self{
      Self::AST_Struct(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Struct_mut (&mut self)-> Option<&mut AST_Struct> {
    
    match self{
      Self::AST_Struct(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Struct{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.props{
      val.hash(hasher);
    }
    self.ty.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Peek{
  pub ptr_type:String, 
  pub skip:bool, 
  pub tok: Token, 
}

impl Peek{
  
  pub fn new (ptr_type: String, skip: bool, tok: Token)-> Self {
    
    Self{
      ptr_type,
      skip,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Peek
  }
}

impl ASTNode{
  
  pub fn to_Peek (self)-> Box::<Peek> {
    
    match self{
      Self::Peek(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Peek (&self)-> Option<&Peek> {
    
    match self{
      Self::Peek(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Peek_mut (&mut self)-> Option<&mut Peek> {
    
    match self{
      Self::Peek(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Peek{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ptr_type.hash(hasher);
    self.skip.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Matches{
  pub matches:Vec<ASTNode>, 
  pub mode:String, 
  pub scanner:String, 
  pub tok: Token, 
}

impl Matches{
  
  pub fn new (matches: Vec<ASTNode>, mode: String, scanner: String, tok: Token)-> Self {
    
    Self{
      matches,
      mode,
      scanner,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Matches
  }
}

impl ASTNode{
  
  pub fn to_Matches (self)-> Box::<Matches> {
    
    match self{
      Self::Matches(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Matches (&self)-> Option<&Matches> {
    
    match self{
      Self::Matches(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Matches_mut (&mut self)-> Option<&mut Matches> {
    
    match self{
      Self::Matches(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Matches{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.matches{
      val.hash(hasher);
    }
    self.mode.hash(hasher);
    self.scanner.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Mul{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Mul{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Mul
  }
}

impl ASTNode{
  
  pub fn to_AST_Mul (self)-> Box::<AST_Mul> {
    
    match self{
      Self::AST_Mul(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Mul (&self)-> Option<&AST_Mul> {
    
    match self{
      Self::AST_Mul(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Mul_mut (&mut self)-> Option<&mut AST_Mul> {
    
    match self{
      Self::AST_Mul(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Mul{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct ProductionMatches{
  pub matches:Vec<ASTNode>, 
}

impl ProductionMatches{
  
  pub fn new (matches: Vec<ASTNode>)-> Self {
    
    Self{
      matches,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::ProductionMatches
  }
}

impl ASTNode{
  
  pub fn to_ProductionMatches (self)-> Box::<ProductionMatches> {
    
    match self{
      Self::ProductionMatches(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_ProductionMatches (&self)-> Option<&ProductionMatches> {
    
    match self{
      Self::ProductionMatches(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_ProductionMatches_mut (&mut self)-> Option<&mut ProductionMatches> {
    
    match self{
      Self::ProductionMatches(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for ProductionMatches{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    
    for val in &self.matches{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct TermMatch{
  pub statement:Box<Statement>, 
  pub sym:ASTNode, 
}

impl TermMatch{
  
  pub fn new (statement: Box<Statement>, sym: ASTNode)-> Self {
    
    Self{
      statement,
      sym,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::TermMatch
  }
}

impl ASTNode{
  
  pub fn to_TermMatch (self)-> Box::<TermMatch> {
    
    match self{
      Self::TermMatch(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_TermMatch (&self)-> Option<&TermMatch> {
    
    match self{
      Self::TermMatch(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_TermMatch_mut (&mut self)-> Option<&mut TermMatch> {
    
    match self{
      Self::TermMatch(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for TermMatch{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.statement.hash(hasher);
    self.sym.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct DEFINED_TYPE_NUM{
}

impl DEFINED_TYPE_NUM{
  
  pub fn new ()-> Self {
    
    Self{
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::DEFINED_TYPE_NUM
  }
}

impl ASTNode{
  
  pub fn to_DEFINED_TYPE_NUM (self)-> Box::<DEFINED_TYPE_NUM> {
    
    match self{
      Self::DEFINED_TYPE_NUM(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_DEFINED_TYPE_NUM (&self)-> Option<&DEFINED_TYPE_NUM> {
    
    match self{
      Self::DEFINED_TYPE_NUM(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_DEFINED_TYPE_NUM_mut (&mut self)-> Option<&mut DEFINED_TYPE_NUM> {
    
    match self{
      Self::DEFINED_TYPE_NUM(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for DEFINED_TYPE_NUM{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Div{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Div{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Div
  }
}

impl ASTNode{
  
  pub fn to_AST_Div (self)-> Box::<AST_Div> {
    
    match self{
      Self::AST_Div(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Div (&self)-> Option<&AST_Div> {
    
    match self{
      Self::AST_Div(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Div_mut (&mut self)-> Option<&mut AST_Div> {
    
    match self{
      Self::AST_Div(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Div{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Rule{
  pub ast:Option<Box<Ascript>>, 
  pub symbols:Vec<ASTNode>, 
  pub tok: Token, 
}

impl Rule{
  
  pub fn new (ast: Option<Box<Ascript>>, symbols: Vec<ASTNode>, tok: Token)-> Self {
    
    Self{
      ast,
      symbols,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Rule
  }
}

impl ASTNode{
  
  pub fn to_Rule (self)-> Box::<Rule> {
    
    match self{
      Self::Rule(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Rule (&self)-> Option<&Rule> {
    
    match self{
      Self::Rule(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Rule_mut (&mut self)-> Option<&mut Rule> {
    
    match self{
      Self::Rule(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Rule{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ast.hash(hasher);
    
    for val in &self.symbols{
      val.hash(hasher);
    }
  }
}

#[derive(Clone, Debug)]
pub struct AST_Sub{
  pub left:ASTNode, 
  pub right:ASTNode, 
  pub tok: Token, 
}

impl AST_Sub{
  
  pub fn new (left: ASTNode, right: ASTNode, tok: Token)-> Self {
    
    Self{
      left,
      right,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Sub
  }
}

impl ASTNode{
  
  pub fn to_AST_Sub (self)-> Box::<AST_Sub> {
    
    match self{
      Self::AST_Sub(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Sub (&self)-> Option<&AST_Sub> {
    
    match self{
      Self::AST_Sub(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Sub_mut (&mut self)-> Option<&mut AST_Sub> {
    
    match self{
      Self::AST_Sub(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Sub{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.left.hash(hasher);
    self.right.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AnnotatedSymbol{
  pub is_optional:bool, 
  pub precedence:Option<Box<Precedence>>, 
  pub reference:String, 
  pub symbol:ASTNode, 
  pub tok: Token, 
}

impl AnnotatedSymbol{
  
  pub fn new (is_optional: bool, precedence: Option<Box<Precedence>>, reference: String, symbol: ASTNode, tok: Token)-> Self {
    
    Self{
      is_optional,
      precedence,
      reference,
      symbol,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AnnotatedSymbol
  }
}

impl ASTNode{
  
  pub fn to_AnnotatedSymbol (self)-> Box::<AnnotatedSymbol> {
    
    match self{
      Self::AnnotatedSymbol(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AnnotatedSymbol (&self)-> Option<&AnnotatedSymbol> {
    
    match self{
      Self::AnnotatedSymbol(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AnnotatedSymbol_mut (&mut self)-> Option<&mut AnnotatedSymbol> {
    
    match self{
      Self::AnnotatedSymbol(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AnnotatedSymbol{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.is_optional.hash(hasher);
    self.precedence.hash(hasher);
    self.reference.hash(hasher);
    self.symbol.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_Property{
  pub id:String, 
  pub named_reference:String, 
  pub value:Option<ASTNode>, 
  pub tok: Token, 
}

impl AST_Property{
  
  pub fn new (id: String, named_reference: String, value: Option<ASTNode>, tok: Token)-> Self {
    
    Self{
      id,
      named_reference,
      value,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_Property
  }
}

impl ASTNode{
  
  pub fn to_AST_Property (self)-> Box::<AST_Property> {
    
    match self{
      Self::AST_Property(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_Property (&self)-> Option<&AST_Property> {
    
    match self{
      Self::AST_Property(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_Property_mut (&mut self)-> Option<&mut AST_Property> {
    
    match self{
      Self::AST_Property(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_Property{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.id.hash(hasher);
    self.named_reference.hash(hasher);
    self.value.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct Ascript{
  pub ast:ASTNode, 
  pub tok: Token, 
}

impl Ascript{
  
  pub fn new (ast: ASTNode, tok: Token)-> Self {
    
    Self{
      ast,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::Ascript
  }
}

impl ASTNode{
  
  pub fn to_Ascript (self)-> Box::<Ascript> {
    
    match self{
      Self::Ascript(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_Ascript (&self)-> Option<&Ascript> {
    
    match self{
      Self::Ascript(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_Ascript_mut (&mut self)-> Option<&mut Ascript> {
    
    match self{
      Self::Ascript(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for Ascript{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.ast.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_F128{
  pub initializer:Option<Box<Init>>, 
  pub tok: Token, 
}

impl AST_F128{
  
  pub fn new (initializer: Option<Box<Init>>, tok: Token)-> Self {
    
    Self{
      initializer,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_F128
  }
}

impl ASTNode{
  
  pub fn to_AST_F128 (self)-> Box::<AST_F128> {
    
    match self{
      Self::AST_F128(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_F128 (&self)-> Option<&AST_F128> {
    
    match self{
      Self::AST_F128(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_F128_mut (&mut self)-> Option<&mut AST_F128> {
    
    match self{
      Self::AST_F128(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_F128{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.initializer.hash(hasher);
  }
}

#[derive(Clone, Debug)]
pub struct AST_StringLiteral{
  pub value:String, 
  pub tok: Token, 
}

impl AST_StringLiteral{
  
  pub fn new (value: String, tok: Token)-> Self {
    
    Self{
      value,
      tok,
    }
  }
  
  pub fn get_type (&self)-> ASTNodeType {
    ASTNodeType::AST_StringLiteral
  }
}

impl ASTNode{
  
  pub fn to_AST_StringLiteral (self)-> Box::<AST_StringLiteral> {
    
    match self{
      Self::AST_StringLiteral(val) => val,
      _ => panic!()
    }
  }
  
  pub fn as_AST_StringLiteral (&self)-> Option<&AST_StringLiteral> {
    
    match self{
      Self::AST_StringLiteral(val) => Some(val.as_ref()),
      _ => None
    }
  }
  
  pub fn as_AST_StringLiteral_mut (&mut self)-> Option<&mut AST_StringLiteral> {
    
    match self{
      Self::AST_StringLiteral(val) => Some(val.as_mut()),
      _ => None
    }
  }
}

impl Hash for AST_StringLiteral{
  
  fn hash<H: std::hash::Hasher> (&self,hasher: &mut H) {
    self.get_type().hash(hasher);
    self.value.hash(hasher);
  }
}


/* sym::nonterminal_symbol^id "=>" statement

        :ast { t_State, id, statement, tok } */
fn reducer_000 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_1 = ref_0;
  let obj_0_1 = obj_0_1.to_NonTerminal_Symbol();
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Statement();
  let var_4_0 = State::new(
    false,
    obj_0_1,
    obj_2_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::State(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* sym::nonterminal_symbol^id "=!>" statement

        :ast { t_State, catches:true, id, statement, tok } */
fn reducer_001 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_0_1 = ref_0;
  let obj_0_1 = obj_0_1.to_NonTerminal_Symbol();
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Statement();
  let var_5_0 = State::new(
    obj_4_0,
    obj_0_1,
    obj_2_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::State(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* ( escaped_vals :ast str($1) | escaped )(+) */
fn reducer_002 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* escaped_vals :ast str($1) */
fn reducer_003 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_0_0), __rule_rng__, TokenRange::default()));
}


/* escaped */
fn reducer_004 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( escaped_vals :ast str($1) | escaped ) */
fn reducer_005 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0.to_string();
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::STRINGS(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( escaped_vals :ast str($1) | escaped )(+) */
fn reducer_006 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1.to_string();
  let mut obj_0_0 = ref_0.into_strings();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::STRINGS(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* [preamble(*) ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+)]

        :ast { t_Grammar, preamble:$1, rules:$2, tok } */
fn reducer_007 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_0_0 = ref_0.into_nodes();
  let obj_1_1 = ref_1.into_nodes();
  let var_3_0 = Grammar::new(
    obj_0_0,
    obj_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Grammar(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* [preamble(*) ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+)]

        :ast { t_Grammar, preamble:$1, rules:$2, tok } */
fn reducer_008 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_1 = ref_0.into_nodes();
  let var_2_0 = Grammar::new(
    vec![],
    obj_0_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Grammar(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* preamble */
fn reducer_009 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* preamble(*) */
fn reducer_010 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* cf_rules */
fn reducer_011 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* peg_rules */
fn reducer_012 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* append_rules */
fn reducer_013 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ir::state */
fn reducer_014 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* template_rule */
fn reducer_015 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule ) */
fn reducer_016 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule ) */
fn reducer_017 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule ) */
fn reducer_018 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule ) */
fn reducer_019 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule ) */
fn reducer_020 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+) */
fn reducer_021 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+) */
fn reducer_022 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+) */
fn reducer_023 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+) */
fn reducer_024 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( cf_rules | peg_rules | append_rules | ir::state | template_rule )(+) */
fn reducer_025 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* id $ :ast $1 */
fn reducer_026 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_0_0 = ref_0;
  slots.assign(0, AstSlot(obj_0_0, __rule_rng__, TokenRange::default()));
}


/* num $ :ast $1 */
fn reducer_027 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_0_0 = ref_0;
  slots.assign(0, AstSlot(obj_0_0, __rule_rng__, TokenRange::default()));
}


/* expr */
fn reducer_028 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "{" type_identifier^t ( "," struct_prop(+",") )? '}'
        :ast { t_AST_Struct, ty: str($t), props:$3, tok } */
fn reducer_029 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, _, _) = slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_3_0 = ref_3.into_nodes();
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_string();
  let var_6_0 = AST_Struct::new(
    obj_3_0,
    tok_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Struct(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "{" type_identifier^t ( "," struct_prop(+",") )? '}'
        :ast { t_AST_Struct, ty: str($t), props:$3, tok } */
fn reducer_030 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_string();
  let var_4_0 = AST_Struct::new(
    vec![],
    tok_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Struct(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* struct_prop */
fn reducer_031 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* struct_prop(+",") */
fn reducer_032 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "," struct_prop(+",") */
fn reducer_033 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* tok::id

            :ast { t_NonTerminal_Symbol, name:str($1), tok} */
fn reducer_034 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let var_2_0 = NonTerminal_Symbol::new(
    tok_0_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NonTerminal_Symbol(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_035 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  slots.take(5);
  let AstSlot (ref_6, __tok_rng_6, _) = slots.take(6);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_6;
  let obj_6_0 = ref_6;
  let obj_2_1 = ref_2.into_nodes();
  let obj_4_2 = ref_4;
  let obj_4_2 = obj_4_2.to_Pop();
  let obj_0_3 = ref_0;
  let var_8_0 = Statement::new(
    Some(obj_6_0),
    obj_2_1,
    Some(obj_4_2),
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_8_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_036 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_4_0 = ref_4;
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Pop();
  let obj_0_3 = ref_0;
  let var_6_0 = Statement::new(
    Some(obj_4_0),
    vec![],
    Some(obj_2_2),
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_037 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_4_0 = ref_4;
  let obj_2_1 = ref_2.into_nodes();
  let obj_0_3 = ref_0;
  let var_6_0 = Statement::new(
    Some(obj_4_0),
    obj_2_1,
    None,
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_038 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let obj_0_3 = ref_0;
  let var_4_0 = Statement::new(
    Some(obj_2_0),
    vec![],
    None,
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_039 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_2_1 = ref_2.into_nodes();
  let obj_4_2 = ref_4;
  let obj_4_2 = obj_4_2.to_Pop();
  let obj_0_3 = ref_0;
  let var_6_0 = Statement::new(
    None,
    obj_2_1,
    Some(obj_4_2),
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_040 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Pop();
  let obj_0_3 = ref_0;
  let var_4_0 = Statement::new(
    None,
    vec![],
    Some(obj_2_2),
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_041 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_1 = ref_2.into_nodes();
  let obj_0_3 = ref_0;
  let var_4_0 = Statement::new(
    None,
    obj_2_1,
    None,
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* transitive_statement^transitive 
     ( "then" non_branch_statement(+"then")^non_branch )?
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, transitive, non_branch, pop, branch } */
fn reducer_042 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_3 = ref_0;
  let var_2_0 = Statement::new(
    None,
    vec![],
    None,
    Some(obj_0_3),
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then")^non_branch
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, non_branch, branch, pop } */
fn reducer_043 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_4_0 = ref_4;
  let obj_0_1 = ref_0.into_nodes();
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Pop();
  let var_6_0 = Statement::new(
    Some(obj_4_0),
    obj_0_1,
    Some(obj_2_2),
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then")^non_branch
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, non_branch, branch, pop } */
fn reducer_044 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let obj_0_1 = ref_0.into_nodes();
  let var_4_0 = Statement::new(
    Some(obj_2_0),
    obj_0_1,
    None,
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then")^non_branch
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, non_branch, branch, pop } */
fn reducer_045 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_1 = ref_0.into_nodes();
  let obj_2_2 = ref_2;
  let obj_2_2 = obj_2_2.to_Pop();
  let var_4_0 = Statement::new(
    None,
    obj_0_1,
    Some(obj_2_2),
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then")^non_branch
     ( "then" pop^pop )?
     ( "then" branch_statement^branch )?

     :ast { t_Statement, non_branch, branch, pop } */
fn reducer_046 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_1 = ref_0.into_nodes();
  let var_2_0 = Statement::new(
    None,
    obj_0_1,
    None,
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ( pop^pop "then" )?
      branch_statement^branch 

     :ast { t_Statement, branch, pop } */
fn reducer_047 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let obj_0_2 = ref_0;
  let obj_0_2 = obj_0_2.to_Pop();
  let var_4_0 = Statement::new(
    Some(obj_2_0),
    vec![],
    Some(obj_0_2),
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* ( pop^pop "then" )?
      branch_statement^branch 

     :ast { t_Statement, branch, pop } */
fn reducer_048 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let var_2_0 = Statement::new(
    Some(obj_0_0),
    vec![],
    None,
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* pop^pop :ast { t_Statement, pop } */
fn reducer_049 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_2 = ref_0;
  let obj_0_2 = obj_0_2.to_Pop();
  let var_2_0 = Statement::new(
    None,
    vec![],
    Some(obj_0_2),
    None,
  );
  slots.assign(0, AstSlot(ASTNode::Statement(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement */
fn reducer_050 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then") */
fn reducer_051 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "then" non_branch_statement(+"then")^non_branch */
fn reducer_052 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "then" pop^pop */
fn reducer_053 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "then" branch_statement^branch */
fn reducer_054 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* non_branch_statement */
fn reducer_055 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* non_branch_statement(+"then") */
fn reducer_056 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "then" pop^pop */
fn reducer_057 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "then" branch_statement^branch */
fn reducer_058 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* pop^pop "then" */
fn reducer_059 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* c:num */
fn reducer_060 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:id */
fn reducer_061 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:sym */
fn reducer_062 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:nl */
fn reducer_063 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:sp */
fn reducer_064 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "\\"{:9999} ( c:num | c:id | c:sym | c:nl | c:sp ) :ast str($2) */
fn reducer_065 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* "\\"{:9999} ( c:num | c:id | c:sym | c:nl | c:sp ) :ast str($2) */
fn reducer_066 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* "\\"{:9999} ( c:num | c:id | c:sym | c:nl | c:sp ) :ast str($2) */
fn reducer_067 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* "\\"{:9999} ( c:num | c:id | c:sym | c:nl | c:sp ) :ast str($2) */
fn reducer_068 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* "\\"{:9999} ( c:num | c:id | c:sym | c:nl | c:sp ) :ast str($2) */
fn reducer_069 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* c:num */
fn reducer_070 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:id */
fn reducer_071 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:sym */
fn reducer_072 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:nl */
fn reducer_073 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:sp */
fn reducer_074 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* export_clause */
fn reducer_075 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* import_clause */
fn reducer_076 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* name_clause */
fn reducer_077 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ignore_clause */
fn reducer_078 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "<>" sym::nonterminal_symbol^n ">" rules^r

        :ast { t_CFRules, name_sym:$n, rules: $r, tok } */
fn reducer_079 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_NonTerminal_Symbol();
  let obj_3_1 = ref_3.into_nodes();
  let var_5_0 = CFRules::new(
    obj_1_0,
    obj_3_1.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::CFRules(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* ":>" sym::nonterminal_symbol^n ">" rules^r

        :ast { t_PegRules, name_sym:$n, rules: $r, tok } */
fn reducer_080 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_NonTerminal_Symbol();
  let obj_3_1 = ref_3.into_nodes();
  let var_5_0 = PegRules::new(
    obj_1_0,
    obj_3_1.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::PegRules(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* '+' ">" sym::nonterminal^n ">" rules^r

        :ast { t_AppendRules,  name_sym:$n, rules: $r, tok } */
fn reducer_081 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_2_0 = ref_2;
  let obj_4_1 = ref_4.into_nodes();
  let var_6_0 = AppendRules::new(
    obj_2_0,
    obj_4_1.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AppendRules(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "<" template_param(+",")^p ">" sym::nonterminal_symbol^n ">" rules^r

        :ast { t_TemplateRules, name_sym:$n, template_params:$p, rules: $r, tok } */
fn reducer_082 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, _, _) = slots.take(3);
  slots.take(4);
  let AstSlot (ref_5, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let obj_3_0 = ref_3;
  let obj_3_0 = obj_3_0.to_NonTerminal_Symbol();
  let obj_5_1 = ref_5.into_nodes();
  let obj_1_2 = ref_1.into_nodes();
  let var_7_0 = TemplateRules::new(
    obj_3_0,
    obj_5_1.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    obj_1_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::TemplateRules(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* template_param */
fn reducer_083 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* template_param(+",") */
fn reducer_084 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* tk:identifier  :ast { t_DEFINED_TYPE_IDENT } */
fn reducer_085 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = DEFINED_TYPE_IDENT::new();
  slots.assign(0, AstSlot(ASTNode::DEFINED_TYPE_IDENT(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* tk:number     :ast { t_DEFINED_TYPE_NUM } */
fn reducer_086 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = DEFINED_TYPE_NUM::new();
  slots.assign(0, AstSlot(ASTNode::DEFINED_TYPE_NUM(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* expr "+"{2} expr{1} :ast { t_AST_Add, left: $1, right: $3, tok } */
fn reducer_087 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Add::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Add(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* expr "-"{2} expr{1} :ast { t_AST_Sub, left: $1, right: $3, tok } */
fn reducer_088 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Sub::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Sub(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* expr "/"{4} expr{3} :ast { t_AST_Div, left: $1, right: $3, tok } */
fn reducer_089 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Div::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Div(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* expr "*"{4} expr{3} :ast { t_AST_Mul, left: $1, right: $3, tok } */
fn reducer_090 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Mul::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Mul(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* expr "%"{4} expr{3} :ast { t_AST_Mod, left: $1, right: $3, tok } */
fn reducer_091 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Mod::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Mod(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* expr "^"{6} expr{5} :ast { t_AST_Pow, left: $1, right: $3, tok } */
fn reducer_092 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2;
  let var_4_0 = AST_Pow::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Pow(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "-"{8} expr{7} :ast { t_AST_Neg, expr: $2, tok } */
fn reducer_093 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let var_3_0 = AST_Neg::new(
    obj_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Neg(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "(" expr^expr ")"        :ast $expr */
fn reducer_094 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1;
  slots.assign(0, AstSlot(obj_1_0, __rule_rng__, TokenRange::default()));
}


/* term{9} */
fn reducer_095 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* identifier ":" expr
        :ast { t_AST_Property, id:str($1), value:$3, tok } */
fn reducer_096 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let obj_2_2 = ref_2;
  let var_4_0 = AST_Property::new(
    tok_0_0,
    Default::default(),
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Property(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* identifier ":" struct
        :ast { t_AST_Property, id:str($1), value:$3, tok } */
fn reducer_097 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let obj_2_2 = ref_2;
  let var_4_0 = AST_Property::new(
    tok_0_0,
    Default::default(),
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Property(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* identifier
        :ast { t_AST_Property, id:str($1), named_reference: str($1), tok } */
fn reducer_098 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let tok_0_1 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_1 = tok_0_1.to_string();
  let var_2_0 = AST_Property::new(
    tok_0_0,
    tok_0_1,
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Property(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* token */
fn reducer_099 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* tk:( 't' "_"{:9999} ) identifier */
fn reducer_100 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* tk:id_tok */
fn reducer_101 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? tok::int ( "with" "rule" )? tok::int^int
        
        :ast { t_ReduceRaw, len: u32($2), rule_id: u32($int), nonterminal_id: u32($4), tok } */
fn reducer_102 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  slots.take(5);
  slots.take(6);
  let AstSlot (_, __tok_rng_7, _) = slots.take(7);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_7;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let tok_4_1 = __tok_rng_4.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_4_1 = tok_4_1.to_u32();
  let tok_7_2 = __tok_rng_7.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_7_2 = tok_7_2.to_u32();
  let var_9_0 = ReduceRaw::new(
    tok_1_0,
    tok_4_1,
    tok_7_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ReduceRaw(Box::new(var_9_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? tok::int ( "with" "rule" )? tok::int^int
        
        :ast { t_ReduceRaw, len: u32($2), rule_id: u32($int), nonterminal_id: u32($4), tok } */
fn reducer_103 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  slots.take(3);
  slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_1 = tok_2_1.to_u32();
  let tok_5_2 = __tok_rng_5.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_5_2 = tok_5_2.to_u32();
  let var_7_0 = ReduceRaw::new(
    tok_1_0,
    tok_2_1,
    tok_5_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ReduceRaw(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? tok::int ( "with" "rule" )? tok::int^int
        
        :ast { t_ReduceRaw, len: u32($2), rule_id: u32($int), nonterminal_id: u32($4), tok } */
fn reducer_104 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let tok_4_1 = __tok_rng_4.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_4_1 = tok_4_1.to_u32();
  let tok_5_2 = __tok_rng_5.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_5_2 = tok_5_2.to_u32();
  let var_7_0 = ReduceRaw::new(
    tok_1_0,
    tok_4_1,
    tok_5_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ReduceRaw(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? tok::int ( "with" "rule" )? tok::int^int
        
        :ast { t_ReduceRaw, len: u32($2), rule_id: u32($int), nonterminal_id: u32($4), tok } */
fn reducer_105 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_1 = tok_2_1.to_u32();
  let tok_3_2 = __tok_rng_3.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_3_2 = tok_3_2.to_u32();
  let var_5_0 = ReduceRaw::new(
    tok_1_0,
    tok_2_1,
    tok_3_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ReduceRaw(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? sym::nonterminal^nonterminal ( ":ast" ast::body^ast )?
        
        :ast { t_Reduce, len: u32($2), ast,  nonterminal, tok } */
fn reducer_106 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  slots.take(5);
  let AstSlot (ref_6, __tok_rng_6, _) = slots.take(6);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_6;
  let obj_6_0 = ref_6;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_u32();
  let obj_4_2 = ref_4;
  let var_8_0 = Reduce::new(
    Some(obj_6_0),
    tok_1_1,
    obj_4_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reduce(Box::new(var_8_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? sym::nonterminal^nonterminal ( ":ast" ast::body^ast )?
        
        :ast { t_Reduce, len: u32($2), ast,  nonterminal, tok } */
fn reducer_107 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_4_0 = ref_4;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_u32();
  let obj_2_2 = ref_2;
  let var_6_0 = Reduce::new(
    Some(obj_4_0),
    tok_1_1,
    obj_2_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reduce(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? sym::nonterminal^nonterminal ( ":ast" ast::body^ast )?
        
        :ast { t_Reduce, len: u32($2), ast,  nonterminal, tok } */
fn reducer_108 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_u32();
  let obj_4_2 = ref_4;
  let var_6_0 = Reduce::new(
    None,
    tok_1_1,
    obj_4_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reduce(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "reduce" tok::int ( "symbols" "to" )? sym::nonterminal^nonterminal ( ":ast" ast::body^ast )?
        
        :ast { t_Reduce, len: u32($2), ast,  nonterminal, tok } */
fn reducer_109 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_u32();
  let obj_2_2 = ref_2;
  let var_4_0 = Reduce::new(
    None,
    tok_1_1,
    obj_2_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reduce(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "set-tok" tok::int

        :ast { t_SetTokenId, id: u32($2), tok } */
fn reducer_110 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let var_3_0 = SetTokenId::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::SetTokenId(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "set-tok-len" tok::int

        :ast { t_SetTokenLen, id: u32($2) } */
fn reducer_111 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let var_3_0 = SetTokenLen::new(
    tok_1_0,
  );
  slots.assign(0, AstSlot(ASTNode::SetTokenLen(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "set-line"        :ast { t_SetLine, tok } */
fn reducer_112 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = SetLine::new(
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::SetLine(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "symbols" "to" */
fn reducer_113 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "with" "rule" */
fn reducer_114 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "symbols" "to" */
fn reducer_115 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* ":ast" ast::body^ast */
fn reducer_116 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "pop" tok::int      :ast { t_Pop, count: u32($2), tok } */
fn reducer_117 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_u32();
  let var_3_0 = Pop::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Pop(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* match */
fn reducer_118 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* goto_sequence */
fn reducer_119 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* terminal_statement */
fn reducer_120 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "shift" "-skip"? ( "tok" | "char" )    :ast { t_Shift, ptr_type:str($3), skip:bool($2), tok } */
fn reducer_121 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_2_0 = __tok_rng_2;
  let tok_2_0 = tok_2_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_4_1 = true;
  let var_5_0 = Shift::new(
    tok_2_0,
    obj_4_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Shift(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "shift" "-skip"? ( "tok" | "char" )    :ast { t_Shift, ptr_type:str($3), skip:bool($2), tok } */
fn reducer_122 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_2_0 = __tok_rng_2;
  let tok_2_0 = tok_2_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_4_1 = true;
  let var_5_0 = Shift::new(
    tok_2_0,
    obj_4_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Shift(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "shift" "-skip"? ( "tok" | "char" )    :ast { t_Shift, ptr_type:str($3), skip:bool($2), tok } */
fn reducer_123 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_3_1 = false;
  let var_4_0 = Shift::new(
    tok_1_0,
    obj_3_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Shift(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "shift" "-skip"? ( "tok" | "char" )    :ast { t_Shift, ptr_type:str($3), skip:bool($2), tok } */
fn reducer_124 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_3_1 = false;
  let var_4_0 = Shift::new(
    tok_1_0,
    obj_3_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Shift(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "peek" "-skip"? ( "tok" | "char" )    :ast { t_Peek,  ptr_type:str($3), skip:bool($2), tok } */
fn reducer_125 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_2_0 = __tok_rng_2;
  let tok_2_0 = tok_2_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_4_1 = true;
  let var_5_0 = Peek::new(
    tok_2_0,
    obj_4_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Peek(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "peek" "-skip"? ( "tok" | "char" )    :ast { t_Peek,  ptr_type:str($3), skip:bool($2), tok } */
fn reducer_126 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_2_0 = __tok_rng_2;
  let tok_2_0 = tok_2_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_4_1 = true;
  let var_5_0 = Peek::new(
    tok_2_0,
    obj_4_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Peek(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "peek" "-skip"? ( "tok" | "char" )    :ast { t_Peek,  ptr_type:str($3), skip:bool($2), tok } */
fn reducer_127 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_3_1 = false;
  let var_4_0 = Peek::new(
    tok_1_0,
    obj_3_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Peek(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "peek" "-skip"? ( "tok" | "char" )    :ast { t_Peek,  ptr_type:str($3), skip:bool($2), tok } */
fn reducer_128 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_3_1 = false;
  let var_4_0 = Peek::new(
    tok_1_0,
    obj_3_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Peek(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "reset" ( "tok" | "char" )            :ast { t_Reset, ptr_type:str($2), tok } */
fn reducer_129 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = Reset::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reset(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "reset" ( "tok" | "char" )            :ast { t_Reset, ptr_type:str($2), tok } */
fn reducer_130 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = Reset::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Reset(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "tok" */
fn reducer_131 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "char" */
fn reducer_132 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "tok" */
fn reducer_133 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "char" */
fn reducer_134 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "tok" */
fn reducer_135 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "char" */
fn reducer_136 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "EXPORT" sym::nonterminal (( "AS" | "as" ) tok::id)?

        :ast { t_Export, nonterminal:$2, reference:str($3) } */
fn reducer_137 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_1_0 = ref_1;
  let tok_3_1 = __tok_rng_3.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_3_1 = tok_3_1.to_string();
  let var_5_0 = Export::new(
    obj_1_0,
    tok_3_1,
  );
  slots.assign(0, AstSlot(ASTNode::Export(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "EXPORT" sym::nonterminal (( "AS" | "as" ) tok::id)?

        :ast { t_Export, nonterminal:$2, reference:str($3) } */
fn reducer_138 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_1_0 = ref_1;
  let tok_3_1 = __tok_rng_3.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_3_1 = tok_3_1.to_string();
  let var_5_0 = Export::new(
    obj_1_0,
    tok_3_1,
  );
  slots.assign(0, AstSlot(ASTNode::Export(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "EXPORT" sym::nonterminal (( "AS" | "as" ) tok::id)?

        :ast { t_Export, nonterminal:$2, reference:str($3) } */
fn reducer_139 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let var_3_0 = Export::new(
    obj_1_0,
    Default::default(),
  );
  slots.assign(0, AstSlot(ASTNode::Export(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "AS" */
fn reducer_140 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "as" */
fn reducer_141 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( "AS" | "as" ) tok::id */
fn reducer_142 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* ( "AS" | "as" ) tok::id */
fn reducer_143 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "IMPORT" ( c:id | c:sym | c:num )(+) c:sp ( "AS" | "as" ) tok::id

        :ast { t_Import, uri: str($2), reference:str($5), tok } */
fn reducer_144 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let tok_4_0 = __tok_rng_4.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_4_0 = tok_4_0.to_string();
  let obj_1_1 = ref_1.into_tokens();
  let obj_1_1 = (obj_1_1.first().unwrap() + obj_1_1.last().unwrap()).to_string();
  let var_6_0 = Import::new(
    tok_4_0,
    obj_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Import(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "IMPORT" ( c:id | c:sym | c:num )(+) c:sp ( "AS" | "as" ) tok::id

        :ast { t_Import, uri: str($2), reference:str($5), tok } */
fn reducer_145 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let tok_4_0 = __tok_rng_4.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_4_0 = tok_4_0.to_string();
  let obj_1_1 = ref_1.into_tokens();
  let obj_1_1 = (obj_1_1.first().unwrap() + obj_1_1.last().unwrap()).to_string();
  let var_6_0 = Import::new(
    tok_4_0,
    obj_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Import(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* c:id */
fn reducer_146 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:sym */
fn reducer_147 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* c:num */
fn reducer_148 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num ) */
fn reducer_149 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_2_0 = vec![];
  obj_2_0.push(tok_0_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num ) */
fn reducer_150 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_2_0 = vec![];
  obj_2_0.push(tok_0_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num ) */
fn reducer_151 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_2_0 = vec![];
  obj_2_0.push(tok_0_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num )(+) */
fn reducer_152 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_0_0 = ref_0.into_tokens();
  obj_0_0.push(tok_1_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num )(+) */
fn reducer_153 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_0_0 = ref_0.into_tokens();
  obj_0_0.push(tok_1_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( c:id | c:sym | c:num )(+) */
fn reducer_154 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let mut obj_0_0 = ref_0.into_tokens();
  obj_0_0.push(tok_1_0);
  slots.assign(0, AstSlot(ASTNode::TOKENS(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "AS" */
fn reducer_155 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "as" */
fn reducer_156 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "NAME" tok::id

        :ast { t_Name, name: str($2) } */
fn reducer_157 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_string();
  let var_3_0 = Name::new(
    tok_1_0,
  );
  slots.assign(0, AstSlot(ASTNode::Name(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "IGNORE" "{"  sym::terminal(*) "}"

        :ast { t_Ignore, symbols: $3 } */
fn reducer_158 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_2_0 = ref_2.into_nodes();
  let var_5_0 = Ignore::new(
    obj_2_0,
  );
  slots.assign(0, AstSlot(ASTNode::Ignore(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "IGNORE" "{"  sym::terminal(*) "}"

        :ast { t_Ignore, symbols: $3 } */
fn reducer_159 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let var_4_0 = Ignore::new(
    vec![],
  );
  slots.assign(0, AstSlot(ASTNode::Ignore(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* sym::terminal */
fn reducer_160 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* sym::terminal(*) */
fn reducer_161 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* rule(+"|") */
fn reducer_162 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* rule */
fn reducer_163 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* rule(+"|") */
fn reducer_164 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "(" rules ")"{1}

        :ast { t_Grouped_Rules, rules:$2,  tok } */
fn reducer_165 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  let var_4_0 = Grouped_Rules::new(
    obj_1_0.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Grouped_Rules(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* nonterminal_symbol */
fn reducer_166 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* import_nonterminal_symbol */
fn reducer_167 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* tok::id (":" "sym")?                    :ast { t_TemplateSym,     val:str($1) } */
fn reducer_168 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let var_4_0 = TemplateSym::new(
    tok_0_0,
  );
  slots.assign(0, AstSlot(ASTNode::TemplateSym(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* tok::id (":" "sym")?                    :ast { t_TemplateSym,     val:str($1) } */
fn reducer_169 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let var_2_0 = TemplateSym::new(
    tok_0_0,
  );
  slots.assign(0, AstSlot(ASTNode::TemplateSym(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ast::type_identifier ":" "ast"          :ast { t_TemplateASTType, val:str($1) } */
fn reducer_170 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let var_4_0 = TemplateASTType::new(
    tok_0_0,
  );
  slots.assign(0, AstSlot(ASTNode::TemplateASTType(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* ":" "sym" */
fn reducer_171 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* member */
fn reducer_172 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* map */
fn reducer_173 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* vector */
fn reducer_174 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* string */
fn reducer_175 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* bool */
fn reducer_176 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* number */
fn reducer_177 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* literal */
fn reducer_178 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* token::id */
fn reducer_179 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_180 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Range();
  let var_3_0 = AST_Token::new(
    Some(obj_1_0),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_181 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Range();
  let var_3_0 = AST_Token::new(
    Some(obj_1_0),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_182 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Range();
  let var_3_0 = AST_Token::new(
    Some(obj_1_0),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_183 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_Token::new(
    None,
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_184 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_Token::new(
    None,
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ( "tk" | "tok" | "token" ) range?
        :ast { t_AST_Token, range: $2 } */
fn reducer_185 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_Token::new(
    None,
  );
  slots.assign(0, AstSlot(ASTNode::AST_Token(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "tk" */
fn reducer_186 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "tok" */
fn reducer_187 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "token" */
fn reducer_188 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* struct */
fn reducer_189 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* flag */
fn reducer_190 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* expression
        :ast { t_AST_Statement, expression:$1, tok } */
fn reducer_191 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let var_2_0 = AST_Statement::new(
    obj_0_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Statement(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "{" expression '}'
        :ast { t_AST_Statement, expression:$2, tok } */
fn reducer_192 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1;
  let var_4_0 = AST_Statement::new(
    obj_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Statement(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* tk:int_tok */
fn reducer_193 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* generic_match_block */
fn reducer_194 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* nonterminal_match_block */
fn reducer_195 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* terminal_match_block */
fn reducer_196 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* goto_push(+"then") "then" goto

            :ast { t_Gotos, pushes: $1, goto } */
fn reducer_197 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_1 = ref_2;
  let obj_2_1 = obj_2_1.to_Goto();
  let obj_0_2 = ref_0.into_nodes();
  let var_4_0 = Gotos::new(
    None,
    Some(obj_2_1),
    obj_0_2.into_iter().map(|v|match v { ASTNode::Push(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
  );
  slots.assign(0, AstSlot(ASTNode::Gotos(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* goto
    
            :ast { t_Gotos, goto } */
fn reducer_198 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_1 = ref_0;
  let obj_0_1 = obj_0_1.to_Goto();
  let var_2_0 = Gotos::new(
    None,
    Some(obj_0_1),
    vec![],
  );
  slots.assign(0, AstSlot(ASTNode::Gotos(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* fork

            :ast { t_Gotos, fork } */
fn reducer_199 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let obj_0_0 = obj_0_0.to_Fork();
  let var_2_0 = Gotos::new(
    Some(obj_0_0),
    None,
    vec![],
  );
  slots.assign(0, AstSlot(ASTNode::Gotos(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* goto_push */
fn reducer_200 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* goto_push(+"then") */
fn reducer_201 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "fail"          :ast { t_Fail, tok } */
fn reducer_202 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = Fail::new(
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Fail(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "pass"        :ast { t_Pass, tok } */
fn reducer_203 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = Pass::new(
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Pass(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "accept"      :ast { t_Accept, tok } */
fn reducer_204 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = Accept::new(
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Accept(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "tk:(" rules ")"{1}

        :ast { t_TokenGroupRules, rules:$2,  tok } */
fn reducer_205 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  let var_4_0 = TokenGroupRules::new(
    obj_1_0.into_iter().map(|v|match v { ASTNode::Rule(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::TokenGroupRules(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* token */
fn reducer_206 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* token_non_terminal */
fn reducer_207 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* class */
fn reducer_208 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( [ ( sym::annotated_symbol | not_empty )(*)^s sym::end_of_input?^eoi ] :ast [$s, $eoi] )^s 
    
    ast_definition?^a

        :ast { t_Rule, symbols:$s, ast:$a, tok } */
fn reducer_209 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Ascript();
  let obj_0_1 = ref_0.into_nodes();
  let var_3_0 = Rule::new(
    Some(obj_1_0),
    obj_0_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Rule(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* ( [ ( sym::annotated_symbol | not_empty )(*)^s sym::end_of_input?^eoi ] :ast [$s, $eoi] )^s 
    
    ast_definition?^a

        :ast { t_Rule, symbols:$s, ast:$a, tok } */
fn reducer_210 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_1 = ref_0.into_nodes();
  let var_2_0 = Rule::new(
    None,
    obj_0_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Rule(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* sym::annotated_symbol */
fn reducer_211 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* not_empty */
fn reducer_212 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( sym::annotated_symbol | not_empty ) */
fn reducer_213 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( sym::annotated_symbol | not_empty ) */
fn reducer_214 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( sym::annotated_symbol | not_empty )(*) */
fn reducer_215 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( sym::annotated_symbol | not_empty )(*) */
fn reducer_216 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* [ ( sym::annotated_symbol | not_empty )(*)^s sym::end_of_input?^eoi ] :ast [$s, $eoi] */
fn reducer_217 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* [ ( sym::annotated_symbol | not_empty )(*)^s sym::end_of_input?^eoi ] :ast [$s, $eoi] */
fn reducer_218 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* [ ( sym::annotated_symbol | not_empty )(*)^s sym::end_of_input?^eoi ] :ast [$s, $eoi] */
fn reducer_219 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0.into_nodes();
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* tok::id '::' tok::id

        :ast { t_NonTerminal_Import_Symbol, module:str($1), name:str($3), tok} */
fn reducer_220 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_1 = tok_2_1.to_string();
  let var_4_0 = NonTerminal_Import_Symbol::new(
    tok_0_0,
    tok_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NonTerminal_Import_Symbol(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* trimmed_reference */
fn reducer_221 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* reference "." identifier
        :ast { t_AST_Member, reference:$1, property:$3 } */
fn reducer_222 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_2_0 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let obj_0_1 = ref_0;
  let var_4_0 = AST_Member::new(
    tok_2_0,
    obj_0_1,
  );
  slots.assign(0, AstSlot(ASTNode::AST_Member(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "map" "(" expr^k ',' expr^v ')'

        :ast { t_AST_Map, key: $k, val: $v, tok } */
fn reducer_223 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let obj_2_0 = ref_2;
  let obj_4_1 = ref_4;
  let var_7_0 = AST_Map::new(
    obj_2_0,
    obj_4_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Map(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* "[" expr(*",") "]"
        :ast { t_AST_Vector, initializer: $2, tok } */
fn reducer_224 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  let var_4_0 = AST_Vector::new(
    obj_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Vector(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "[" expr(*",") "]"
        :ast { t_AST_Vector, initializer: $2, tok } */
fn reducer_225 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let var_3_0 = AST_Vector::new(
    vec![],
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Vector(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* expr */
fn reducer_226 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* expr(*",") */
fn reducer_227 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "str" convert_initializer?
        :ast { t_AST_String, initializer: $2, tok } */
fn reducer_228 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_String::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_String(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "str" convert_initializer?
        :ast { t_AST_String, initializer: $2, tok } */
fn reducer_229 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_String::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_String(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "bool" convert_initializer?
        :ast { t_AST_Bool,  initializer: $2, tok } */
fn reducer_230 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_Bool::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Bool(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "bool" convert_initializer?
        :ast { t_AST_Bool,  initializer: $2, tok } */
fn reducer_231 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_Bool::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Bool(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "u8"  convert_initializer?
        :ast { t_AST_U8,  initializer: $2, tok } */
fn reducer_232 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_U8::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U8(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "u8"  convert_initializer?
        :ast { t_AST_U8,  initializer: $2, tok } */
fn reducer_233 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_U8::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U8(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "u16" convert_initializer?
        :ast { t_AST_U16, initializer: $2, tok } */
fn reducer_234 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_U16::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U16(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "u16" convert_initializer?
        :ast { t_AST_U16, initializer: $2, tok } */
fn reducer_235 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_U16::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U16(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "u32" convert_initializer?
        :ast { t_AST_U32, initializer: $2, tok } */
fn reducer_236 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_U32::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U32(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "u32" convert_initializer?
        :ast { t_AST_U32, initializer: $2, tok } */
fn reducer_237 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_U32::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U32(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "u64" convert_initializer?
        :ast { t_AST_U64, initializer: $2, tok } */
fn reducer_238 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_U64::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U64(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "u64" convert_initializer?
        :ast { t_AST_U64, initializer: $2, tok } */
fn reducer_239 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_U64::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U64(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "u128" convert_initializer?
        :ast { t_AST_U128, initializer: $2, tok } */
fn reducer_240 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_U128::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U128(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "u128" convert_initializer?
        :ast { t_AST_U128, initializer: $2, tok } */
fn reducer_241 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_U128::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_U128(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "i8"  convert_initializer?
        :ast { t_AST_I8,  initializer: $2, tok } */
fn reducer_242 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_I8::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I8(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "i8"  convert_initializer?
        :ast { t_AST_I8,  initializer: $2, tok } */
fn reducer_243 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_I8::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I8(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "i16" convert_initializer?
        :ast { t_AST_I16, initializer: $2, tok } */
fn reducer_244 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_I16::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I16(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "i16" convert_initializer?
        :ast { t_AST_I16, initializer: $2, tok } */
fn reducer_245 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_I16::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I16(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "i32" convert_initializer?
        :ast { t_AST_I32, initializer: $2, tok } */
fn reducer_246 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_I32::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I32(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "i32" convert_initializer?
        :ast { t_AST_I32, initializer: $2, tok } */
fn reducer_247 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_I32::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I32(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "i64" convert_initializer?
        :ast { t_AST_I64, initializer: $2, tok } */
fn reducer_248 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_I64::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I64(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "i64" convert_initializer?
        :ast { t_AST_I64, initializer: $2, tok } */
fn reducer_249 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_I64::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I64(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "i128" convert_initializer?
        :ast { t_AST_I64, initializer: $2, tok } */
fn reducer_250 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_I64::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I64(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "i128" convert_initializer?
        :ast { t_AST_I64, initializer: $2, tok } */
fn reducer_251 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_I64::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_I64(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "f16" convert_initializer?
        :ast { t_AST_F16, initializer: $2, tok } */
fn reducer_252 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_F16::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F16(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "f16" convert_initializer?
        :ast { t_AST_F16, initializer: $2, tok } */
fn reducer_253 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_F16::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F16(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "f32" convert_initializer?
        :ast { t_AST_F32, initializer: $2, tok } */
fn reducer_254 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_F32::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F32(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "f32" convert_initializer?
        :ast { t_AST_F32, initializer: $2, tok } */
fn reducer_255 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_F32::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F32(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "f64" convert_initializer?
        :ast { t_AST_F64, initializer: $2, tok } */
fn reducer_256 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_F64::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F64(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "f64" convert_initializer?
        :ast { t_AST_F64, initializer: $2, tok } */
fn reducer_257 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_F64::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F64(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "f128" convert_initializer?
        :ast { t_AST_F128, initializer: $2, tok } */
fn reducer_258 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Init();
  let var_3_0 = AST_F128::new(
    Some(obj_1_0),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F128(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "f128" convert_initializer?
        :ast { t_AST_F128, initializer: $2, tok } */
fn reducer_259 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = AST_F128::new(
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_F128(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "true" 
        :ast { t_AST_BoolLiteral, value: true } */
fn reducer_260 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_2_0 = true;
  let var_3_0 = AST_BoolLiteral::new(
    obj_2_0,
  );
  slots.assign(0, AstSlot(ASTNode::AST_BoolLiteral(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "false"
        :ast { t_AST_BoolLiteral, value: false } */
fn reducer_261 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_2_0 = false;
  let var_3_0 = AST_BoolLiteral::new(
    obj_2_0,
  );
  slots.assign(0, AstSlot(ASTNode::AST_BoolLiteral(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* token::num
        :ast { t_AST_NumberLiteral, value: f64($1) } */
fn reducer_262 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_f64();
  let var_2_0: AST_NumberLiteral = AST_NumberLiteral::new(
    tok_0_0,
  );
  slots.assign(0, AstSlot(ASTNode::AST_NumberLiteral(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* token::string
        :ast { t_AST_StringLiteral, value:str($1), tok } */
fn reducer_263 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let var_2_0 = AST_StringLiteral::new(
    tok_0_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_StringLiteral(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "<" token::int ( ","  token::int  )? ">"
        :ast { t_Range, start_trim:i32($2), end_trim:i32($3) } */
fn reducer_264 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let tok_3_0 = __tok_rng_3.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_3_0 = tok_3_0.to_i32();
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_i32();
  let var_6_0 = Range::new(
    tok_3_0,
    tok_1_1,
  );
  slots.assign(0, AstSlot(ASTNode::Range(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "<" token::int ( ","  token::int  )? ">"
        :ast { t_Range, start_trim:i32($2), end_trim:i32($3) } */
fn reducer_265 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = 0 as i32;
  let tok_1_1 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_1 = tok_1_1.to_i32();
  let var_5_0 = Range::new(
    obj_4_0,
    tok_1_1,
  );
  slots.assign(0, AstSlot(ASTNode::Range(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* ","  token::int */
fn reducer_266 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* flag_identifier "::" identifier
        :ast { t_AST_Flag, ty: str($1), val:$3, tok } */
fn reducer_267 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_string();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let var_4_0 = AST_Flag::new(
    tok_0_0,
    tok_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_Flag(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "match" ":" tok::id^id ( ":" tok::id :ast str($2) )?^scanner ( int_match :ast [$1] | "{" ( int_match | default_match | hint )(+) "}" :ast $2  )^m

        :ast { t_Matches, mode: str($id), matches:$m, scanner, tok } */
fn reducer_268 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (ref_3, _, _) = slots.take(3);
  let AstSlot (ref_4, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_4_0 = ref_4.into_nodes();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_1 = tok_2_1.to_string();
  let obj_3_2 = ref_3.to_string();
  let var_6_0 = Matches::new(
    obj_4_0,
    tok_2_1,
    obj_3_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Matches(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "match" ":" tok::id^id ( ":" tok::id :ast str($2) )?^scanner ( int_match :ast [$1] | "{" ( int_match | default_match | hint )(+) "}" :ast $2  )^m

        :ast { t_Matches, mode: str($id), matches:$m, scanner, tok } */
fn reducer_269 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_3_0 = ref_3.into_nodes();
  let tok_2_1 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_1 = tok_2_1.to_string();
  let var_5_0 = Matches::new(
    obj_3_0,
    tok_2_1,
    Default::default(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Matches(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* ":" tok::id :ast str($2) */
fn reducer_270 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_string();
  slots.assign(0, AstSlot(ASTNode::STRING(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* int_match */
fn reducer_271 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* default_match */
fn reducer_272 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* hint */
fn reducer_273 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint ) */
fn reducer_274 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint ) */
fn reducer_275 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint ) */
fn reducer_276 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint )(+) */
fn reducer_277 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint )(+) */
fn reducer_278 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( int_match | default_match | hint )(+) */
fn reducer_279 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* int_match :ast [$1] */
fn reducer_280 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* "{" ( int_match | default_match | hint )(+) "}" :ast $2 */
fn reducer_281 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  slots.assign(0, AstSlot(ASTNode::NODES(obj_1_0), __rule_rng__, TokenRange::default()));
}


/* "match" ":" "PRODUCTION" ( nonterminal_match :ast [$1] | "{" ( nonterminal_match | hint | default_match )(+) "}" :ast $2 )^m

        :ast { t_ProductionMatches, matches:$m } */
fn reducer_282 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_3_0 = ref_3.into_nodes();
  let var_5_0 = ProductionMatches::new(
    obj_3_0,
  );
  slots.assign(0, AstSlot(ASTNode::ProductionMatches(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* nonterminal_match */
fn reducer_283 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* hint */
fn reducer_284 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* default_match */
fn reducer_285 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match ) */
fn reducer_286 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match ) */
fn reducer_287 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match ) */
fn reducer_288 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match )(+) */
fn reducer_289 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match )(+) */
fn reducer_290 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( nonterminal_match | hint | default_match )(+) */
fn reducer_291 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* nonterminal_match :ast [$1] */
fn reducer_292 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* "{" ( nonterminal_match | hint | default_match )(+) "}" :ast $2 */
fn reducer_293 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  slots.assign(0, AstSlot(ASTNode::NODES(obj_1_0), __rule_rng__, TokenRange::default()));
}


/* "match" ":" "TERMINAL" ( terminal_match :ast [$1] | "{" ( terminal_match | hint | default_match )(+) "}" :ast $2 )^m

        :ast { t_TerminalMatches, matches:$m } */
fn reducer_294 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_3_0 = ref_3.into_nodes();
  let var_5_0 = TerminalMatches::new(
    obj_3_0,
  );
  slots.assign(0, AstSlot(ASTNode::TerminalMatches(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* terminal_match */
fn reducer_295 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* hint */
fn reducer_296 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* default_match */
fn reducer_297 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match ) */
fn reducer_298 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match ) */
fn reducer_299 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match ) */
fn reducer_300 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match )(+) */
fn reducer_301 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match )(+) */
fn reducer_302 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* ( terminal_match | hint | default_match )(+) */
fn reducer_303 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* terminal_match :ast [$1] */
fn reducer_304 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* "{" ( terminal_match | hint | default_match )(+) "}" :ast $2 */
fn reducer_305 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1.into_nodes();
  slots.assign(0, AstSlot(ASTNode::NODES(obj_1_0), __rule_rng__, TokenRange::default()));
}


/* "push" sym::nonterminal

    :ast { t_Push, nonterminal: $2, name:str($2), tok } */
fn reducer_306 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_1_1 = ref_1;
  let var_3_0 = Push::new(
    tok_1_0,
    obj_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Push(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "goto" sym::nonterminal

    :ast { t_Goto, nonterminal: $2, name:str($2), tok } */
fn reducer_307 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_1_1 = ref_1;
  let var_3_0 = Goto::new(
    tok_1_0,
    obj_1_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Goto(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "fork" "{" ( sym::nonterminal :ast { t_Goto, nonterminal: $1, name:str($1), tok } )(+) "}"                 
                                            
            :ast { t_Fork, paths: $3, tok } */
fn reducer_308 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_2_0 = ref_2.into_nodes();
  let var_5_0 = Fork::new(
    obj_2_0.into_iter().map(|v|match v { ASTNode::Goto(node) => node, _ => panic!("could not convert")}).collect::<Vec<_>>(),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Fork(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* sym::nonterminal :ast { t_Goto, nonterminal: $1, name:str($1), tok } */
fn reducer_309 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0;
  let tok_0_0 = tok_0_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_1 = ref_0;
  let var_2_0 = Goto::new(
    tok_0_0,
    obj_0_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Goto(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ( sym::nonterminal :ast { t_Goto, nonterminal: $1, name:str($1), tok } ) */
fn reducer_310 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( sym::nonterminal :ast { t_Goto, nonterminal: $1, name:str($1), tok } )(+) */
fn reducer_311 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* tok::string

        :ast { t_TerminalToken, val:str(tok<1,1>), tok, is_exclusive:true } */
fn reducer_312 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_2_0 = true;
  let tok_rule_1 = __rule_rng__;
  let tok_rule_1 = tok_rule_1.trim(1, 1);
  let tok_rule_1 = tok_rule_1.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = TerminalToken::new(
    obj_2_0,
    tok_rule_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::TerminalToken(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* tok::quote

        :ast { t_TerminalToken, val:str(tok<1,1>), tok } */
fn reducer_313 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_rule_1 = __rule_rng__;
  let tok_rule_1 = tok_rule_1.trim(1, 1);
  let tok_rule_1 = tok_rule_1.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_2_0 = TerminalToken::new(
    false,
    tok_rule_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::TerminalToken(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* "tk:" nonterminal

        :ast { t_NonTerminal_Terminal_Symbol, nonterminal:$2, tok } */
fn reducer_314 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let var_3_0 = NonTerminal_Terminal_Symbol::new(
    obj_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NonTerminal_Terminal_Symbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_315 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_316 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_317 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_318 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_319 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_320 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_321 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_322 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "c:" ( 'num' | 'nl' | 'sp' | 'id' | 'sym' | 'any' | 'tab' | 'vtab' | tk:(c:id+) )

        :ast { t_ClassSymbol, val:str($2),  tok } */
fn reducer_323 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let var_3_0 = ClassSymbol::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::ClassSymbol(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* 'num' */
fn reducer_324 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'nl' */
fn reducer_325 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'sp' */
fn reducer_326 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'id' */
fn reducer_327 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'sym' */
fn reducer_328 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'any' */
fn reducer_329 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'tab' */
fn reducer_330 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* 'vtab' */
fn reducer_331 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* tk:(c:id+) */
fn reducer_332 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_333 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_3_1 = ref_3;
  let obj_3_1 = obj_3_1.to_Precedence();
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_3_1),
    tok_1_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_334 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_2_1 = ref_2;
  let obj_2_1 = obj_2_1.to_Precedence();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    Some(obj_2_1),
    Default::default(),
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_335 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = false;
  let obj_2_1 = ref_2;
  let obj_2_1 = obj_2_1.to_Precedence();
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    Some(obj_2_1),
    tok_1_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_336 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_3_0 = false;
  let obj_1_1 = ref_1;
  let obj_1_1 = obj_1_1.to_Precedence();
  let obj_0_3 = ref_0;
  let var_4_0 = AnnotatedSymbol::new(
    obj_3_0,
    Some(obj_1_1),
    Default::default(),
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_337 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    None,
    tok_1_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_338 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_3_0 = true;
  let obj_0_3 = ref_0;
  let var_4_0 = AnnotatedSymbol::new(
    obj_3_0,
    None,
    Default::default(),
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_339 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_3_0 = false;
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_4_0 = AnnotatedSymbol::new(
    obj_3_0,
    None,
    tok_1_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_340 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_2_1 = ref_2;
  let obj_2_1 = obj_2_1.to_Precedence();
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_2_1),
    tok_1_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_341 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_1_1 = ref_1;
  let obj_1_1 = obj_1_1.to_Precedence();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    Some(obj_1_1),
    Default::default(),
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_342 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (ref_3, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_3_1 = ref_3;
  let obj_3_1 = obj_3_1.to_Precedence();
  let tok_2_2 = __tok_rng_2;
  let tok_2_2 = tok_2_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_3_1),
    tok_2_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_343 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let tok_2_2 = __tok_rng_2;
  let tok_2_2 = tok_2_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    None,
    tok_2_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_344 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_2_1 = ref_2;
  let obj_2_1 = obj_2_1.to_Precedence();
  let tok_3_2 = __tok_rng_3;
  let tok_3_2 = tok_3_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_2_1),
    tok_3_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_345 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = false;
  let obj_1_1 = ref_1;
  let obj_1_1 = obj_1_1.to_Precedence();
  let tok_2_2 = __tok_rng_2;
  let tok_2_2 = tok_2_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_5_0 = AnnotatedSymbol::new(
    obj_4_0,
    Some(obj_1_1),
    tok_2_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_346 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_1_1 = ref_1;
  let obj_1_1 = obj_1_1.to_Precedence();
  let tok_2_2 = __tok_rng_2;
  let tok_2_2 = tok_2_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_1_1),
    tok_2_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list^s [tk:reference?^r "?" ?^o  precedence?^p ]!

        :ast { t_AnnotatedSymbol, precedence:$p, symbol:$s, is_optional:bool($o), reference:str($r), tok  } */
fn reducer_347 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_1_1 = ref_1;
  let obj_1_1 = obj_1_1.to_Precedence();
  let tok_3_2 = __tok_rng_3;
  let tok_3_2 = tok_3_2.to_slice(unsafe{&*_ctx_}.get_str()).to_string();
  let obj_0_3 = ref_0;
  let var_6_0 = AnnotatedSymbol::new(
    obj_5_0,
    Some(obj_1_1),
    tok_3_2,
    obj_0_3,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AnnotatedSymbol(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* list */
fn reducer_348 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "[" not_empty_set^s ']' "!"?^o  

        :ast { t_NotEmptySet, unordered: bool($o), symbols:$s, tok } */
fn reducer_349 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_1_1 = ref_1.into_nodes();
  let obj_5_2 = true;
  let var_6_0 = NotEmptySet::new(
    false,
    obj_1_1,
    obj_5_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NotEmptySet(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "[" not_empty_set^s ']' "!"?^o  

        :ast { t_NotEmptySet, unordered: bool($o), symbols:$s, tok } */
fn reducer_350 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_1 = ref_1.into_nodes();
  let obj_4_2 = false;
  let var_5_0 = NotEmptySet::new(
    false,
    obj_1_1,
    obj_4_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NotEmptySet(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "[" not_empty_set^s "]!?"^o

        :ast { t_NotEmptySet, unordered: bool($o), allow_empty: bool($o), symbols:$s, tok } */
fn reducer_351 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_1_1 = ref_1.into_nodes();
  let obj_5_2 = true;
  let var_6_0 = NotEmptySet::new(
    obj_4_0,
    obj_1_1,
    obj_5_2,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::NotEmptySet(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* "$" :ast { t_EOFSymbol, tok } */
fn reducer_352 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let var_2_0 = EOFSymbol::new(
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::EOFSymbol(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}


/* ":ast" ast::body^ast

            :ast  { t_Ascript, ast:$ast, tok } */
fn reducer_353 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let var_3_0 = Ascript::new(
    obj_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Ascript(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* reference */
fn reducer_354 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* reference range
        :ast { t_AST_TrimmedReference, reference:$1, range:$2, tok } */
fn reducer_355 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Range();
  let obj_0_1 = ref_0;
  let var_3_0 = AST_TrimmedReference::new(
    obj_1_0,
    obj_0_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_TrimmedReference(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "$" token::id 
        :ast { t_AST_NamedReference, value: str($2), tok } */
fn reducer_356 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_string();
  let var_3_0 = AST_NamedReference::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_NamedReference(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "$" token::int
        :ast { t_AST_IndexReference, value: i64($2), tok } */
fn reducer_357 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_1_0 = tok_1_0.to_i64();
  let var_3_0 = AST_IndexReference::new(
    tok_1_0,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::AST_IndexReference(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* "(" init_objects ")"       
        :ast { t_Init, expression: $2 } */
fn reducer_358 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1;
  let var_4_0 = Init::new(
    obj_1_0,
  );
  slots.assign(0, AstSlot(ASTNode::Init(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* tk:num_tok */
fn reducer_359 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* tk:string_tok */
fn reducer_360 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* tk:( 'f' "_"{:9999} ) identifier */
fn reducer_361 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* "(" ( tok::int :ast u64($1) )(+"|")^vals ")" "{" statement "}"

    :ast { t_IntMatch, vals, statement } */
fn reducer_362 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let obj_4_0 = ref_4;
  let obj_4_0 = obj_4_0.to_Statement();
  let obj_1_1 = ref_1.into_u64_vec();
  let var_7_0 = IntMatch::new(
    obj_4_0,
    obj_1_1,
  );
  slots.assign(0, AstSlot(ASTNode::IntMatch(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* tok::int :ast u64($1) */
fn reducer_363 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_0_0 = __tok_rng_0.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_0_0 = tok_0_0.to_u64();
  slots.assign(0, AstSlot(ASTNode::U64(tok_0_0), __rule_rng__, TokenRange::default()));
}


/* ( tok::int :ast u64($1) ) */
fn reducer_364 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0.to_u64();
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::U64Vec(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* ( tok::int :ast u64($1) )(+"|") */
fn reducer_365 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2.to_u64();
  let mut obj_0_0 = ref_0.into_u64_vec();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::U64Vec(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* "default"? "{" statement "}"

    :ast { t_DefaultMatch, statement } */
fn reducer_366 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_2_0 = ref_2;
  let obj_2_0 = obj_2_0.to_Statement();
  let var_5_0 = DefaultMatch::new(
    obj_2_0,
  );
  slots.assign(0, AstSlot(ASTNode::DefaultMatch(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "default"? "{" statement "}"

    :ast { t_DefaultMatch, statement } */
fn reducer_367 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_0 = ref_1;
  let obj_1_0 = obj_1_0.to_Statement();
  let var_4_0 = DefaultMatch::new(
    obj_1_0,
  );
  slots.assign(0, AstSlot(ASTNode::DefaultMatch(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "fail-hint" "{" tok::string^message "}"

    :ast { t_FailHint, message: str($message) } */
fn reducer_368 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let tok_2_0 = __tok_rng_2.to_token(unsafe{&mut*_ctx_}.get_reader_mut());
  let tok_2_0 = tok_2_0.to_string();
  let var_5_0 = FailHint::new(
    tok_2_0,
  );
  slots.assign(0, AstSlot(ASTNode::FailHint(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "(" sym::nonterminal^sym ")" "{" statement "}"

    :ast { t_NonTermMatch, sym, statement } */
fn reducer_369 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let obj_4_0 = ref_4;
  let obj_4_0 = obj_4_0.to_Statement();
  let obj_1_1 = ref_1;
  let var_7_0 = NonTermMatch::new(
    obj_4_0,
    obj_1_1,
  );
  slots.assign(0, AstSlot(ASTNode::NonTermMatch(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* "(" sym::terminal^sym ")" "{" statement "}"

    :ast { t_TermMatch, sym, statement } */
fn reducer_370 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (ref_4, _, _) = slots.take(4);
  let AstSlot (_, __tok_rng_5, _) = slots.take(5);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_5;
  let obj_4_0 = ref_4;
  let obj_4_0 = obj_4_0.to_Statement();
  let obj_1_1 = ref_1;
  let var_7_0 = TermMatch::new(
    obj_4_0,
    obj_1_1,
  );
  slots.assign(0, AstSlot(ASTNode::TermMatch(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* tk:quote_tok */
fn reducer_371 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* symbol '+'

            :ast { t_List_Rules, symbol:$1, tok } */
fn reducer_372 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_0_1 = ref_0;
  let var_3_0 = List_Rules::new(
    false,
    obj_0_1,
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_3_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "*"

            :ast { t_List_Rules, symbol:$1, tok, optional: true } */
fn reducer_373 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_3_0 = true;
  let obj_0_1 = ref_0;
  let var_4_0 = List_Rules::new(
    obj_3_0,
    obj_0_1,
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(+" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok } */
fn reducer_374 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_0_1 = ref_0;
  let obj_2_2 = ref_2;
  let var_5_0 = List_Rules::new(
    false,
    obj_0_1,
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(+" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok } */
fn reducer_375 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_0_1 = ref_0;
  let obj_2_2 = ref_2;
  let var_5_0 = List_Rules::new(
    false,
    obj_0_1,
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(+" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok } */
fn reducer_376 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_0_1 = ref_0;
  let var_4_0 = List_Rules::new(
    false,
    obj_0_1,
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(*" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok, optional:true } */
fn reducer_377 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_0_1 = ref_0;
  let obj_2_2 = ref_2;
  let var_6_0 = List_Rules::new(
    obj_5_0,
    obj_0_1,
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(*" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok, optional:true } */
fn reducer_378 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_5_0 = true;
  let obj_0_1 = ref_0;
  let obj_2_2 = ref_2;
  let var_6_0 = List_Rules::new(
    obj_5_0,
    obj_0_1,
    Some(obj_2_2),
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* symbol "(*" ( token | class )? ')'

            :ast { t_List_Rules, terminal_symbol:$3, symbol:$1, tok, optional:true } */
fn reducer_379 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_0_1 = ref_0;
  let var_5_0 = List_Rules::new(
    obj_4_0,
    obj_0_1,
    None,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::List_Rules(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* symbol */
fn reducer_380 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* token */
fn reducer_381 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* class */
fn reducer_382 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* token */
fn reducer_383 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* class */
fn reducer_384 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* "{" tk:precedence_num? ( ":" tk:precedence_num? :ast u32($2) )? '}' 
      
      :ast { t_Precedence, sym_prec: u32($2), kot_prec: $3 } */
fn reducer_385 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_2_1 = ref_2.to_u32();
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.parse::<u32>(unsafe{&*_ctx_}.get_str());
  let var_5_0 = Precedence::new(
    false,
    obj_2_1,
    tok_1_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "{" tk:precedence_num? ( ":" tk:precedence_num? :ast u32($2) )? '}' 
      
      :ast { t_Precedence, sym_prec: u32($2), kot_prec: $3 } */
fn reducer_386 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, _, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_1_1 = ref_1.to_u32();
  let obj_4_2 = 0 as u32;
  let var_5_0 = Precedence::new(
    false,
    obj_1_1,
    obj_4_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* "{" tk:precedence_num? ( ":" tk:precedence_num? :ast u32($2) )? '}' 
      
      :ast { t_Precedence, sym_prec: u32($2), kot_prec: $3 } */
fn reducer_387 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.parse::<u32>(unsafe{&*_ctx_}.get_str());
  let var_4_0 = Precedence::new(
    false,
    0,
    tok_1_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "{" tk:precedence_num? ( ":" tk:precedence_num? :ast u32($2) )? '}' 
      
      :ast { t_Precedence, sym_prec: u32($2), kot_prec: $3 } */
fn reducer_388 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_3_2 = 0 as u32;
  let var_4_0 = Precedence::new(
    false,
    0,
    obj_3_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_4_0)), __rule_rng__, TokenRange::default()));
}


/* "{" ( tk:precedence_num^prec ":" )? "kw" '}' 
    
      :ast { t_Precedence, sym_prec: u32($prec), is_keyword: true } */
fn reducer_389 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  slots.take(2);
  slots.take(3);
  let AstSlot (_, __tok_rng_4, _) = slots.take(4);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_4;
  let obj_6_0 = true;
  let tok_1_2 = __tok_rng_1;
  let tok_1_2 = tok_1_2.parse::<u32>(unsafe{&*_ctx_}.get_str());
  let var_7_0 = Precedence::new(
    obj_6_0,
    0,
    tok_1_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_7_0)), __rule_rng__, TokenRange::default()));
}


/* "{" ( tk:precedence_num^prec ":" )? "kw" '}' 
    
      :ast { t_Precedence, sym_prec: u32($prec), is_keyword: true } */
fn reducer_390 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (_, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_4_0 = true;
  let obj_5_2 = 0 as u32;
  let var_6_0 = Precedence::new(
    obj_4_0,
    0,
    obj_5_2,
  );
  slots.assign(0, AstSlot(ASTNode::Precedence(Box::new(var_6_0)), __rule_rng__, TokenRange::default()));
}


/* ":" tk:precedence_num? :ast u32($2) */
fn reducer_391 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (_, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let tok_1_0 = __tok_rng_1;
  let tok_1_0 = tok_1_0.parse::<u32>(unsafe{&*_ctx_}.get_str());
  slots.assign(0, AstSlot(ASTNode::U32(tok_1_0), __rule_rng__, TokenRange::default()));
}


/* ":" tk:precedence_num? :ast u32($2) */
fn reducer_392 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_2_0 = 0 as u32;
  slots.assign(0, AstSlot(ASTNode::U32(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* tk:precedence_num^prec ":" */
fn reducer_393 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  slots.assign(0, AstSlot(ref_1, __rule_rng__, TokenRange::default()));
}


/* sym::annotated_symbol(+)^s */
fn reducer_394 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* sym::annotated_symbol */
fn reducer_395 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* sym::annotated_symbol(+) */
fn reducer_396 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let AstSlot (ref_1, __tok_rng_1, _) = slots.take(1);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_1;
  let obj_1_0 = ref_1;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_1_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* member */
fn reducer_397 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* token */
fn reducer_398 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* literal */
fn reducer_399 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* nonterminal */
fn reducer_400 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* template_nonterminal */
fn reducer_401 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* terminal */
fn reducer_402 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* nonterminal "::<" template_arg(+",")^template_args ">"

            :ast { t_Template_NonTerminal_Symbol, name:$1, template_args, tok } */
fn reducer_403 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, _, _) = slots.take(2);
  let AstSlot (_, __tok_rng_3, _) = slots.take(3);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_3;
  let obj_0_0 = ref_0;
  let obj_2_1 = ref_2.into_nodes();
  let var_5_0 = Template_NonTerminal_Symbol::new(
    obj_0_0,
    obj_2_1,
    __rule_rng__.to_token(unsafe{{&mut*_ctx_}}.get_reader_mut()),
  );
  slots.assign(0, AstSlot(ASTNode::Template_NonTerminal_Symbol(Box::new(var_5_0)), __rule_rng__, TokenRange::default()));
}


/* template_arg */
fn reducer_404 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let obj_0_0 = ref_0;
  let mut obj_2_0 = vec![];
  obj_2_0.push(obj_0_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_2_0), __rule_rng__, TokenRange::default()));
}


/* template_arg(+",") */
fn reducer_405 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  slots.take(1);
  let AstSlot (ref_2, __tok_rng_2, _) = slots.take(2);
  let __rule_rng__ = __tok_rng_0 + __tok_rng_2;
  let obj_2_0 = ref_2;
  let mut obj_0_0 = ref_0.into_nodes();
  obj_0_0.push(obj_2_0);
  slots.assign(0, AstSlot(ASTNode::NODES(obj_0_0), __rule_rng__, TokenRange::default()));
}


/* list */
fn reducer_406 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (ref_0, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  slots.assign(0, AstSlot(ref_0, __rule_rng__, TokenRange::default()));
}


/* ast::type_identifier 
                
            :ast { t_AST_STRUCT_TEMPLATE_NAME, typ: str(tok)  } */
fn reducer_407 <R: Reader + UTF8Reader, M, const UP: bool> (_ctx_: *mut ParseContext<R, M>,slots: &AstStackSlice<AstSlot<ASTNode>, UP>) {
  let AstSlot (_, __tok_rng_0, _) = slots.take(0);
  let __rule_rng__ = __tok_rng_0;
  let tok_rule_0 = __rule_rng__;
  let tok_rule_0 = tok_rule_0.to_token(unsafe{&mut *_ctx_}.get_reader_mut());
  let tok_rule_0 = tok_rule_0.to_string();
  let var_2_0 = AST_STRUCT_TEMPLATE_NAME::new(
    tok_rule_0,
  );
  slots.assign(0, AstSlot(ASTNode::AST_STRUCT_TEMPLATE_NAME(Box::new(var_2_0)), __rule_rng__, TokenRange::default()));
}

struct ReduceFunctions<R: Reader + UTF8Reader, M, const UP: bool>(
  pub [Reducer<R, M, ASTNode, UP>; 408]
);

impl<R: Reader + UTF8Reader, M, const UP: bool> ReduceFunctions<R, M, UP>{
  
  pub const fn new ()-> Self {
    
    Self([
      reducer_000::<R, M, UP>,
      reducer_001::<R, M, UP>,
      reducer_002::<R, M, UP>,
      reducer_003::<R, M, UP>,
      reducer_004::<R, M, UP>,
      reducer_005::<R, M, UP>,
      reducer_006::<R, M, UP>,
      reducer_007::<R, M, UP>,
      reducer_008::<R, M, UP>,
      reducer_009::<R, M, UP>,
      reducer_010::<R, M, UP>,
      reducer_011::<R, M, UP>,
      reducer_012::<R, M, UP>,
      reducer_013::<R, M, UP>,
      reducer_014::<R, M, UP>,
      reducer_015::<R, M, UP>,
      reducer_016::<R, M, UP>,
      reducer_017::<R, M, UP>,
      reducer_018::<R, M, UP>,
      reducer_019::<R, M, UP>,
      reducer_020::<R, M, UP>,
      reducer_021::<R, M, UP>,
      reducer_022::<R, M, UP>,
      reducer_023::<R, M, UP>,
      reducer_024::<R, M, UP>,
      reducer_025::<R, M, UP>,
      reducer_026::<R, M, UP>,
      reducer_027::<R, M, UP>,
      reducer_028::<R, M, UP>,
      reducer_029::<R, M, UP>,
      reducer_030::<R, M, UP>,
      reducer_031::<R, M, UP>,
      reducer_032::<R, M, UP>,
      reducer_033::<R, M, UP>,
      reducer_034::<R, M, UP>,
      reducer_035::<R, M, UP>,
      reducer_036::<R, M, UP>,
      reducer_037::<R, M, UP>,
      reducer_038::<R, M, UP>,
      reducer_039::<R, M, UP>,
      reducer_040::<R, M, UP>,
      reducer_041::<R, M, UP>,
      reducer_042::<R, M, UP>,
      reducer_043::<R, M, UP>,
      reducer_044::<R, M, UP>,
      reducer_045::<R, M, UP>,
      reducer_046::<R, M, UP>,
      reducer_047::<R, M, UP>,
      reducer_048::<R, M, UP>,
      reducer_049::<R, M, UP>,
      reducer_050::<R, M, UP>,
      reducer_051::<R, M, UP>,
      reducer_052::<R, M, UP>,
      reducer_053::<R, M, UP>,
      reducer_054::<R, M, UP>,
      reducer_055::<R, M, UP>,
      reducer_056::<R, M, UP>,
      reducer_057::<R, M, UP>,
      reducer_058::<R, M, UP>,
      reducer_059::<R, M, UP>,
      reducer_060::<R, M, UP>,
      reducer_061::<R, M, UP>,
      reducer_062::<R, M, UP>,
      reducer_063::<R, M, UP>,
      reducer_064::<R, M, UP>,
      reducer_065::<R, M, UP>,
      reducer_066::<R, M, UP>,
      reducer_067::<R, M, UP>,
      reducer_068::<R, M, UP>,
      reducer_069::<R, M, UP>,
      reducer_070::<R, M, UP>,
      reducer_071::<R, M, UP>,
      reducer_072::<R, M, UP>,
      reducer_073::<R, M, UP>,
      reducer_074::<R, M, UP>,
      reducer_075::<R, M, UP>,
      reducer_076::<R, M, UP>,
      reducer_077::<R, M, UP>,
      reducer_078::<R, M, UP>,
      reducer_079::<R, M, UP>,
      reducer_080::<R, M, UP>,
      reducer_081::<R, M, UP>,
      reducer_082::<R, M, UP>,
      reducer_083::<R, M, UP>,
      reducer_084::<R, M, UP>,
      reducer_085::<R, M, UP>,
      reducer_086::<R, M, UP>,
      reducer_087::<R, M, UP>,
      reducer_088::<R, M, UP>,
      reducer_089::<R, M, UP>,
      reducer_090::<R, M, UP>,
      reducer_091::<R, M, UP>,
      reducer_092::<R, M, UP>,
      reducer_093::<R, M, UP>,
      reducer_094::<R, M, UP>,
      reducer_095::<R, M, UP>,
      reducer_096::<R, M, UP>,
      reducer_097::<R, M, UP>,
      reducer_098::<R, M, UP>,
      reducer_099::<R, M, UP>,
      reducer_100::<R, M, UP>,
      reducer_101::<R, M, UP>,
      reducer_102::<R, M, UP>,
      reducer_103::<R, M, UP>,
      reducer_104::<R, M, UP>,
      reducer_105::<R, M, UP>,
      reducer_106::<R, M, UP>,
      reducer_107::<R, M, UP>,
      reducer_108::<R, M, UP>,
      reducer_109::<R, M, UP>,
      reducer_110::<R, M, UP>,
      reducer_111::<R, M, UP>,
      reducer_112::<R, M, UP>,
      reducer_113::<R, M, UP>,
      reducer_114::<R, M, UP>,
      reducer_115::<R, M, UP>,
      reducer_116::<R, M, UP>,
      reducer_117::<R, M, UP>,
      reducer_118::<R, M, UP>,
      reducer_119::<R, M, UP>,
      reducer_120::<R, M, UP>,
      reducer_121::<R, M, UP>,
      reducer_122::<R, M, UP>,
      reducer_123::<R, M, UP>,
      reducer_124::<R, M, UP>,
      reducer_125::<R, M, UP>,
      reducer_126::<R, M, UP>,
      reducer_127::<R, M, UP>,
      reducer_128::<R, M, UP>,
      reducer_129::<R, M, UP>,
      reducer_130::<R, M, UP>,
      reducer_131::<R, M, UP>,
      reducer_132::<R, M, UP>,
      reducer_133::<R, M, UP>,
      reducer_134::<R, M, UP>,
      reducer_135::<R, M, UP>,
      reducer_136::<R, M, UP>,
      reducer_137::<R, M, UP>,
      reducer_138::<R, M, UP>,
      reducer_139::<R, M, UP>,
      reducer_140::<R, M, UP>,
      reducer_141::<R, M, UP>,
      reducer_142::<R, M, UP>,
      reducer_143::<R, M, UP>,
      reducer_144::<R, M, UP>,
      reducer_145::<R, M, UP>,
      reducer_146::<R, M, UP>,
      reducer_147::<R, M, UP>,
      reducer_148::<R, M, UP>,
      reducer_149::<R, M, UP>,
      reducer_150::<R, M, UP>,
      reducer_151::<R, M, UP>,
      reducer_152::<R, M, UP>,
      reducer_153::<R, M, UP>,
      reducer_154::<R, M, UP>,
      reducer_155::<R, M, UP>,
      reducer_156::<R, M, UP>,
      reducer_157::<R, M, UP>,
      reducer_158::<R, M, UP>,
      reducer_159::<R, M, UP>,
      reducer_160::<R, M, UP>,
      reducer_161::<R, M, UP>,
      reducer_162::<R, M, UP>,
      reducer_163::<R, M, UP>,
      reducer_164::<R, M, UP>,
      reducer_165::<R, M, UP>,
      reducer_166::<R, M, UP>,
      reducer_167::<R, M, UP>,
      reducer_168::<R, M, UP>,
      reducer_169::<R, M, UP>,
      reducer_170::<R, M, UP>,
      reducer_171::<R, M, UP>,
      reducer_172::<R, M, UP>,
      reducer_173::<R, M, UP>,
      reducer_174::<R, M, UP>,
      reducer_175::<R, M, UP>,
      reducer_176::<R, M, UP>,
      reducer_177::<R, M, UP>,
      reducer_178::<R, M, UP>,
      reducer_179::<R, M, UP>,
      reducer_180::<R, M, UP>,
      reducer_181::<R, M, UP>,
      reducer_182::<R, M, UP>,
      reducer_183::<R, M, UP>,
      reducer_184::<R, M, UP>,
      reducer_185::<R, M, UP>,
      reducer_186::<R, M, UP>,
      reducer_187::<R, M, UP>,
      reducer_188::<R, M, UP>,
      reducer_189::<R, M, UP>,
      reducer_190::<R, M, UP>,
      reducer_191::<R, M, UP>,
      reducer_192::<R, M, UP>,
      reducer_193::<R, M, UP>,
      reducer_194::<R, M, UP>,
      reducer_195::<R, M, UP>,
      reducer_196::<R, M, UP>,
      reducer_197::<R, M, UP>,
      reducer_198::<R, M, UP>,
      reducer_199::<R, M, UP>,
      reducer_200::<R, M, UP>,
      reducer_201::<R, M, UP>,
      reducer_202::<R, M, UP>,
      reducer_203::<R, M, UP>,
      reducer_204::<R, M, UP>,
      reducer_205::<R, M, UP>,
      reducer_206::<R, M, UP>,
      reducer_207::<R, M, UP>,
      reducer_208::<R, M, UP>,
      reducer_209::<R, M, UP>,
      reducer_210::<R, M, UP>,
      reducer_211::<R, M, UP>,
      reducer_212::<R, M, UP>,
      reducer_213::<R, M, UP>,
      reducer_214::<R, M, UP>,
      reducer_215::<R, M, UP>,
      reducer_216::<R, M, UP>,
      reducer_217::<R, M, UP>,
      reducer_218::<R, M, UP>,
      reducer_219::<R, M, UP>,
      reducer_220::<R, M, UP>,
      reducer_221::<R, M, UP>,
      reducer_222::<R, M, UP>,
      reducer_223::<R, M, UP>,
      reducer_224::<R, M, UP>,
      reducer_225::<R, M, UP>,
      reducer_226::<R, M, UP>,
      reducer_227::<R, M, UP>,
      reducer_228::<R, M, UP>,
      reducer_229::<R, M, UP>,
      reducer_230::<R, M, UP>,
      reducer_231::<R, M, UP>,
      reducer_232::<R, M, UP>,
      reducer_233::<R, M, UP>,
      reducer_234::<R, M, UP>,
      reducer_235::<R, M, UP>,
      reducer_236::<R, M, UP>,
      reducer_237::<R, M, UP>,
      reducer_238::<R, M, UP>,
      reducer_239::<R, M, UP>,
      reducer_240::<R, M, UP>,
      reducer_241::<R, M, UP>,
      reducer_242::<R, M, UP>,
      reducer_243::<R, M, UP>,
      reducer_244::<R, M, UP>,
      reducer_245::<R, M, UP>,
      reducer_246::<R, M, UP>,
      reducer_247::<R, M, UP>,
      reducer_248::<R, M, UP>,
      reducer_249::<R, M, UP>,
      reducer_250::<R, M, UP>,
      reducer_251::<R, M, UP>,
      reducer_252::<R, M, UP>,
      reducer_253::<R, M, UP>,
      reducer_254::<R, M, UP>,
      reducer_255::<R, M, UP>,
      reducer_256::<R, M, UP>,
      reducer_257::<R, M, UP>,
      reducer_258::<R, M, UP>,
      reducer_259::<R, M, UP>,
      reducer_260::<R, M, UP>,
      reducer_261::<R, M, UP>,
      reducer_262::<R, M, UP>,
      reducer_263::<R, M, UP>,
      reducer_264::<R, M, UP>,
      reducer_265::<R, M, UP>,
      reducer_266::<R, M, UP>,
      reducer_267::<R, M, UP>,
      reducer_268::<R, M, UP>,
      reducer_269::<R, M, UP>,
      reducer_270::<R, M, UP>,
      reducer_271::<R, M, UP>,
      reducer_272::<R, M, UP>,
      reducer_273::<R, M, UP>,
      reducer_274::<R, M, UP>,
      reducer_275::<R, M, UP>,
      reducer_276::<R, M, UP>,
      reducer_277::<R, M, UP>,
      reducer_278::<R, M, UP>,
      reducer_279::<R, M, UP>,
      reducer_280::<R, M, UP>,
      reducer_281::<R, M, UP>,
      reducer_282::<R, M, UP>,
      reducer_283::<R, M, UP>,
      reducer_284::<R, M, UP>,
      reducer_285::<R, M, UP>,
      reducer_286::<R, M, UP>,
      reducer_287::<R, M, UP>,
      reducer_288::<R, M, UP>,
      reducer_289::<R, M, UP>,
      reducer_290::<R, M, UP>,
      reducer_291::<R, M, UP>,
      reducer_292::<R, M, UP>,
      reducer_293::<R, M, UP>,
      reducer_294::<R, M, UP>,
      reducer_295::<R, M, UP>,
      reducer_296::<R, M, UP>,
      reducer_297::<R, M, UP>,
      reducer_298::<R, M, UP>,
      reducer_299::<R, M, UP>,
      reducer_300::<R, M, UP>,
      reducer_301::<R, M, UP>,
      reducer_302::<R, M, UP>,
      reducer_303::<R, M, UP>,
      reducer_304::<R, M, UP>,
      reducer_305::<R, M, UP>,
      reducer_306::<R, M, UP>,
      reducer_307::<R, M, UP>,
      reducer_308::<R, M, UP>,
      reducer_309::<R, M, UP>,
      reducer_310::<R, M, UP>,
      reducer_311::<R, M, UP>,
      reducer_312::<R, M, UP>,
      reducer_313::<R, M, UP>,
      reducer_314::<R, M, UP>,
      reducer_315::<R, M, UP>,
      reducer_316::<R, M, UP>,
      reducer_317::<R, M, UP>,
      reducer_318::<R, M, UP>,
      reducer_319::<R, M, UP>,
      reducer_320::<R, M, UP>,
      reducer_321::<R, M, UP>,
      reducer_322::<R, M, UP>,
      reducer_323::<R, M, UP>,
      reducer_324::<R, M, UP>,
      reducer_325::<R, M, UP>,
      reducer_326::<R, M, UP>,
      reducer_327::<R, M, UP>,
      reducer_328::<R, M, UP>,
      reducer_329::<R, M, UP>,
      reducer_330::<R, M, UP>,
      reducer_331::<R, M, UP>,
      reducer_332::<R, M, UP>,
      reducer_333::<R, M, UP>,
      reducer_334::<R, M, UP>,
      reducer_335::<R, M, UP>,
      reducer_336::<R, M, UP>,
      reducer_337::<R, M, UP>,
      reducer_338::<R, M, UP>,
      reducer_339::<R, M, UP>,
      reducer_340::<R, M, UP>,
      reducer_341::<R, M, UP>,
      reducer_342::<R, M, UP>,
      reducer_343::<R, M, UP>,
      reducer_344::<R, M, UP>,
      reducer_345::<R, M, UP>,
      reducer_346::<R, M, UP>,
      reducer_347::<R, M, UP>,
      reducer_348::<R, M, UP>,
      reducer_349::<R, M, UP>,
      reducer_350::<R, M, UP>,
      reducer_351::<R, M, UP>,
      reducer_352::<R, M, UP>,
      reducer_353::<R, M, UP>,
      reducer_354::<R, M, UP>,
      reducer_355::<R, M, UP>,
      reducer_356::<R, M, UP>,
      reducer_357::<R, M, UP>,
      reducer_358::<R, M, UP>,
      reducer_359::<R, M, UP>,
      reducer_360::<R, M, UP>,
      reducer_361::<R, M, UP>,
      reducer_362::<R, M, UP>,
      reducer_363::<R, M, UP>,
      reducer_364::<R, M, UP>,
      reducer_365::<R, M, UP>,
      reducer_366::<R, M, UP>,
      reducer_367::<R, M, UP>,
      reducer_368::<R, M, UP>,
      reducer_369::<R, M, UP>,
      reducer_370::<R, M, UP>,
      reducer_371::<R, M, UP>,
      reducer_372::<R, M, UP>,
      reducer_373::<R, M, UP>,
      reducer_374::<R, M, UP>,
      reducer_375::<R, M, UP>,
      reducer_376::<R, M, UP>,
      reducer_377::<R, M, UP>,
      reducer_378::<R, M, UP>,
      reducer_379::<R, M, UP>,
      reducer_380::<R, M, UP>,
      reducer_381::<R, M, UP>,
      reducer_382::<R, M, UP>,
      reducer_383::<R, M, UP>,
      reducer_384::<R, M, UP>,
      reducer_385::<R, M, UP>,
      reducer_386::<R, M, UP>,
      reducer_387::<R, M, UP>,
      reducer_388::<R, M, UP>,
      reducer_389::<R, M, UP>,
      reducer_390::<R, M, UP>,
      reducer_391::<R, M, UP>,
      reducer_392::<R, M, UP>,
      reducer_393::<R, M, UP>,
      reducer_394::<R, M, UP>,
      reducer_395::<R, M, UP>,
      reducer_396::<R, M, UP>,
      reducer_397::<R, M, UP>,
      reducer_398::<R, M, UP>,
      reducer_399::<R, M, UP>,
      reducer_400::<R, M, UP>,
      reducer_401::<R, M, UP>,
      reducer_402::<R, M, UP>,
      reducer_403::<R, M, UP>,
      reducer_404::<R, M, UP>,
      reducer_405::<R, M, UP>,
      reducer_406::<R, M, UP>,
      reducer_407::<R, M, UP>,
    ])
  }
}
    
pub trait Reader: ByteReader + MutByteReader + UTF8Reader {}

impl<T: ByteReader + MutByteReader + UTF8Reader> Reader for T {}

pub type Parser<T, UserCTX, Bytecode> = radlr_rust_runtime::deprecate::ByteCodeParser<T, UserCTX, Bytecode>;

pub mod meta{
  
  pub const nonterm_names: [&'static str;144] = [
    "state",
    "escaped_string",
    "escaped_string_group",
    "escaped_string_list_1",
    "grammar",
    "grammar_list",
    "grammar_group_1",
    "grammar_list_2",
    "def_type",
    "expression",
    "struct",
    "struct_list",
    "struct_group_1",
    "nonterminal_symbol",
    "statement",
    "statement_list",
    "statement_group_1",
    "statement_group_2",
    "statement_group_3",
    "statement_list_4",
    "statement_group_5",
    "statement_group_6",
    "statement_group_7",
    "escaped_vals",
    "escaped",
    "escaped_group",
    "preamble",
    "cf_rules",
    "peg_rules",
    "append_rules",
    "template_rule",
    "template_rule_list",
    "id",
    "num",
    "expr",
    "struct_prop",
    "type_identifier",
    "id",
    "non_branch_statement",
    "non_branch_statement_group",
    "non_branch_statement_group_1",
    "non_branch_statement_group_2",
    "non_branch_statement_group_3",
    "pop",
    "branch_statement",
    "transitive_statement",
    "transitive_statement_group",
    "transitive_statement_group_1",
    "transitive_statement_group_2",
    "export_clause",
    "export_clause_group",
    "export_clause_group_1",
    "import_clause",
    "import_clause_group",
    "import_clause_list_1",
    "import_clause_group_2",
    "name_clause",
    "ignore_clause",
    "ignore_clause_list",
    "rules",
    "rules_list",
    "nonterminal",
    "template_param",
    "template_param_group",
    "term",
    "identifier",
    "token",
    "token_group",
    "body",
    "int",
    "match",
    "goto_sequence",
    "goto_sequence_list",
    "terminal_statement",
    "terminal",
    "rule",
    "rule_group",
    "rule_list_1",
    "rule_group_2",
    "import_nonterminal_symbol",
    "member",
    "map",
    "vector",
    "vector_list",
    "string",
    "bool",
    "number",
    "literal",
    "range",
    "range_group",
    "flag",
    "generic_match_block",
    "generic_match_block_group",
    "generic_match_block_group_1",
    "generic_match_block_list_2",
    "generic_match_block_group_3",
    "nonterminal_match_block",
    "nonterminal_match_block_group",
    "nonterminal_match_block_list_1",
    "nonterminal_match_block_group_2",
    "terminal_match_block",
    "terminal_match_block_group",
    "terminal_match_block_list_1",
    "terminal_match_block_group_2",
    "goto_push",
    "goto",
    "fork",
    "fork_group",
    "fork_list_1",
    "token",
    "token_non_terminal",
    "class",
    "class_group",
    "annotated_symbol",
    "not_empty",
    "end_of_input",
    "ast_definition",
    "trimmed_reference",
    "reference",
    "convert_initializer",
    "num",
    "string",
    "flag_identifier",
    "int_match",
    "int_match_group",
    "int_match_list_1",
    "default_match",
    "hint",
    "nonterminal_match",
    "terminal_match",
    "quote",
    "list",
    "list_group",
    "list_group_1",
    "precedence",
    "precedence_group",
    "precedence_group_1",
    "not_empty_set",
    "not_empty_set_list",
    "init_objects",
    "symbol",
    "template_nonterminal",
    "template_nonterminal_list",
    "template_arg",
  ];
  
  pub const symbol_string: [&'static str;141] = [
    r####"Default"####,
    r####"c:sp"####,
    r####"c:nl"####,
    r####" => "####,
    r####" =!> "####,
    r####"nonterm"####,
    r####"tk:nonterm"####,
    r####"tk:nonterm"####,
    r####"{EOF}"####,
    r####" , "####,
    r####" { "####,
    r####" } "####,
    r####"nonterm"####,
    r####" then "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####"c:id"####,
    r####"c:num"####,
    r####"c:sym"####,
    r####" \ "####,
    r####" > "####,
    r####" <> "####,
    r####"nonterm"####,
    r####" :> "####,
    r####" + "####,
    r####"nonterm"####,
    r####" < "####,
    r####"tk:nonterm"####,
    r####"tk:nonterm"####,
    r####" % "####,
    r####" ( "####,
    r####" ) "####,
    r####" * "####,
    r####" - "####,
    r####" / "####,
    r####" ^ "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####" : "####,
    r####"tk:nonterm"####,
    r####"tk:nonterm"####,
    r####" to "####,
    r####" rule "####,
    r####" with "####,
    r####" :ast "####,
    r####" reduce "####,
    r####" set-tok "####,
    r####" symbols "####,
    r####" set-line "####,
    r####" set-tok-len "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####" pop "####,
    r####" tok "####,
    r####" peek "####,
    r####" char "####,
    r####" -skip "####,
    r####" reset "####,
    r####" shift "####,
    r####" AS "####,
    r####" as "####,
    r####" EXPORT "####,
    r####" IMPORT "####,
    r####" NAME "####,
    r####" IGNORE "####,
    r####" | "####,
    r####" sym "####,
    r####" ast "####,
    r####" tk "####,
    r####" token "####,
    r####"nonterm"####,
    r####"tk:nonterm"####,
    r####" fail "####,
    r####" pass "####,
    r####" accept "####,
    r####" tk:( "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####" :: "####,
    r####" . "####,
    r####" map "####,
    r####" [ "####,
    r####" ] "####,
    r####" str "####,
    r####"nonterm"####,
    r####" bool "####,
    r####" i8 "####,
    r####" u8 "####,
    r####" f32 "####,
    r####" i32 "####,
    r####" u32 "####,
    r####" f64 "####,
    r####" i64 "####,
    r####" u64 "####,
    r####" f16 "####,
    r####" i16 "####,
    r####" u16 "####,
    r####" f128 "####,
    r####" i128 "####,
    r####" u128 "####,
    r####" true "####,
    r####" false "####,
    r####" match "####,
    r####"nonterm"####,
    r####" PRODUCTION "####,
    r####" TERMINAL "####,
    r####" push "####,
    r####" goto "####,
    r####" fork "####,
    r####" tk: "####,
    r####"tk:nonterm"####,
    r####" c: "####,
    r####" id "####,
    r####" nl "####,
    r####" sp "####,
    r####" tab "####,
    r####" num "####,
    r####" any "####,
    r####" vtab "####,
    r####" ? "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####"tk:nonterm"####,
    r####" ! "####,
    r####" ]!? "####,
    r####"nonterm"####,
    r####" $ "####,
    r####"tk:nonterm"####,
    r####"tk:nonterm"####,
    r####"tk:nonterm"####,
    r####" default "####,
    r####" fail-hint "####,
    r####"nonterm"####,
    r####"nonterm"####,
    r####"tk:nonterm"####,
    r####" (* "####,
    r####" (+ "####,
    r####"tk:nonterm"####,
    r####" kw "####,
    r####" ::< "####,
  ];
}

pub fn new_ir_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(8);
  parser
}

pub fn new_escaped_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(107485);
  parser
}

pub fn new_grammar_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(108304);
  parser
}

pub fn new_type_eval_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(199494);
  parser
}

pub fn new_ast_expression_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(199644);
  parser
}

pub fn new_ast_struct_parser<'a, T: Reader, UserCTX> (reader: &'a mut T)-> Parser<T, UserCTX, &'static [u8]> {
  let mut parser = Parser::<T, UserCTX, &'static [u8]>::new(reader, &bytecode);
  parser.init_parser(200487);
  parser
}

pub static bytecode: [u8; 240748] = [
  0,211,200,197,210,208,193,2,15,1,220,163,1,0,17,1,21,0,0,0,1,21,1,69,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8, 
  4,19,37,0,0,0,101,0,0,0,1,0,19,13,0,0,0,34,0,0,0,1,0,17,1,91,0,0,0,1,2,21,1,59,0,0,0,178,17,3,0,6,0,0,0,2,0,0,0,4,88,1,128,1,80,1,128,2,80,129, 
  128,3,152,129,128,6,80,1,128,7,80,1,128,8,4,17,1,158,161,1,0,1,4,17,1,151,0,0,0,1,2,21,1,49,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,200,14,128,1,240,194,127,2,240,66, 
  128,50,248,13,128,55,184,76,131,53,88,13,128,6,240,2,128,7,240,66,127,74,152,8,128,73,8,10,128,58,24,140,127,59,120,75,129,108,248,3,128,109,248,2,128,46,184,16,128,47,232,15,128,75,40,135,128,103,40,6, 
  128,107,248,4,128,8,4,15,1,110,161,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,110,161,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65, 
  159,1,0,17,1,226,158,1,0,1,4,15,1,110,161,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,110,161,1,0,15,1,122,161,1, 
  0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,19,0,0,0,0,0, 
  0,0,0,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,19,0,0,0,0,0,0,0,0,3,0,1,4,19,73,0,0,0,202,0, 
  0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,19,0,0,0,0,0,0,0,0,3,0,1,4,15,1,110,161,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15, 
  1,110,161,1,0,15,1,47,128,1,0,17,1,81,127,1,0,1,4,15,1,110,161,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,110,161,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15, 
  1,110,161,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,110,161,1,0,17,1,241,110,1,0,1, 
  4,15,1,110,161,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,113,110,1,0,1,4,15,1,110,161,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,58,0,0,0,7, 
  25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,4,3,0,0,1,2,21,1,117,0,0,0,128,25, 
  3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,56,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,181,109,1, 
  0,1,4,17,1,112,103,1,0,1,4,19,37,0,0,0,101,0,0,0,1,0,15,1,151,249,0,0,17,1,15,249,0,0,1,4,15,1,151,249,0,0,17,1,122,3,0,0,1,2,21,1,217,0,0,0,86,28,3,0, 
  13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128, 
  8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,110,243,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,110,243,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,110,243,0,0,1,4,15, 
  1,110,243,0,0,17,1,185,242,0,0,1,4,15,1,110,243,0,0,17,1,116,242,0,0,1,4,15,1,110,243,0,0,17,1,126,241,0,0,1,4,15,1,110,243,0,0,17,1,46,5,0,0,1,4,19,37,0,0,0, 
  101,0,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1,84,4,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88, 
  198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,110,243,0,0,1,4,19, 
  121,0,0,0,104,1,0,0,1,0,17,1,110,243,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1,185,242,0,0,1,4,15,1,110,243,0,0,17,1,116, 
  242,0,0,1,4,15,1,110,243,0,0,17,1,126,241,0,0,1,4,15,1,110,243,0,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1, 
  84,4,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128, 
  110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,226,6,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,226,6,0,0,1,4,19,115,0,0, 
  0,96,1,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0,17,1,185,242,0,0,1,4,15,1,226,6,0,0,17,1,116,242,0,0,1,4,15,1,226,6,0,0,17,1,126,241,0,0,1,4,15,1,226, 
  6,0,0,17,1,8,6,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0,17,1,122,3,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0, 
  0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0, 
  0,115,1,0,0,1,0,17,1,226,6,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,226,6,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0,17, 
  1,185,242,0,0,1,4,15,1,226,6,0,0,17,1,116,242,0,0,1,4,15,1,226,6,0,0,17,1,126,241,0,0,1,4,15,1,226,6,0,0,17,1,8,6,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0, 
  17,1,226,6,0,0,1,4,15,1,226,6,0,0,17,1,122,3,0,0,1,2,21,0,184,1,0,0,255,255,255,255,21,0,0,0,4,0,0,0,61,144,139,129,113,208,6,128,114,64,198,131,115,176,197,131,75,112,10,128, 
  37,200,12,128,77,8,74,128,109,128,72,131,110,240,7,128,121,32,5,128,74,0,11,128,59,96,76,126,60,248,203,129,13,48,205,124,78,160,137,126,79,16,73,128,111,96,7,128,130,144,4,128,131,40,4,128,140,192,3,128, 
  141,48,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,226,6,0,0,1,15,1,226,6,0,0,17,1,29,241,0,0,1,15,1,226,6,0,0,17,1,103,239,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17, 
  1,226,6,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,226,6,0,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,226,6,0,0,1,19,77,0,0,0,214,0,0,0,1,0,17,1,226,6,0,0,1, 
  19,77,0,0,0,213,0,0,0,1,0,17,1,226,6,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,226,6,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,226,6,0,0,1,19,74,0,0,0,206, 
  0,0,0,1,0,17,1,226,6,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,226,6,0,0,1,15,1,226,6,0,0,17,1,51,50,0,0,1,15,1,226,6,0,0,17,1,248,47,0,0,1,19,60,0,0, 
  0,163,0,0,0,1,0,17,1,226,6,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,226,6,0,0,1,15,1,226,6,0,0,17,1,197,47,0,0,1,15,1,226,6,0,0,17,1,95,9,0,0,1,15,1, 
  226,6,0,0,17,1,41,9,0,0,1,15,1,226,6,0,0,17,1,155,8,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,226,6,0,0,1,2,21,1,39,0,0,0,166,31,3,0,3,0,0,0,1,0,0, 
  0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,50,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128, 
  41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,1,9,0,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,79,208,0,128,37,216,192,127,1,19,79,0,0,0,220,0,0, 
  0,3,0,1,2,21,1,53,0,0,0,9,37,3,0,5,0,0,0,2,0,0,0,32,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,74,0,0,0,205,0,0,0,3,0,14,1,2,21, 
  1,47,0,0,0,93,37,3,0,5,0,0,0,2,0,0,0,6,112,1,129,1,112,1,128,2,112,129,127,7,112,1,128,66,48,1,128,4,17,1,154,9,0,0,1,8,19,59,0,0,0,162,0,0,0,1,0,1,21,1, 
  217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128, 
  129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,70,39,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,70,39,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17, 
  1,70,39,0,0,1,4,15,1,70,39,0,0,17,1,185,242,0,0,1,4,15,1,70,39,0,0,17,1,105,38,0,0,1,4,15,1,70,39,0,0,17,1,220,13,0,0,1,4,15,1,70,39,0,0,17,1,40,12,0, 
  0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,70,39,0,0,1,4,15,1,70,39,0,0,17,1,116,10,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48, 
  2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17, 
  1,110,243,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,110,243,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1,185,242,0,0,1,4,15, 
  1,110,243,0,0,17,1,105,38,0,0,1,4,15,1,110,243,0,0,17,1,220,13,0,0,1,4,15,1,110,243,0,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,110,243,0,0,1,4, 
  15,1,110,243,0,0,17,1,78,11,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128, 
  7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,110,243,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,110,243, 
  0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1,185,242,0,0,1,4,15,1,110,243,0,0,17,1,105,38,0,0,1,4,15,1,110,243,0,0,17,1,220, 
  13,0,0,1,4,15,1,110,243,0,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,110,243,0,0,1,4,15,1,110,243,0,0,17,1,78,11,0,0,1,2,21,1,217,0,0,0,86,28, 
  3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56, 
  2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,226,6,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,226,6,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,226,6,0,0,1, 
  4,15,1,226,6,0,0,17,1,185,242,0,0,1,4,15,1,226,6,0,0,17,1,105,38,0,0,1,4,15,1,226,6,0,0,17,1,220,13,0,0,1,4,15,1,226,6,0,0,17,1,2,13,0,0,1,4,19,37,0, 
  0,0,101,0,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0,17,1,116,10,0,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129, 
  31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,226,6,0,0,1, 
  4,19,121,0,0,0,104,1,0,0,1,0,17,1,226,6,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0,17,1,185,242,0,0,1,4,15,1,226,6,0,0,17, 
  1,105,38,0,0,1,4,15,1,226,6,0,0,17,1,220,13,0,0,1,4,15,1,226,6,0,0,17,1,2,13,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,226,6,0,0,1,4,15,1,226,6,0,0, 
  17,1,116,10,0,0,1,2,21,1,176,0,0,0,188,37,3,0,11,0,0,0,3,0,0,0,112,40,3,128,1,240,1,129,2,240,1,128,31,16,197,129,76,8,4,128,41,120,4,129,6,240,129,128,7,240,1,127,110,152, 
  3,128,129,144,2,128,135,248,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,106,15,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,106,15,0,0,1,4,15,1,106,15,0,0,17,1,185,242, 
  0,0,1,4,15,1,106,15,0,0,17,1,141,14,0,0,1,4,15,1,106,15,0,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,106,15,0,0,1,4,15,1,106,15,0,0,17,1,116, 
  10,0,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,210,14,0,0,1,4, 
  15,1,210,14,0,0,17,1,116,10,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0, 
  0,0,1,0,17,1,210,14,0,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,210,14,0,0,17,1,55,15,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,210,14,0,0,1,2,21,1,39,0,0, 
  0,192,38,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,89,1,0,0,255,255,255,255,17,0,0,0, 
  4,0,0,0,61,104,9,129,113,8,6,128,114,0,70,129,131,120,4,128,109,184,7,131,37,208,9,128,111,152,6,128,130,224,4,128,137,16,4,128,121,112,197,127,74,216,72,128,138,168,3,128,140,64,3,128,13,56,202,124, 
  110,40,7,128,79,72,200,125,141,176,2,128,19,140,0,0,0,145,1,0,0,1,0,17,1,106,15,0,0,1,15,1,106,15,0,0,17,1,8,38,0,0,1,15,1,106,15,0,0,17,1,63,34,0,0,1,15,1,106,15, 
  0,0,17,1,187,33,0,0,1,15,1,106,15,0,0,17,1,26,27,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,106,15,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,106,15,0,0,1,1,19, 
  138,0,0,0,139,1,0,0,1,0,17,1,106,15,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,106,15,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,106,15,0,0,1,19,74,0,0,0,206,0, 
  0,0,1,0,17,1,106,15,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,106,15,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,106,15,0,0,1,15,1,106,15,0,0,17,1,247,16,0,0,1, 
  15,1,106,15,0,0,17,1,196,16,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,106,15,0,0,1,2,21,1,39,0,0,0,5,40,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,79,248, 
  0,128,8,4,17,1,206,8,0,0,1,19,13,0,0,0,34,0,0,0,1,0,1,21,1,39,0,0,0,9,41,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,140,240,0,128,4,17,1,42,17,0,0, 
  1,8,19,140,0,0,0,144,1,0,0,1,0,1,21,1,186,0,0,0,43,42,3,0,10,0,0,0,3,0,0,0,40,240,68,129,1,208,129,128,2,208,1,128,41,88,68,129,76,232,3,128,112,8,3,128,110,120,3,128, 
  31,96,133,128,129,112,2,128,135,216,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,51,19,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,51,19,0,0,1,4,15,1,51,19,0,0,17,1, 
  185,242,0,0,1,4,15,1,51,19,0,0,17,1,86,18,0,0,1,4,15,1,51,19,0,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,51,19,0,0,1,4,15,1,51,19,0,0,17, 
  1,229,17,0,0,1,4,15,1,51,19,0,0,17,1,116,10,0,0,1,2,21,1,50,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0,0,101,0, 
  0,0,1,0,17,1,24,18,0,0,1,2,21,0,61,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,36,224,1,128,37,80,65,128,65,240,0,128,19,36,0,0,0,100,0,0,0,2,0,1,19,65,0,0,0,179, 
  0,0,0,1,0,17,1,24,18,0,0,1,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1, 
  0,17,1,155,18,0,0,1,4,15,1,155,18,0,0,17,1,116,10,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1, 
  128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,155,18,0,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,155,18,0,0,17,1,0,19,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,155,18, 
  0,0,1,2,21,1,39,0,0,0,28,43,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,94,1,0, 
  0,255,255,255,255,16,0,0,0,4,0,0,0,61,0,73,128,109,80,135,129,130,16,5,128,131,128,4,128,36,208,9,128,37,104,9,128,111,48,70,129,141,136,3,128,142,32,3,128,121,160,5,128,74,112,8,128,143,144,2, 
  128,140,24,4,128,13,96,202,124,110,192,134,126,79,224,199,125,19,142,0,0,0,148,1,0,0,1,0,17,1,51,19,0,0,1,15,1,51,19,0,0,17,1,255,23,0,0,1,19,140,0,0,0,145,1,0,0,1,0,17, 
  1,51,19,0,0,1,15,1,51,19,0,0,17,1,248,20,0,0,1,19,143,0,0,0,150,1,0,0,1,0,17,1,51,19,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,51,19,0,0,1,19,109,0,0,0, 
  56,1,0,0,1,0,17,1,51,19,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,51,19,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,51,19,0,0,1,19,74,0,0,0,206,0,0,0,1,0, 
  17,1,51,19,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,51,19,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,51,19,0,0,1,15,1,51,19,0,0,17,1,197,20,0,0,1,15,1,51,19, 
  0,0,17,1,146,20,0,0,1,19,143,0,0,0,151,1,0,0,1,0,17,1,51,19,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,51,19,0,0,1,2,21,1,39,0,0,0,198,43,3,0,3,0,0,0, 
  1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,39,0,0,0,71,44,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1, 
  48,1,128,140,240,0,128,4,17,1,42,17,0,0,1,8,19,140,0,0,0,144,1,0,0,1,0,1,21,1,85,0,0,0,200,44,3,0,6,0,0,0,2,0,0,0,136,32,2,128,1,160,130,128,2,160,2,128,25,184, 
  65,128,33,80,65,128,137,96,2,128,4,19,131,0,0,0,117,1,0,0,2,0,1,4,19,131,0,0,0,116,1,0,0,2,0,1,4,17,1,172,22,0,0,1,4,17,1,89,21,0,0,1,8,19,131,0,0,0,124,1, 
  0,0,1,0,1,21,1,108,0,0,0,61,45,3,0,6,0,0,0,2,0,0,0,32,248,2,129,1,80,1,129,2,80,1,128,135,88,1,128,112,136,2,128,129,240,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0, 
  17,1,198,21,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,198,21,0,0,1,4,15,1,198,21,0,0,17,1,185,242,0,0,1,4,19,131,0,0,0,120,1,0,0,3,0,1,2,21,0,101,0,0,0, 
  255,255,255,255,5,0,0,0,2,0,0,0,121,200,1,128,109,192,194,127,130,56,1,128,111,88,66,128,131,48,1,128,1,19,109,0,0,0,57,1,0,0,1,0,17,1,198,21,0,0,1,19,109,0,0,0,56,1,0,0, 
  1,0,17,1,198,21,0,0,1,15,1,198,21,0,0,17,1,108,22,0,0,1,15,1,198,21,0,0,17,1,44,22,0,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,41,176,0,128,4,19, 
  131,0,0,0,118,1,0,0,4,0,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,41,176, 
  0,128,4,19,131,0,0,0,119,1,0,0,4,0,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,108,0,0,0,61,45,3,0,6,0,0,0,2,0, 
  0,0,32,248,2,129,1,80,1,129,2,80,1,128,135,88,1,128,112,136,2,128,129,240,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,25,23,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1, 
  25,23,0,0,1,4,15,1,25,23,0,0,17,1,185,242,0,0,1,4,19,131,0,0,0,123,1,0,0,3,0,1,2,21,0,101,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,121,200,1,128,109,192,194,127,130, 
  56,1,128,111,88,66,128,131,48,1,128,1,19,109,0,0,0,57,1,0,0,1,0,17,1,25,23,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,25,23,0,0,1,15,1,25,23,0,0,17,1,191,23,0,0, 
  1,15,1,25,23,0,0,17,1,127,23,0,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,41,176,0,128,4,19,131,0,0,0,121,1,0,0,4,0,14,1,21,9,27,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,41,176,0,128,4,19,131,0,0,0,122,1,0,0,4,0,14,1,21,9,27,0,0, 
  0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,64,65,128,62,208,0,128,4,19,141,0,0,0,147,1,0,0,4, 
  0,14,1,4,17,1,75,24,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,186,0,0,0,43,42,3,0,10,0,0,0,3,0,0,0,40,240,68, 
  129,1,208,129,128,2,208,1,128,41,88,68,129,76,232,3,128,112,8,3,128,110,120,3,128,31,96,133,128,129,112,2,128,135,216,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,6,25,0,0,1,4,19,121, 
  0,0,0,104,1,0,0,1,0,17,1,6,25,0,0,1,4,15,1,6,25,0,0,17,1,185,242,0,0,1,4,15,1,6,25,0,0,17,1,86,18,0,0,1,4,15,1,6,25,0,0,17,1,40,12,0,0,1,4,19, 
  37,0,0,0,101,0,0,0,1,0,17,1,6,25,0,0,1,4,15,1,6,25,0,0,17,1,229,17,0,0,1,4,15,1,6,25,0,0,17,1,116,10,0,0,1,2,21,0,76,1,0,0,255,255,255,255,16,0,0,0, 
  4,0,0,0,61,112,72,128,109,192,134,129,130,128,4,128,131,240,3,128,36,64,9,128,37,216,8,128,111,160,69,129,141,248,2,128,142,240,2,128,121,16,5,128,74,224,7,128,143,144,2,128,140,136,3,128,13,208,201,124, 
  110,48,134,126,79,80,199,125,19,142,0,0,0,149,1,0,0,3,0,1,1,19,140,0,0,0,145,1,0,0,1,0,17,1,6,25,0,0,1,15,1,6,25,0,0,17,1,185,26,0,0,1,19,143,0,0,0,150,1,0, 
  0,1,0,17,1,6,25,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,6,25,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,6,25,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,6, 
  25,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,6,25,0,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,6,25,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,6,25,0,0,1,19,140, 
  0,0,0,146,1,0,0,1,0,17,1,6,25,0,0,1,15,1,6,25,0,0,17,1,134,26,0,0,1,15,1,6,25,0,0,17,1,83,26,0,0,1,19,143,0,0,0,151,1,0,0,1,0,17,1,6,25,0,0,1, 
  19,61,0,0,0,166,0,0,0,1,0,17,1,6,25,0,0,1,2,21,1,39,0,0,0,198,43,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13, 
  0,0,0,34,0,0,0,1,0,1,21,1,39,0,0,0,71,44,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,140,248,0,128,8,4,17,1,42,17,0,0,1,19,140,0,0,0,144,1,0,0,1,0, 
  1,21,1,85,0,0,0,200,44,3,0,6,0,0,0,2,0,0,0,136,96,2,128,1,160,130,128,2,160,2,128,25,248,65,128,33,144,65,128,137,80,1,128,4,17,1,89,21,0,0,1,4,19,131,0,0,0,117,1,0, 
  0,2,0,1,4,19,131,0,0,0,116,1,0,0,2,0,1,4,17,1,172,22,0,0,1,8,19,131,0,0,0,124,1,0,0,1,0,1,21,1,69,0,0,0,199,45,3,0,5,0,0,0,2,0,0,0,120,112,1,128, 
  1,32,2,128,2,32,130,128,123,48,1,128,10,176,1,128,4,17,1,178,32,0,0,1,4,17,1,189,30,0,0,1,4,15,1,224,29,0,0,17,1,107,27,0,0,1,8,19,113,0,0,0,92,1,0,0,1,0,1,21, 
  1,86,0,0,0,202,46,3,0,6,0,0,0,2,0,0,0,39,216,65,129,1,80,1,128,2,80,129,128,11,72,66,127,138,152,1,128,139,88,1,128,8,4,17,1,161,29,0,0,1,4,17,1,99,28,0,0,1,4,15, 
  1,250,27,0,0,17,1,194,27,0,0,1,4,19,134,0,0,0,132,1,0,0,2,0,1,2,21,1,44,0,0,0,119,47,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,138,248,0,128,8,4,19,135, 
  0,0,0,135,1,0,0,2,0,1,19,135,0,0,0,136,1,0,0,1,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,56,1,128,135,208,0,128,15,1,250,27,0,0,17,1,35,28,0,0, 
  1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19,134,0,0,0,130,1,0,0,3,0,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0, 
  128,5,208,0,128,8,2,21,7,53,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,208,0,128,125,64,1,128,4,15,1,56,29,0,0,17,1,180,28,0,0,1,4,19,134,0,0,0,131,1,0,0,3,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,56,0,0,0,203,47,3,0,4,0,0,0,2,0,0,0,138,88,1,128,1,80,1,128,2,80,129,127,139,16, 
  1,128,4,17,1,248,28,0,0,1,8,4,19,135,0,0,0,135,1,0,0,2,0,1,19,135,0,0,0,136,1,0,0,1,0,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19, 
  134,0,0,0,133,1,0,0,5,0,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,56, 
  1,128,135,208,0,128,15,1,56,29,0,0,17,1,97,29,0,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19,134,0,0,0,129,1,0,0,4,0,14,1,21,9,27, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,7,35,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19,134,0,0,0,134,1,0,0,3,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,224,29,0,0, 
  17,1,9,30,0,0,1,1,2,21,1,51,0,0,0,43,48,3,0,4,0,0,0,2,0,0,0,120,80,1,128,1,144,1,128,2,144,1,128,123,16,1,128,4,17,1,131,30,0,0,1,4,17,1,73,30,0,0,1,8, 
  19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,45,0,0,0,226,48,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240,0,128,4,19,113,0,0,0,91,1,0,0,4,0,14,1,8,19,113, 
  0,0,0,85,1,0,0,3,0,14,1,21,1,45,0,0,0,142,49,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,120,248,0,128,8,4,19,113,0,0,0,90,1,0,0,4,0,14,1,19,113,0,0, 
  0,89,1,0,0,3,0,14,1,21,1,57,0,0,0,57,50,3,0,4,0,0,0,2,0,0,0,10,16,1,128,1,192,1,128,2,192,129,127,123,128,1,128,4,15,1,79,32,0,0,17,1,107,27,0,0,1,4,17,1, 
  2,31,0,0,1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,45,0,0,0,240,50,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,10,248,0,128,8,4,15,1,39,32,0,0,17,1,59,31, 
  0,0,1,19,113,0,0,0,87,1,0,0,3,0,1,21,1,86,0,0,0,202,46,3,0,6,0,0,0,2,0,0,0,39,216,65,129,1,80,1,128,2,80,129,128,11,72,66,127,138,152,1,128,139,88,1,128,8,4,17, 
  1,161,29,0,0,1,4,17,1,146,31,0,0,1,4,15,1,250,27,0,0,17,1,194,27,0,0,1,4,19,134,0,0,0,132,1,0,0,2,0,1,2,21,7,53,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0, 
  58,208,0,128,125,64,1,128,4,15,1,56,29,0,0,17,1,227,31,0,0,1,4,19,134,0,0,0,131,1,0,0,3,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0, 
  128,8,2,21,1,56,0,0,0,203,47,3,0,4,0,0,0,2,0,0,0,138,88,1,128,1,16,1,128,2,16,129,127,139,24,1,128,8,4,17,1,248,28,0,0,1,4,19,135,0,0,0,135,1,0,0,2,0,1,19, 
  135,0,0,0,136,1,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,48,1,128,19,113,0,0,0,86,1,0,0,4,0,1,1,2,21,0,40,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,79,32,0,0,17,1,120,32,0,0,1,1,2,21,1,45,0,0,0,226,48,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240, 
  0,128,4,19,113,0,0,0,88,1,0,0,4,0,14,1,8,19,113,0,0,0,78,1,0,0,3,0,14,1,21,1,57,0,0,0,155,51,3,0,4,0,0,0,2,0,0,0,120,136,1,128,1,128,1,128,2,128,65,128, 
  10,16,1,128,4,15,1,88,33,0,0,17,1,107,27,0,0,1,8,4,17,1,247,32,0,0,1,19,113,0,0,0,83,1,0,0,2,0,1,21,1,45,0,0,0,240,50,3,0,3,0,0,0,1,0,0,0,2,96,129, 
  128,1,96,1,128,10,240,0,128,4,15,1,48,33,0,0,17,1,107,27,0,0,1,8,19,113,0,0,0,81,1,0,0,3,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,48, 
  1,128,19,113,0,0,0,77,1,0,0,4,0,1,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,88,33,0,0,17,1,129,33,0,0,1,1,2,21,1,45, 
  0,0,0,142,49,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,120,240,0,128,4,19,113,0,0,0,84,1,0,0,4,0,14,1,8,19,113,0,0,0,79,1,0,0,3,0,14,1,21,1,65,0,0, 
  0,81,52,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,83,200,1,128,125,88,1,128,8,4,19,114,0,0,0,95,1,0,0,3,0,14,1,4,17,1,253,33,0,0,1, 
  2,21,1,53,0,0,0,166,52,3,0,5,0,0,0,2,0,0,0,124,48,1,128,1,160,1,128,2,160,129,128,7,160,1,128,6,160,1,128,4,19,114,0,0,0,93,1,0,0,4,0,14,1,8,19,114,0,0,0,94, 
  1,0,0,3,0,14,1,21,1,176,0,0,0,168,53,3,0,11,0,0,0,3,0,0,0,112,16,5,128,1,152,4,129,2,152,4,128,31,40,196,129,76,240,1,128,41,248,2,129,6,152,132,128,7,152,4,127,110,160,4, 
  128,129,144,3,128,135,96,2,128,4,15,1,251,34,0,0,17,1,40,12,0,0,1,4,19,130,0,0,0,115,1,0,0,1,0,17,1,251,34,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,251,34,0,0, 
  1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,251,34,0,0,1,4,15,1,251,34,0,0,17,1,116,10,0,0,1,8,4,15,1,251,34,0,0,17,1,141,14,0,0,1,4,15,1,251,34,0,0,17,1,185,242, 
  0,0,1,19,137,0,0,0,138,1,0,0,1,0,1,21,0,49,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,37,144,8,130,113,248,132,130,74,152,135,130,131,112,3,128,140,0,3,128,13,248,200,126,110,232,5, 
  128,79,8,199,128,61,40,72,128,109,120,70,129,111,88,5,128,121,104,4,128,130,216,67,128,138,104,3,128,141,112,2,128,19,140,0,0,0,145,1,0,0,1,0,17,1,251,34,0,0,1,15,1,251,34,0,0,17,1,167, 
  37,0,0,1,1,15,1,251,34,0,0,17,1,147,36,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,251,34,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,251,34,0,0,1,19,138,0,0,0,140, 
  1,0,0,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,251,34,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,251,34,0,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,251,34,0,0,1, 
  19,61,0,0,0,167,0,0,0,1,0,17,1,251,34,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,251,34,0,0,1,15,1,251,34,0,0,17,1,96,36,0,0,1,15,1,251,34,0,0,17,1,45,36,0, 
  0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,251,34,0,0,1,2,21,1,39,0,0,0,5,40,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8, 
  19,13,0,0,0,34,0,0,0,1,0,1,21,1,39,0,0,0,9,41,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,140,240,0,128,4,17,1,42,17,0,0,1,8,19,140,0,0,0,144,1,0,0, 
  1,0,1,21,1,69,0,0,0,199,45,3,0,5,0,0,0,2,0,0,0,120,160,1,128,1,32,2,128,2,32,130,128,123,224,1,128,10,48,1,128,4,15,1,224,29,0,0,17,1,107,27,0,0,1,4,17,1,41,37, 
  0,0,1,4,17,1,228,36,0,0,1,8,19,113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,155,51,3,0,4,0,0,0,2,0,0,0,120,128,1,128,1,192,1,128,2,192,65,128,10,16,1,128,4,15, 
  1,88,33,0,0,17,1,107,27,0,0,1,4,17,1,247,32,0,0,1,8,19,113,0,0,0,83,1,0,0,2,0,1,21,1,57,0,0,0,57,50,3,0,4,0,0,0,2,0,0,0,10,16,1,128,1,192,1,128,2, 
  192,129,127,123,128,1,128,4,15,1,79,32,0,0,17,1,107,27,0,0,1,4,17,1,110,37,0,0,1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,45,0,0,0,240,50,3,0,3,0,0,0,1,0,0,0, 
  2,96,129,128,1,96,1,128,10,240,0,128,4,15,1,39,32,0,0,17,1,59,31,0,0,1,8,19,113,0,0,0,87,1,0,0,3,0,1,21,1,85,0,0,0,84,54,3,0,6,0,0,0,2,0,0,0,136,184,1, 
  128,1,96,130,128,2,96,2,128,25,248,65,128,33,80,65,128,137,104,2,128,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,172,22,0,0,1,4,19,131,0,0,0,116,1,0,0,2,0,1,8,4,17,1,89, 
  21,0,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,85,0,0,0,84,54,3,0,6,0,0,0,2,0,0,0,136,80,1,128,1,160,130,128,2,160,2,128,25,56,66,128,33,144,65,128,137,248,1,128,4,17, 
  1,172,22,0,0,1,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,89,21,0,0,1,4,19,131,0,0,0,116,1,0,0,2,0,1,8,19,131,0,0,0,124,1,0,0,1,0,1,21,1,68,0,0,0,92, 
  38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,174,38,0,0,1,4,15,1,174,38,0,0,17,1,116,10,0,0, 
  1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,174,38,0,0,1,19, 
  110,0,0,0,58,1,0,0,2,0,1,15,1,174,38,0,0,17,1,19,39,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,174,38,0,0,1,2,21,1,39,0,0,0,45,55,3,0,3,0,0,0,1,0,0, 
  0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,149,1,0,0,255,255,255,255,20,0,0,0,4,0,0,0,61,64,11,129,113,176,6,128, 
  114,32,134,131,115,144,133,131,77,232,137,128,37,176,11,128,109,96,72,131,110,208,7,128,111,64,7,128,121,0,5,128,74,176,10,128,75,80,10,128,60,168,139,129,13,24,204,124,78,128,73,126,79,240,72,126,130,112,4,128, 
  131,8,4,128,140,160,3,128,141,16,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,70,39,0,0,1,15,1,70,39,0,0,17,1,100,47,0,0,1,15,1,70,39,0,0,17,1,206,46,0,0,1,19,109,0,0, 
  0,57,1,0,0,1,0,17,1,70,39,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,70,39,0,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,70,39,0,0,1,19,77,0,0,0,214,0,0,0,1, 
  0,17,1,70,39,0,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,70,39,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,70,39,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,70,39,0, 
  0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,70,39,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,70,39,0,0,1,15,1,70,39,0,0,17,1,51,50,0,0,1,15,1,70,39,0,0,17,1,15, 
  41,0,0,1,19,60,0,0,0,164,0,0,0,3,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,70,39,0,0,1,15,1,70,39,0,0,17,1,220,40,0,0,1,1,15,1,70,39,0,0,17,1,155,8,0,0, 
  1,19,61,0,0,0,166,0,0,0,1,0,17,1,70,39,0,0,1,2,21,1,39,0,0,0,92,56,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,140,240,0,128,4,17,1,42,17,0,0,1,8,19, 
  140,0,0,0,144,1,0,0,1,0,1,21,1,217,0,0,0,140,57,3,0,13,0,0,0,3,0,0,0,112,24,4,128,1,40,6,129,2,40,134,129,31,32,197,129,76,160,2,128,41,48,134,129,6,40,198,128,7,40,6, 
  127,82,16,3,128,110,48,2,128,127,144,133,128,129,128,3,128,135,136,4,128,4,15,1,244,41,0,0,17,1,105,38,0,0,1,4,15,1,244,41,0,0,17,1,40,12,0,0,1,4,15,1,244,41,0,0,17,1,220,13, 
  0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,244,41,0,0,1,4,15,1,244,41,0,0,17,1,185,242,0,0,1,4,19,130,0,0,0,115,1,0,0,1,0,17,1,244,41,0,0,1,4,15,1,244,41, 
  0,0,17,1,116,10,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,244,41,0,0,1,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,244,41,0,0,1,19,78,0,0,0,219,0,0,0,1,0,1, 
  21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,80,5,129,113,72,10,128,114,184,69,130,115,200,67,131,77,184,132,128,37,16,7,128,109,40,201,130,110,120,7,128,111,8,8,128,121,40,4,128,74,24, 
  6,128,130,56,3,128,140,208,2,128,13,152,200,124,78,184,68,126,79,192,68,126,131,168,6,128,141,184,9,128,15,1,244,41,0,0,17,1,109,46,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,244,41,0,0, 
  1,19,78,0,0,0,217,0,0,0,2,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,244,41,0,0,1,1,19,61,0,0,0,167,0,0,0,1,0,17,1,244,41,0,0,1,15,1,244,41,0,0,17,1,58,46, 
  0,0,1,19,77,0,0,0,216,0,0,0,2,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,244,41,0,0,1,15,1,244,41,0,0,17,1,74,43,0,0,1,15,1,244,41,0,0,17,1,155,8,0,0,1,19, 
  74,0,0,0,207,0,0,0,1,0,17,1,244,41,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,244,41,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,244,41,0,0,1,19,74,0,0,0,206,0, 
  0,0,1,0,17,1,244,41,0,0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,244,41,0,0,1,19,77,0,0,0,215,0,0,0,2,0,1,2,21,1,69,0,0,0,100,58,3,0,5,0,0,0,2,0,0,0, 
  120,224,1,128,1,32,2,128,2,32,130,128,123,48,1,128,10,112,1,128,4,17,1,89,45,0,0,1,4,15,1,124,44,0,0,17,1,107,27,0,0,1,4,17,1,155,43,0,0,1,8,19,113,0,0,0,92,1,0,0, 
  1,0,1,21,1,57,0,0,0,82,59,3,0,4,0,0,0,2,0,0,0,10,16,1,128,1,192,1,128,2,192,129,127,123,128,1,128,4,15,1,25,44,0,0,17,1,59,31,0,0,1,4,17,1,224,43,0,0,1,8, 
  19,113,0,0,0,82,1,0,0,2,0,1,21,1,45,0,0,0,53,60,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,10,240,0,128,4,15,1,39,32,0,0,17,1,107,27,0,0,1,8,19,113,0, 
  0,0,87,1,0,0,3,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,25,44,0,0,17,1,66,44,0,0,1,1,2,21,1,45,0,0,0,12,61,3,0, 
  3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240,0,128,4,19,113,0,0,0,88,1,0,0,4,0,14,1,8,19,113,0,0,0,78,1,0,0,3,0,14,1,21,0,40,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,124,44,0,0,17,1,165,44,0,0,1,1,2,21,1,51,0,0,0,228,61,3,0,4,0,0,0,2,0,0,0,120,16,1,128,1,144,1,128,2,144,1,128,123, 
  80,1,128,4,17,1,31,45,0,0,1,4,17,1,229,44,0,0,1,8,19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,45,0,0,0,199,62,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,120, 
  248,0,128,8,4,19,113,0,0,0,90,1,0,0,4,0,14,1,19,113,0,0,0,89,1,0,0,3,0,14,1,21,1,45,0,0,0,12,61,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240,0, 
  128,4,19,113,0,0,0,91,1,0,0,4,0,14,1,8,19,113,0,0,0,85,1,0,0,3,0,14,1,21,1,57,0,0,0,158,63,3,0,4,0,0,0,2,0,0,0,120,128,1,128,1,192,1,128,2,192,65,128,10, 
  16,1,128,4,15,1,215,45,0,0,17,1,107,27,0,0,1,4,17,1,158,45,0,0,1,8,19,113,0,0,0,83,1,0,0,2,0,1,21,1,45,0,0,0,53,60,3,0,3,0,0,0,1,0,0,0,2,240,128,128, 
  1,240,0,128,10,248,0,128,8,4,15,1,48,33,0,0,17,1,107,27,0,0,1,19,113,0,0,0,81,1,0,0,3,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1, 
  128,15,1,215,45,0,0,17,1,0,46,0,0,1,1,2,21,1,45,0,0,0,199,62,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,120,248,0,128,8,4,19,113,0,0,0,84,1,0,0,4,0,14, 
  1,19,113,0,0,0,79,1,0,0,3,0,14,1,21,1,39,0,0,0,92,56,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,140,240,0,128,4,17,1,42,17,0,0,1,8,19,140,0,0,0,144,1, 
  0,0,1,0,1,21,1,85,0,0,0,128,64,3,0,6,0,0,0,2,0,0,0,136,248,1,128,1,56,130,128,2,56,2,128,25,64,66,128,33,80,65,128,137,184,1,128,4,19,131,0,0,0,117,1,0,0,2,0,1, 
  4,17,1,89,21,0,0,1,4,17,1,172,22,0,0,1,8,4,19,131,0,0,0,116,1,0,0,2,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,69,0,0,0,100,58,3,0,5,0,0,0,2,0,0,0, 
  120,160,1,128,1,224,1,128,2,224,129,128,123,232,1,128,10,48,1,128,4,15,1,124,44,0,0,17,1,107,27,0,0,1,4,17,1,155,43,0,0,1,8,4,17,1,31,47,0,0,1,19,113,0,0,0,92,1,0,0, 
  1,0,1,21,1,57,0,0,0,158,63,3,0,4,0,0,0,2,0,0,0,120,136,1,128,1,128,1,128,2,128,65,128,10,16,1,128,4,15,1,215,45,0,0,17,1,107,27,0,0,1,8,4,17,1,158,45,0,0,1, 
  19,113,0,0,0,83,1,0,0,2,0,1,21,1,85,0,0,0,128,64,3,0,6,0,0,0,2,0,0,0,136,80,1,128,1,56,130,128,2,56,2,128,25,64,66,128,33,144,65,128,137,248,1,128,4,17,1,172,22,0, 
  0,1,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,89,21,0,0,1,8,4,19,131,0,0,0,116,1,0,0,2,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,39,0,0,0,92,56,3,0,3, 
  0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,140,248,0,128,8,4,17,1,42,17,0,0,1,19,140,0,0,0,144,1,0,0,1,0,1,21,1,217,0,0,0,140,57,3,0,13,0,0,0,3,0,0,0,112,176, 
  4,128,1,40,6,129,2,40,134,129,31,32,197,129,76,208,3,128,41,144,133,129,6,40,198,128,7,40,6,127,82,200,2,128,110,64,4,128,127,56,131,128,129,48,2,128,135,48,6,128,4,19,121,0,0,0,104,1,0,0, 
  1,0,17,1,221,48,0,0,1,4,15,1,221,48,0,0,17,1,220,13,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,221,48,0,0,1,4,15,1,221,48,0,0,17,1,40,12,0,0,1,4,15,1,221, 
  48,0,0,17,1,105,38,0,0,1,4,15,1,221,48,0,0,17,1,185,242,0,0,1,4,15,1,221,48,0,0,17,1,116,10,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,221,48,0,0,1,8,4,19, 
  130,0,0,0,115,1,0,0,1,0,17,1,221,48,0,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,96,7,129,113,72,10,128,114,0,71,130,115, 
  128,68,131,77,112,133,128,37,192,8,128,109,96,195,130,110,200,7,128,111,184,9,128,121,208,2,128,74,240,3,128,130,112,6,128,140,88,8,128,13,224,196,124,78,112,69,126,79,120,69,126,131,8,6,128,141,40,9,128,19, 
  109,0,0,0,56,1,0,0,1,0,17,1,221,48,0,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,221,48,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,221,48,0,0,1,19,78,0,0,0,217,0, 
  0,0,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,221,48,0,0,1,1,19,61,0,0,0,167,0,0,0,1,0,17,1,221,48,0,0,1,15,1,221,48,0,0,17,1,74,43,0,0,1,19,109,0,0,0, 
  57,1,0,0,1,0,17,1,221,48,0,0,1,19,77,0,0,0,216,0,0,0,2,0,1,15,1,221,48,0,0,17,1,58,46,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,221,48,0,0,1,15,1,221,48, 
  0,0,17,1,109,46,0,0,1,15,1,221,48,0,0,17,1,155,8,0,0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,221,48,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,221,48,0,0,1,19,77, 
  0,0,0,215,0,0,0,2,0,1,2,21,1,53,0,0,0,133,65,3,0,5,0,0,0,2,0,0,0,6,160,1,128,1,160,193,128,2,160,129,127,7,160,1,128,45,48,1,128,4,15,1,63,239,0,0,17,1,116,50, 
  0,0,1,8,19,75,0,0,0,210,0,0,0,1,0,1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,120,9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112, 
  68,131,7,112,68,131,88,248,12,128,89,136,12,128,10,120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88,10,128,31,8,208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24, 
  12,128,95,232,73,129,97,8,137,129,98,152,136,129,100,184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232,4,128,130,120,4,128,8,4,15,1,120,215,0,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104, 
  1,0,0,1,0,17,1,120,215,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,120,215,0,0,1,4,15,1,120,215,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,120, 
  215,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,120,215,0,0,1,4,15,1,120,215,0,0,17,1,18,214,0,0,1,4,15,1,120,215,0,0,17,1,159,213,0,0,1,4,15,1,120,215,0,0,17,1, 
  44,213,0,0,1,4,15,1,120,215,0,0,17,1,185,212,0,0,1,4,15,1,120,215,0,0,17,1,70,212,0,0,1,4,15,1,120,215,0,0,17,1,211,211,0,0,1,4,15,1,120,215,0,0,17,1,96,211,0,0, 
  1,4,15,1,120,215,0,0,17,1,237,210,0,0,1,4,15,1,120,215,0,0,17,1,122,210,0,0,1,4,15,1,120,215,0,0,17,1,7,210,0,0,1,4,15,1,120,215,0,0,17,1,148,209,0,0,1,4,15,1, 
  120,215,0,0,17,1,33,209,0,0,1,4,15,1,120,215,0,0,17,1,174,208,0,0,1,4,15,1,120,215,0,0,17,1,59,208,0,0,1,4,15,1,120,215,0,0,17,1,200,207,0,0,1,4,15,1,120,215,0,0, 
  17,1,151,205,0,0,1,4,15,1,120,215,0,0,17,1,206,174,0,0,1,4,15,1,120,215,0,0,17,1,57,146,0,0,1,4,15,1,120,215,0,0,17,1,47,141,0,0,1,4,15,1,120,215,0,0,17,1,126,114, 
  0,0,1,4,15,1,120,215,0,0,17,1,146,52,0,0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128, 
  86,8,141,132,87,152,12,128,40,200,206,130,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129, 
  97,56,136,129,98,200,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,150,54,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0, 
  17,1,150,54,0,0,1,4,15,1,150,54,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,150,54,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,150,54,0,0,1,4, 
  15,1,150,54,0,0,17,1,18,214,0,0,1,4,15,1,150,54,0,0,17,1,159,213,0,0,1,4,15,1,150,54,0,0,17,1,44,213,0,0,1,4,15,1,150,54,0,0,17,1,185,212,0,0,1,4,15,1,150,54, 
  0,0,17,1,70,212,0,0,1,4,15,1,150,54,0,0,17,1,211,211,0,0,1,4,15,1,150,54,0,0,17,1,96,211,0,0,1,4,15,1,150,54,0,0,17,1,237,210,0,0,1,4,15,1,150,54,0,0,17,1, 
  122,210,0,0,1,4,15,1,150,54,0,0,17,1,7,210,0,0,1,4,15,1,150,54,0,0,17,1,148,209,0,0,1,4,15,1,150,54,0,0,17,1,33,209,0,0,1,4,15,1,150,54,0,0,17,1,174,208,0,0, 
  1,4,15,1,150,54,0,0,17,1,59,208,0,0,1,4,15,1,150,54,0,0,17,1,200,207,0,0,1,4,15,1,150,54,0,0,17,1,151,205,0,0,1,4,15,1,150,54,0,0,17,1,206,174,0,0,1,4,15,1, 
  150,54,0,0,17,1,57,146,0,0,1,4,15,1,150,54,0,0,17,1,229,17,0,0,1,4,15,1,150,54,0,0,17,1,47,141,0,0,1,4,15,1,150,54,0,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0, 
  255,255,255,255,17,0,0,0,4,0,0,0,64,40,198,130,81,64,3,128,34,48,133,130,68,184,134,130,36,0,201,127,85,176,66,130,86,104,73,130,87,80,7,128,120,152,5,128,9,208,195,129,10,184,6,128,80,224,7,128, 
  82,248,9,128,84,112,8,128,117,160,4,128,118,56,4,128,121,192,6,128,19,64,0,0,0,176,0,0,0,1,0,17,1,150,54,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,150,54,0,0,1,15,1,150,54, 
  0,0,17,1,62,114,0,0,1,15,1,150,54,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,150,54,0,0,1,15,1,150,54,0,0,17,1,72,92,0,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,150,54,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,150,54,0,0,1,1,19,87,0,0,0,7,1,0,0,1,0,17,1,150,54,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17, 
  1,150,54,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,150,54,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,150,54,0,0,1,15,1,150,54,0,0,17,1,232,55,0,0,1,19,64,0,0,0, 
  177,0,0,0,1,0,17,1,150,54,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,150,54,0,0,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,64,1,128,125,208,0,128,4,19, 
  10,0,0,0,30,0,0,0,3,0,14,1,4,17,1,52,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,104,0,0,0,222,74,3,0,6,0, 
  0,0,2,0,0,0,41,168,2,129,1,80,193,127,2,80,65,128,54,56,130,128,69,200,1,128,70,88,1,128,8,4,15,1,59,59,0,0,17,1,200,58,0,0,1,4,15,1,59,59,0,0,17,1,85,58,0,0,1,4, 
  15,1,59,59,0,0,17,1,157,56,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,59,59,0,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15,1,45,58, 
  0,0,17,1,232,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,66,0,0,0,184,0,0,0,1,0,1,21,1,50,0,0,0,59,77,3,0,3,0, 
  0,0,1,0,0,0,2,240,128,128,1,240,0,128,72,248,0,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,27,57,0,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,88,208,0, 
  128,69,216,0,128,1,15,1,27,57,0,0,17,1,68,57,0,0,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,64,65,128,62,208,0,128,4,19,88,0,0,0,9,1,0,0,3,0,14,1, 
  4,17,1,144,57,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,50,0,0,0,59,77,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240, 
  0,128,72,248,0,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,195,57,0,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,88,208,0,128,69,216,0,128,1,15,1,195,57,0,0, 
  17,1,236,57,0,0,1,2,21,7,37,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,62,176,0,128,4,19,88,0,0,0,8,1,0,0,5,0,14,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1, 
  0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,66,48,65,128,88,208,0,128,19,66,0,0,0,181,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255, 
  255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15,1,160,58,0,0,17,1,232,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,66,0,0, 
  0,183,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,66,48,65,128,88,208,0,128,19,66,0,0,0,180,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0, 
  0,0,0,0,0,0,60,176,0,128,4,15,1,19,59,0,0,17,1,232,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,66,0,0,0,185,0,0,0, 
  1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,66,48,65,128,88,208,0,128,19,66,0,0,0,182,0,0,0,2,0,1,1,2,21,0,123,0,0,0,255,255,255,255,6,0,0,0,2,0,0, 
  0,35,216,2,128,37,72,194,128,10,208,195,128,11,104,67,127,65,224,1,128,66,80,1,128,19,35,0,0,0,99,0,0,0,1,0,17,1,59,59,0,0,1,15,1,59,59,0,0,17,1,210,60,0,0,1,19,65,0,0, 
  0,179,0,0,0,1,0,17,1,59,59,0,0,1,19,11,0,0,0,31,0,0,0,1,0,17,1,59,59,0,0,1,15,1,59,59,0,0,17,1,183,59,0,0,1,1,2,21,7,49,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,44,72,1,128,125,208,0,128,4,19,10,0,0,0,29,0,0,0,5,0,14,14,1,4,17,1,4,60,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208, 
  0,128,8,2,21,1,104,0,0,0,222,74,3,0,6,0,0,0,2,0,0,0,41,168,2,129,1,80,193,127,2,80,65,128,54,56,130,128,69,200,1,128,70,88,1,128,8,4,15,1,109,60,0,0,17,1,200,58,0,0, 
  1,4,15,1,109,60,0,0,17,1,85,58,0,0,1,4,15,1,109,60,0,0,17,1,157,56,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,109,60,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5, 
  0,0,0,2,0,0,0,35,184,2,128,37,40,194,128,66,48,1,128,11,24,67,127,65,192,1,128,19,35,0,0,0,99,0,0,0,1,0,17,1,109,60,0,0,1,15,1,109,60,0,0,17,1,210,60,0,0,1,19,65, 
  0,0,0,179,0,0,0,1,0,17,1,109,60,0,0,1,19,11,0,0,0,32,0,0,0,3,0,1,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,4,17,1,23,61,0,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,35,0,0,0,98,0,0,0,1,0,1,21,1,3,2,0,0,112,77,3,0,28,0,0,0,4,0,0,0,96,168,136, 
  134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,88,40,12,128,89,184,11,128,10,168,79,130,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,56,79, 
  129,34,200,142,128,81,88,14,129,82,232,13,129,90,72,11,128,95,24,73,129,97,56,136,129,98,200,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0, 
  1,0,17,1,124,68,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,124,68,0,0,1,4,15,1,124,68,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,124,68,0,0, 
  1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,124,68,0,0,1,4,15,1,124,68,0,0,17,1,18,214,0,0,1,4,15,1,124,68,0,0,17,1,159,213,0,0,1,4,15,1,124,68,0,0,17,1,44,213,0, 
  0,1,4,15,1,124,68,0,0,17,1,185,212,0,0,1,4,15,1,124,68,0,0,17,1,70,212,0,0,1,4,15,1,124,68,0,0,17,1,211,211,0,0,1,4,15,1,124,68,0,0,17,1,96,211,0,0,1,4,15, 
  1,124,68,0,0,17,1,237,210,0,0,1,4,15,1,124,68,0,0,17,1,122,210,0,0,1,4,15,1,124,68,0,0,17,1,7,210,0,0,1,4,15,1,124,68,0,0,17,1,148,209,0,0,1,4,15,1,124,68,0, 
  0,17,1,33,209,0,0,1,4,15,1,124,68,0,0,17,1,174,208,0,0,1,4,15,1,124,68,0,0,17,1,59,208,0,0,1,4,15,1,124,68,0,0,17,1,200,207,0,0,1,4,15,1,124,68,0,0,17,1,151, 
  205,0,0,1,4,15,1,124,68,0,0,17,1,206,174,0,0,1,4,15,1,124,68,0,0,17,1,57,146,0,0,1,4,15,1,124,68,0,0,17,1,114,63,0,0,1,4,15,1,124,68,0,0,17,1,126,114,0,0,1, 
  4,15,1,124,68,0,0,17,1,27,63,0,0,1,2,21,1,45,0,0,0,93,78,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,40,248,0,128,8,4,15,1,73,63,0,0,17,1,229,17,0,0,1, 
  2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,10,56,65,128,36,208,0,128,15,1,73,63,0,0,17,1,232,55,0,0,1,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0, 
  96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128, 
  31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1, 
  0,17,1,86,67,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,86,67,0,0,1, 
  4,19,87,0,0,0,4,1,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,17,1,18,214,0,0,1,4,15,1,86,67,0,0,17,1,159,213,0,0,1,4,15,1,86,67,0,0,17,1,44,213,0,0, 
  1,4,15,1,86,67,0,0,17,1,185,212,0,0,1,4,15,1,86,67,0,0,17,1,70,212,0,0,1,4,15,1,86,67,0,0,17,1,211,211,0,0,1,4,15,1,86,67,0,0,17,1,96,211,0,0,1,4,15,1, 
  86,67,0,0,17,1,237,210,0,0,1,4,15,1,86,67,0,0,17,1,122,210,0,0,1,4,15,1,86,67,0,0,17,1,7,210,0,0,1,4,15,1,86,67,0,0,17,1,148,209,0,0,1,4,15,1,86,67,0,0, 
  17,1,33,209,0,0,1,4,15,1,86,67,0,0,17,1,174,208,0,0,1,4,15,1,86,67,0,0,17,1,59,208,0,0,1,4,15,1,86,67,0,0,17,1,200,207,0,0,1,4,15,1,86,67,0,0,17,1,151,205, 
  0,0,1,4,15,1,86,67,0,0,17,1,206,174,0,0,1,4,15,1,86,67,0,0,17,1,57,146,0,0,1,4,15,1,86,67,0,0,17,1,100,65,0,0,1,4,15,1,86,67,0,0,17,1,126,114,0,0,1,2, 
  21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40, 
  11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144, 
  4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,86,67,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,17,1,133,214,0,0,1,4, 
  19,87,0,0,0,5,1,0,0,1,0,17,1,86,67,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,17,1,18,214,0,0,1,4,15,1,86,67,0,0,17,1, 
  159,213,0,0,1,4,15,1,86,67,0,0,17,1,44,213,0,0,1,4,15,1,86,67,0,0,17,1,185,212,0,0,1,4,15,1,86,67,0,0,17,1,70,212,0,0,1,4,15,1,86,67,0,0,17,1,211,211,0,0, 
  1,4,15,1,86,67,0,0,17,1,96,211,0,0,1,4,15,1,86,67,0,0,17,1,237,210,0,0,1,4,15,1,86,67,0,0,17,1,122,210,0,0,1,4,15,1,86,67,0,0,17,1,7,210,0,0,1,4,15,1, 
  86,67,0,0,17,1,148,209,0,0,1,4,15,1,86,67,0,0,17,1,33,209,0,0,1,4,15,1,86,67,0,0,17,1,174,208,0,0,1,4,15,1,86,67,0,0,17,1,59,208,0,0,1,4,15,1,86,67,0,0, 
  17,1,200,207,0,0,1,4,15,1,86,67,0,0,17,1,151,205,0,0,1,4,15,1,86,67,0,0,17,1,206,174,0,0,1,4,15,1,86,67,0,0,17,1,57,146,0,0,1,4,15,1,86,67,0,0,17,1,100,65, 
  0,0,1,4,15,1,86,67,0,0,17,1,126,114,0,0,1,2,21,0,37,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129, 
  86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,86,67,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,86, 
  67,0,0,1,15,1,86,67,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,177,0, 
  0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1, 
  86,67,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,86,67,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,86,67,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,19, 
  34,0,0,0,93,0,0,0,2,0,1,2,21,0,59,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,64,120,72,130,81,88,71,131,10,120,137,129,35,8,9,128,84,56,6,128,85,168,133,129,86,24,133,129,87,136, 
  4,128,34,16,137,128,80,232,7,129,82,200,6,128,117,248,3,128,118,144,3,128,120,0,3,128,121,112,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,124,68,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17, 
  1,124,68,0,0,1,15,1,124,68,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0, 
  177,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0,174,0,0,0,1,0, 
  17,1,124,68,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,124,68,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,124,68,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,124,68,0,0, 
  1,1,15,1,124,68,0,0,17,1,184,69,0,0,1,19,35,0,0,0,97,0,0,0,3,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,144,1,128,37,208,193,127,42,80,194,128,43,16, 
  66,128,47,144,2,128,94,80,1,128,4,17,1,249,87,0,0,1,4,17,1,94,84,0,0,1,4,17,1,219,80,0,0,1,4,17,1,64,77,0,0,1,4,17,1,189,73,0,0,1,4,17,1,58,70,0,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,35,0,0,0,96,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134, 
  1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129, 
  34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,44, 
  72,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,44,72,0,0,1,4,15,1,44,72,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,44,72,0,0,1,4,19,87,0, 
  0,0,4,1,0,0,1,0,17,1,44,72,0,0,1,4,15,1,44,72,0,0,17,1,18,214,0,0,1,4,15,1,44,72,0,0,17,1,159,213,0,0,1,4,15,1,44,72,0,0,17,1,44,213,0,0,1,4,15,1, 
  44,72,0,0,17,1,185,212,0,0,1,4,15,1,44,72,0,0,17,1,70,212,0,0,1,4,15,1,44,72,0,0,17,1,211,211,0,0,1,4,15,1,44,72,0,0,17,1,96,211,0,0,1,4,15,1,44,72,0,0, 
  17,1,237,210,0,0,1,4,15,1,44,72,0,0,17,1,122,210,0,0,1,4,15,1,44,72,0,0,17,1,7,210,0,0,1,4,15,1,44,72,0,0,17,1,148,209,0,0,1,4,15,1,44,72,0,0,17,1,33,209, 
  0,0,1,4,15,1,44,72,0,0,17,1,174,208,0,0,1,4,15,1,44,72,0,0,17,1,59,208,0,0,1,4,15,1,44,72,0,0,17,1,200,207,0,0,1,4,15,1,44,72,0,0,17,1,151,205,0,0,1,4, 
  15,1,44,72,0,0,17,1,206,174,0,0,1,4,15,1,44,72,0,0,17,1,57,146,0,0,1,4,15,1,44,72,0,0,17,1,114,63,0,0,1,4,15,1,44,72,0,0,17,1,126,114,0,0,1,2,21,0,38,1, 
  0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192, 
  2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,44,72,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,44,72,0,0,1,15,1,44,72,0,0,17,1,88,91,0,0,1,19,80,0,0,0, 
  221,0,0,0,1,0,17,1,44,72,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,44,72,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,44,72,0,0,1,19,64,0,0,0,176,0,0,0,1,0, 
  17,1,44,72,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,44,72,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,44,72,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,44,72,0,0, 
  1,19,64,0,0,0,172,0,0,0,1,0,17,1,44,72,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,44,72,0,0,1,15,1,44,72,0,0,17,1,83,73,0,0,1,2,21,7,66,0,0,0,255,255,255, 
  255,4,0,0,0,2,0,0,0,94,80,1,128,37,144,1,128,42,16,129,127,47,208,1,128,4,17,1,189,73,0,0,1,4,17,1,249,87,0,0,1,4,17,1,219,80,0,0,1,4,17,1,58,70,0,0,1,21,9,27, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1, 
  240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34, 
  168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,175,75, 
  0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,175,75,0,0,1,4,15,1,175,75,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,175,75,0,0,1,4,19,87,0,0, 
  0,4,1,0,0,1,0,17,1,175,75,0,0,1,4,15,1,175,75,0,0,17,1,18,214,0,0,1,4,15,1,175,75,0,0,17,1,159,213,0,0,1,4,15,1,175,75,0,0,17,1,44,213,0,0,1,4,15,1,175, 
  75,0,0,17,1,185,212,0,0,1,4,15,1,175,75,0,0,17,1,70,212,0,0,1,4,15,1,175,75,0,0,17,1,211,211,0,0,1,4,15,1,175,75,0,0,17,1,96,211,0,0,1,4,15,1,175,75,0,0,17, 
  1,237,210,0,0,1,4,15,1,175,75,0,0,17,1,122,210,0,0,1,4,15,1,175,75,0,0,17,1,7,210,0,0,1,4,15,1,175,75,0,0,17,1,148,209,0,0,1,4,15,1,175,75,0,0,17,1,33,209,0, 
  0,1,4,15,1,175,75,0,0,17,1,174,208,0,0,1,4,15,1,175,75,0,0,17,1,59,208,0,0,1,4,15,1,175,75,0,0,17,1,200,207,0,0,1,4,15,1,175,75,0,0,17,1,151,205,0,0,1,4,15, 
  1,175,75,0,0,17,1,206,174,0,0,1,4,15,1,175,75,0,0,17,1,57,146,0,0,1,4,15,1,175,75,0,0,17,1,114,63,0,0,1,4,15,1,175,75,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0, 
  0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2, 
  128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,175,75,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,175,75,0,0,1,15,1,175,75,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221, 
  0,0,0,1,0,17,1,175,75,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,175,75,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,175,75,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17, 
  1,175,75,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,175,75,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,175,75,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,175,75,0,0,1, 
  19,64,0,0,0,172,0,0,0,1,0,17,1,175,75,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,175,75,0,0,1,15,1,175,75,0,0,17,1,214,76,0,0,1,2,21,7,66,0,0,0,255,255,255,255, 
  4,0,0,0,2,0,0,0,94,208,1,128,37,80,1,128,42,144,129,127,47,16,1,128,4,17,1,58,70,0,0,1,4,17,1,219,80,0,0,1,4,17,1,189,73,0,0,1,4,17,1,249,87,0,0,1,21,9,27,0, 
  0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240, 
  3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168, 
  142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,50,79,0, 
  0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,50,79,0,0,1,4,15,1,50,79,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,50,79,0,0,1,4,19,87,0,0,0, 
  4,1,0,0,1,0,17,1,50,79,0,0,1,4,15,1,50,79,0,0,17,1,18,214,0,0,1,4,15,1,50,79,0,0,17,1,159,213,0,0,1,4,15,1,50,79,0,0,17,1,44,213,0,0,1,4,15,1,50,79, 
  0,0,17,1,185,212,0,0,1,4,15,1,50,79,0,0,17,1,70,212,0,0,1,4,15,1,50,79,0,0,17,1,211,211,0,0,1,4,15,1,50,79,0,0,17,1,96,211,0,0,1,4,15,1,50,79,0,0,17,1, 
  237,210,0,0,1,4,15,1,50,79,0,0,17,1,122,210,0,0,1,4,15,1,50,79,0,0,17,1,7,210,0,0,1,4,15,1,50,79,0,0,17,1,148,209,0,0,1,4,15,1,50,79,0,0,17,1,33,209,0,0, 
  1,4,15,1,50,79,0,0,17,1,174,208,0,0,1,4,15,1,50,79,0,0,17,1,59,208,0,0,1,4,15,1,50,79,0,0,17,1,200,207,0,0,1,4,15,1,50,79,0,0,17,1,151,205,0,0,1,4,15,1, 
  50,79,0,0,17,1,206,174,0,0,1,4,15,1,50,79,0,0,17,1,57,146,0,0,1,4,15,1,50,79,0,0,17,1,114,63,0,0,1,4,15,1,50,79,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0, 
  255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128, 
  121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,50,79,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,50,79,0,0,1,15,1,50,79,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0, 
  0,0,1,0,17,1,50,79,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,50,79,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,50,79,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1, 
  50,79,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,50,79,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,50,79,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,50,79,0,0,1,19, 
  64,0,0,0,172,0,0,0,1,0,17,1,50,79,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,50,79,0,0,1,15,1,50,79,0,0,17,1,89,80,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6, 
  0,0,0,2,0,0,0,45,80,2,128,37,16,194,127,42,144,194,128,43,80,65,128,47,208,1,128,94,144,1,128,4,17,1,64,77,0,0,1,4,17,1,249,87,0,0,1,4,17,1,58,70,0,0,1,4,17,1,219,80, 
  0,0,1,4,17,1,94,84,0,0,1,4,17,1,189,73,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87,0,0,0,3,0,14,1,21, 
  1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11, 
  128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4, 
  128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,205,82,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,205,82,0,0,1,4,15,1,205,82,0,0,17,1,133,214,0,0,1,4,19, 
  87,0,0,0,5,1,0,0,1,0,17,1,205,82,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,205,82,0,0,1,4,15,1,205,82,0,0,17,1,18,214,0,0,1,4,15,1,205,82,0,0,17,1,159, 
  213,0,0,1,4,15,1,205,82,0,0,17,1,44,213,0,0,1,4,15,1,205,82,0,0,17,1,185,212,0,0,1,4,15,1,205,82,0,0,17,1,70,212,0,0,1,4,15,1,205,82,0,0,17,1,211,211,0,0,1, 
  4,15,1,205,82,0,0,17,1,96,211,0,0,1,4,15,1,205,82,0,0,17,1,237,210,0,0,1,4,15,1,205,82,0,0,17,1,122,210,0,0,1,4,15,1,205,82,0,0,17,1,7,210,0,0,1,4,15,1,205, 
  82,0,0,17,1,148,209,0,0,1,4,15,1,205,82,0,0,17,1,33,209,0,0,1,4,15,1,205,82,0,0,17,1,174,208,0,0,1,4,15,1,205,82,0,0,17,1,59,208,0,0,1,4,15,1,205,82,0,0,17, 
  1,200,207,0,0,1,4,15,1,205,82,0,0,17,1,151,205,0,0,1,4,15,1,205,82,0,0,17,1,206,174,0,0,1,4,15,1,205,82,0,0,17,1,57,146,0,0,1,4,15,1,205,82,0,0,17,1,114,63,0, 
  0,1,4,15,1,205,82,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86, 
  216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,205,82,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,205,82, 
  0,0,1,15,1,205,82,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,177,0,0, 
  0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,205, 
  82,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,205,82,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,205,82,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,205,82,0,0,1,15,1, 
  205,82,0,0,17,1,244,83,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,16,1,128,37,80,1,128,42,208,129,127,47,144,1,128,4,17,1,249,87,0,0,1,4,17,1,219,80,0, 
  0,1,4,17,1,58,70,0,0,1,4,17,1,189,73,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1, 
  241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128, 
  91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128, 
  129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,80,86,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,80,86,0,0,1,4,15,1,80,86,0,0,17,1,133,214,0,0,1,4,19,87, 
  0,0,0,5,1,0,0,1,0,17,1,80,86,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,80,86,0,0,1,4,15,1,80,86,0,0,17,1,18,214,0,0,1,4,15,1,80,86,0,0,17,1,159,213, 
  0,0,1,4,15,1,80,86,0,0,17,1,44,213,0,0,1,4,15,1,80,86,0,0,17,1,185,212,0,0,1,4,15,1,80,86,0,0,17,1,70,212,0,0,1,4,15,1,80,86,0,0,17,1,211,211,0,0,1,4, 
  15,1,80,86,0,0,17,1,96,211,0,0,1,4,15,1,80,86,0,0,17,1,237,210,0,0,1,4,15,1,80,86,0,0,17,1,122,210,0,0,1,4,15,1,80,86,0,0,17,1,7,210,0,0,1,4,15,1,80,86, 
  0,0,17,1,148,209,0,0,1,4,15,1,80,86,0,0,17,1,33,209,0,0,1,4,15,1,80,86,0,0,17,1,174,208,0,0,1,4,15,1,80,86,0,0,17,1,59,208,0,0,1,4,15,1,80,86,0,0,17,1, 
  200,207,0,0,1,4,15,1,80,86,0,0,17,1,151,205,0,0,1,4,15,1,80,86,0,0,17,1,206,174,0,0,1,4,15,1,80,86,0,0,17,1,57,146,0,0,1,4,15,1,80,86,0,0,17,1,114,63,0,0, 
  1,4,15,1,80,86,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216, 
  4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,80,86,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,80,86,0, 
  0,1,15,1,80,86,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,80,86,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,80,86,0,0,1,19,64,0,0,0,177,0,0,0, 
  1,0,17,1,80,86,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,80,86,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,80,86,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,80,86, 
  0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,80,86,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,80,86,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,80,86,0,0,1,15,1,80, 
  86,0,0,17,1,119,87,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,144,2,128,37,80,193,127,42,80,194,128,43,208,65,128,47,16,2,128,94,144,1,128,4,17,1,219,80,0,0, 
  1,4,17,1,249,87,0,0,1,4,17,1,64,77,0,0,1,4,17,1,58,70,0,0,1,4,17,1,189,73,0,0,1,4,17,1,94,84,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6, 
  208,0,128,5,208,0,128,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101, 
  48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97, 
  24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,235,89,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17, 
  1,235,89,0,0,1,4,15,1,235,89,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,235,89,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,235,89,0,0,1,4,15, 
  1,235,89,0,0,17,1,18,214,0,0,1,4,15,1,235,89,0,0,17,1,159,213,0,0,1,4,15,1,235,89,0,0,17,1,44,213,0,0,1,4,15,1,235,89,0,0,17,1,185,212,0,0,1,4,15,1,235,89,0, 
  0,17,1,70,212,0,0,1,4,15,1,235,89,0,0,17,1,211,211,0,0,1,4,15,1,235,89,0,0,17,1,96,211,0,0,1,4,15,1,235,89,0,0,17,1,237,210,0,0,1,4,15,1,235,89,0,0,17,1,122, 
  210,0,0,1,4,15,1,235,89,0,0,17,1,7,210,0,0,1,4,15,1,235,89,0,0,17,1,148,209,0,0,1,4,15,1,235,89,0,0,17,1,33,209,0,0,1,4,15,1,235,89,0,0,17,1,174,208,0,0,1, 
  4,15,1,235,89,0,0,17,1,59,208,0,0,1,4,15,1,235,89,0,0,17,1,200,207,0,0,1,4,15,1,235,89,0,0,17,1,151,205,0,0,1,4,15,1,235,89,0,0,17,1,206,174,0,0,1,4,15,1,235, 
  89,0,0,17,1,57,146,0,0,1,4,15,1,235,89,0,0,17,1,114,63,0,0,1,4,15,1,235,89,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200, 
  128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0, 
  17,1,235,89,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,235,89,0,0,1,15,1,235,89,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0, 
  0,178,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0,0,175,0,0,0,1, 
  0,17,1,235,89,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,235,89,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,235,89,0, 
  0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,235,89,0,0,1,15,1,235,89,0,0,17,1,18,91,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176,0,128,4,17,1,249, 
  87,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,46,208,64,128,60,16,1,128,4,17,1,215,91,0,0,1,4,15,1,175,91,0,0,17,1,232,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19, 
  117,0,0,0,98,1,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,88,216,0,128,117,208,0,128,1,19,117,0,0,0,99,1,0,0,2,0,1,2,21,1,50,0,0,0,176,36,3, 
  0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,10,92,0,0,1,2,21,0,61,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0, 
  80,240,0,128,37,88,65,128,65,248,0,128,1,19,80,0,0,0,222,0,0,0,3,0,1,19,65,0,0,0,179,0,0,0,1,0,17,1,10,92,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0, 
  0,0,45,80,2,128,37,208,193,127,42,144,193,128,43,80,65,128,47,16,2,128,94,144,2,128,4,17,1,76,110,0,0,1,4,17,1,201,106,0,0,1,4,17,1,70,103,0,0,1,4,17,1,195,99,0,0,1,4,17, 
  1,40,96,0,0,1,4,17,1,201,92,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,9,0,0,0,28,0,0,0,1,0,1,21,1,241,1,0,0,196, 
  78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92, 
  72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8, 
  4,19,121,0,0,0,104,1,0,0,1,0,17,1,187,94,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,187,94,0,0,1,4,15,1,187,94,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1, 
  0,0,1,0,17,1,187,94,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,187,94,0,0,1,4,15,1,187,94,0,0,17,1,18,214,0,0,1,4,15,1,187,94,0,0,17,1,159,213,0,0,1,4,15, 
  1,187,94,0,0,17,1,44,213,0,0,1,4,15,1,187,94,0,0,17,1,185,212,0,0,1,4,15,1,187,94,0,0,17,1,70,212,0,0,1,4,15,1,187,94,0,0,17,1,211,211,0,0,1,4,15,1,187,94,0, 
  0,17,1,96,211,0,0,1,4,15,1,187,94,0,0,17,1,237,210,0,0,1,4,15,1,187,94,0,0,17,1,122,210,0,0,1,4,15,1,187,94,0,0,17,1,7,210,0,0,1,4,15,1,187,94,0,0,17,1,148, 
  209,0,0,1,4,15,1,187,94,0,0,17,1,33,209,0,0,1,4,15,1,187,94,0,0,17,1,174,208,0,0,1,4,15,1,187,94,0,0,17,1,59,208,0,0,1,4,15,1,187,94,0,0,17,1,200,207,0,0,1, 
  4,15,1,187,94,0,0,17,1,151,205,0,0,1,4,15,1,187,94,0,0,17,1,206,174,0,0,1,4,15,1,187,94,0,0,17,1,57,146,0,0,1,4,15,1,187,94,0,0,17,1,47,141,0,0,1,4,15,1,187, 
  94,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4, 
  128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,187,94,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,187,94,0,0,1,15,1,187, 
  94,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,187,94,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,187,94,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,187, 
  94,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,187,94,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,187,94,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,187,94,0,0,1,19,64, 
  0,0,0,173,0,0,0,1,0,17,1,187,94,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,187,94,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,187,94,0,0,1,15,1,187,94,0,0,17,1, 
  226,95,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176,0,128,4,17,1,201,92,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208, 
  0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232, 
  76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168, 
  7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,26,98,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,26,98,0,0, 
  1,4,15,1,26,98,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,26,98,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,26,98,0,0,1,4,15,1,26,98,0,0, 
  17,1,18,214,0,0,1,4,15,1,26,98,0,0,17,1,159,213,0,0,1,4,15,1,26,98,0,0,17,1,44,213,0,0,1,4,15,1,26,98,0,0,17,1,185,212,0,0,1,4,15,1,26,98,0,0,17,1,70,212, 
  0,0,1,4,15,1,26,98,0,0,17,1,211,211,0,0,1,4,15,1,26,98,0,0,17,1,96,211,0,0,1,4,15,1,26,98,0,0,17,1,237,210,0,0,1,4,15,1,26,98,0,0,17,1,122,210,0,0,1,4, 
  15,1,26,98,0,0,17,1,7,210,0,0,1,4,15,1,26,98,0,0,17,1,148,209,0,0,1,4,15,1,26,98,0,0,17,1,33,209,0,0,1,4,15,1,26,98,0,0,17,1,174,208,0,0,1,4,15,1,26,98, 
  0,0,17,1,59,208,0,0,1,4,15,1,26,98,0,0,17,1,200,207,0,0,1,4,15,1,26,98,0,0,17,1,151,205,0,0,1,4,15,1,26,98,0,0,17,1,206,174,0,0,1,4,15,1,26,98,0,0,17,1, 
  57,146,0,0,1,4,15,1,26,98,0,0,17,1,47,141,0,0,1,4,15,1,26,98,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130, 
  34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,26,98,0, 
  0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,26,98,0,0,1,15,1,26,98,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,26,98,0,0,1,19,64,0,0,0,178,0,0,0, 
  1,0,17,1,26,98,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,26,98,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,26,98,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,26,98, 
  0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,26,98,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,26,98,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,26,98,0,0,1,19,34,0, 
  0,0,95,0,0,0,1,0,17,1,26,98,0,0,1,15,1,26,98,0,0,17,1,65,99,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,80,2,128,37,144,194,127,42,208,193,128,43, 
  80,65,128,47,144,1,128,94,16,2,128,4,17,1,76,110,0,0,1,4,17,1,195,99,0,0,1,4,17,1,201,106,0,0,1,4,17,1,201,92,0,0,1,4,17,1,40,96,0,0,1,4,17,1,70,103,0,0,1,21, 
  9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72, 
  134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15, 
  129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1, 
  181,101,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,181,101,0,0,1,4,15,1,181,101,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,181,101,0,0,1,4,19,87, 
  0,0,0,4,1,0,0,1,0,17,1,181,101,0,0,1,4,15,1,181,101,0,0,17,1,18,214,0,0,1,4,15,1,181,101,0,0,17,1,159,213,0,0,1,4,15,1,181,101,0,0,17,1,44,213,0,0,1,4,15, 
  1,181,101,0,0,17,1,185,212,0,0,1,4,15,1,181,101,0,0,17,1,70,212,0,0,1,4,15,1,181,101,0,0,17,1,211,211,0,0,1,4,15,1,181,101,0,0,17,1,96,211,0,0,1,4,15,1,181,101,0, 
  0,17,1,237,210,0,0,1,4,15,1,181,101,0,0,17,1,122,210,0,0,1,4,15,1,181,101,0,0,17,1,7,210,0,0,1,4,15,1,181,101,0,0,17,1,148,209,0,0,1,4,15,1,181,101,0,0,17,1,33, 
  209,0,0,1,4,15,1,181,101,0,0,17,1,174,208,0,0,1,4,15,1,181,101,0,0,17,1,59,208,0,0,1,4,15,1,181,101,0,0,17,1,200,207,0,0,1,4,15,1,181,101,0,0,17,1,151,205,0,0,1, 
  4,15,1,181,101,0,0,17,1,206,174,0,0,1,4,15,1,181,101,0,0,17,1,57,146,0,0,1,4,15,1,181,101,0,0,17,1,47,141,0,0,1,4,15,1,181,101,0,0,17,1,126,114,0,0,1,2,21,0,38, 
  1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120, 
  192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,181,101,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,181,101,0,0,1,15,1,181,101,0,0,17,1,231,113,0,0,1,19,80,0,0, 
  0,221,0,0,0,1,0,17,1,181,101,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,181,101,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,181,101,0,0,1,19,64,0,0,0,176,0,0,0,1, 
  0,17,1,181,101,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,181,101,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,181,101,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,181,101,0, 
  0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,181,101,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,181,101,0,0,1,15,1,181,101,0,0,17,1,220,102,0,0,1,2,21,7,66,0,0,0,255,255, 
  255,255,4,0,0,0,2,0,0,0,94,144,1,128,37,16,1,128,42,208,129,127,47,80,1,128,4,17,1,70,103,0,0,1,4,17,1,195,99,0,0,1,4,17,1,201,92,0,0,1,4,17,1,201,106,0,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134, 
  1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129, 
  34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,56, 
  105,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,56,105,0,0,1,4,15,1,56,105,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,56,105,0,0,1,4,19,87,0, 
  0,0,4,1,0,0,1,0,17,1,56,105,0,0,1,4,15,1,56,105,0,0,17,1,18,214,0,0,1,4,15,1,56,105,0,0,17,1,159,213,0,0,1,4,15,1,56,105,0,0,17,1,44,213,0,0,1,4,15,1, 
  56,105,0,0,17,1,185,212,0,0,1,4,15,1,56,105,0,0,17,1,70,212,0,0,1,4,15,1,56,105,0,0,17,1,211,211,0,0,1,4,15,1,56,105,0,0,17,1,96,211,0,0,1,4,15,1,56,105,0,0, 
  17,1,237,210,0,0,1,4,15,1,56,105,0,0,17,1,122,210,0,0,1,4,15,1,56,105,0,0,17,1,7,210,0,0,1,4,15,1,56,105,0,0,17,1,148,209,0,0,1,4,15,1,56,105,0,0,17,1,33,209, 
  0,0,1,4,15,1,56,105,0,0,17,1,174,208,0,0,1,4,15,1,56,105,0,0,17,1,59,208,0,0,1,4,15,1,56,105,0,0,17,1,200,207,0,0,1,4,15,1,56,105,0,0,17,1,151,205,0,0,1,4, 
  15,1,56,105,0,0,17,1,206,174,0,0,1,4,15,1,56,105,0,0,17,1,57,146,0,0,1,4,15,1,56,105,0,0,17,1,47,141,0,0,1,4,15,1,56,105,0,0,17,1,126,114,0,0,1,2,21,0,38,1, 
  0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192, 
  2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,56,105,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,56,105,0,0,1,15,1,56,105,0,0,17,1,88,91,0,0,1,19,80,0,0,0, 
  221,0,0,0,1,0,17,1,56,105,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,56,105,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,56,105,0,0,1,19,64,0,0,0,176,0,0,0,1,0, 
  17,1,56,105,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,56,105,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,56,105,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,56,105,0,0, 
  1,19,64,0,0,0,172,0,0,0,1,0,17,1,56,105,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,56,105,0,0,1,15,1,56,105,0,0,17,1,95,106,0,0,1,2,21,7,66,0,0,0,255,255,255, 
  255,4,0,0,0,2,0,0,0,94,144,1,128,37,208,1,128,42,16,129,127,47,80,1,128,4,17,1,201,106,0,0,1,4,17,1,195,99,0,0,1,4,17,1,201,92,0,0,1,4,17,1,70,103,0,0,1,21,9,27, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1, 
  240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34, 
  168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,187,108, 
  0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,187,108,0,0,1,4,15,1,187,108,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,187,108,0,0,1,4,19,87,0,0, 
  0,4,1,0,0,1,0,17,1,187,108,0,0,1,4,15,1,187,108,0,0,17,1,18,214,0,0,1,4,15,1,187,108,0,0,17,1,159,213,0,0,1,4,15,1,187,108,0,0,17,1,44,213,0,0,1,4,15,1,187, 
  108,0,0,17,1,185,212,0,0,1,4,15,1,187,108,0,0,17,1,70,212,0,0,1,4,15,1,187,108,0,0,17,1,211,211,0,0,1,4,15,1,187,108,0,0,17,1,96,211,0,0,1,4,15,1,187,108,0,0,17, 
  1,237,210,0,0,1,4,15,1,187,108,0,0,17,1,122,210,0,0,1,4,15,1,187,108,0,0,17,1,7,210,0,0,1,4,15,1,187,108,0,0,17,1,148,209,0,0,1,4,15,1,187,108,0,0,17,1,33,209,0, 
  0,1,4,15,1,187,108,0,0,17,1,174,208,0,0,1,4,15,1,187,108,0,0,17,1,59,208,0,0,1,4,15,1,187,108,0,0,17,1,200,207,0,0,1,4,15,1,187,108,0,0,17,1,151,205,0,0,1,4,15, 
  1,187,108,0,0,17,1,206,174,0,0,1,4,15,1,187,108,0,0,17,1,57,146,0,0,1,4,15,1,187,108,0,0,17,1,47,141,0,0,1,4,15,1,187,108,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0, 
  0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2, 
  128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,187,108,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,187,108,0,0,1,15,1,187,108,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221, 
  0,0,0,1,0,17,1,187,108,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,187,108,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,187,108,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17, 
  1,187,108,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,187,108,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,187,108,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,187,108,0,0,1, 
  19,64,0,0,0,172,0,0,0,1,0,17,1,187,108,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,187,108,0,0,1,15,1,187,108,0,0,17,1,226,109,0,0,1,2,21,7,66,0,0,0,255,255,255,255, 
  4,0,0,0,2,0,0,0,94,208,1,128,37,144,1,128,42,80,129,127,47,16,1,128,4,17,1,195,99,0,0,1,4,17,1,201,106,0,0,1,4,17,1,70,103,0,0,1,4,17,1,201,92,0,0,1,21,9,27,0, 
  0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240, 
  3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168, 
  142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,62,112,0, 
  0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,62,112,0,0,1,4,15,1,62,112,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,62,112,0,0,1,4,19,87,0,0,0, 
  4,1,0,0,1,0,17,1,62,112,0,0,1,4,15,1,62,112,0,0,17,1,18,214,0,0,1,4,15,1,62,112,0,0,17,1,159,213,0,0,1,4,15,1,62,112,0,0,17,1,44,213,0,0,1,4,15,1,62,112, 
  0,0,17,1,185,212,0,0,1,4,15,1,62,112,0,0,17,1,70,212,0,0,1,4,15,1,62,112,0,0,17,1,211,211,0,0,1,4,15,1,62,112,0,0,17,1,96,211,0,0,1,4,15,1,62,112,0,0,17,1, 
  237,210,0,0,1,4,15,1,62,112,0,0,17,1,122,210,0,0,1,4,15,1,62,112,0,0,17,1,7,210,0,0,1,4,15,1,62,112,0,0,17,1,148,209,0,0,1,4,15,1,62,112,0,0,17,1,33,209,0,0, 
  1,4,15,1,62,112,0,0,17,1,174,208,0,0,1,4,15,1,62,112,0,0,17,1,59,208,0,0,1,4,15,1,62,112,0,0,17,1,200,207,0,0,1,4,15,1,62,112,0,0,17,1,151,205,0,0,1,4,15,1, 
  62,112,0,0,17,1,206,174,0,0,1,4,15,1,62,112,0,0,17,1,57,146,0,0,1,4,15,1,62,112,0,0,17,1,47,141,0,0,1,4,15,1,62,112,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0, 
  255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128, 
  121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,62,112,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,62,112,0,0,1,15,1,62,112,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0, 
  0,0,1,0,17,1,62,112,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,62,112,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,62,112,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1, 
  62,112,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,62,112,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,62,112,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,62,112,0,0,1,19, 
  64,0,0,0,172,0,0,0,1,0,17,1,62,112,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,62,112,0,0,1,15,1,62,112,0,0,17,1,101,113,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6, 
  0,0,0,2,0,0,0,45,16,2,128,37,208,193,127,42,80,194,128,43,144,65,128,47,80,1,128,94,144,2,128,4,17,1,195,99,0,0,1,4,17,1,76,110,0,0,1,4,17,1,70,103,0,0,1,4,17,1,40,96, 
  0,0,1,4,17,1,201,106,0,0,1,4,17,1,201,92,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87,0,0,0,3,0,14,1,21, 
  7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,46,64,65,128,60,208,0,128,4,15,1,175,91,0,0,17,1,232,56,0,0,1,4,17,1,215,91,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,117,0,0,0,98,1,0,0,1,0,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19,68,0,0,0,192,0,0,0,3,0, 
  14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131, 
  99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128, 
  82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,98,118,0,0,1,4,19,120,0, 
  0,0,103,1,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,98,118,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0, 
  17,1,98,118,0,0,1,4,15,1,98,118,0,0,17,1,18,214,0,0,1,4,15,1,98,118,0,0,17,1,159,213,0,0,1,4,15,1,98,118,0,0,17,1,44,213,0,0,1,4,15,1,98,118,0,0,17,1,185,212, 
  0,0,1,4,15,1,98,118,0,0,17,1,70,212,0,0,1,4,15,1,98,118,0,0,17,1,211,211,0,0,1,4,15,1,98,118,0,0,17,1,96,211,0,0,1,4,15,1,98,118,0,0,17,1,237,210,0,0,1,4, 
  15,1,98,118,0,0,17,1,122,210,0,0,1,4,15,1,98,118,0,0,17,1,7,210,0,0,1,4,15,1,98,118,0,0,17,1,148,209,0,0,1,4,15,1,98,118,0,0,17,1,33,209,0,0,1,4,15,1,98,118, 
  0,0,17,1,174,208,0,0,1,4,15,1,98,118,0,0,17,1,59,208,0,0,1,4,15,1,98,118,0,0,17,1,200,207,0,0,1,4,15,1,98,118,0,0,17,1,151,205,0,0,1,4,15,1,98,118,0,0,17,1, 
  206,174,0,0,1,4,15,1,98,118,0,0,17,1,57,146,0,0,1,4,15,1,98,118,0,0,17,1,47,141,0,0,1,4,15,1,98,118,0,0,17,1,112,116,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0, 
  0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216, 
  9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0, 
  0,104,1,0,0,1,0,17,1,98,118,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17, 
  1,98,118,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,17,1,18,214,0,0,1,4,15,1,98,118,0,0,17,1,159,213,0,0,1,4,15,1,98,118,0,0, 
  17,1,44,213,0,0,1,4,15,1,98,118,0,0,17,1,185,212,0,0,1,4,15,1,98,118,0,0,17,1,70,212,0,0,1,4,15,1,98,118,0,0,17,1,211,211,0,0,1,4,15,1,98,118,0,0,17,1,96,211, 
  0,0,1,4,15,1,98,118,0,0,17,1,237,210,0,0,1,4,15,1,98,118,0,0,17,1,122,210,0,0,1,4,15,1,98,118,0,0,17,1,7,210,0,0,1,4,15,1,98,118,0,0,17,1,148,209,0,0,1,4, 
  15,1,98,118,0,0,17,1,33,209,0,0,1,4,15,1,98,118,0,0,17,1,174,208,0,0,1,4,15,1,98,118,0,0,17,1,59,208,0,0,1,4,15,1,98,118,0,0,17,1,200,207,0,0,1,4,15,1,98,118, 
  0,0,17,1,151,205,0,0,1,4,15,1,98,118,0,0,17,1,206,174,0,0,1,4,15,1,98,118,0,0,17,1,57,146,0,0,1,4,15,1,98,118,0,0,17,1,47,141,0,0,1,4,15,1,98,118,0,0,17,1, 
  112,116,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128, 
  117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,98,118,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,98,118,0,0,1,15,1,98,118,0,0,17,1, 
  231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,98,118,0,0,1,19, 
  64,0,0,0,176,0,0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,173,0, 
  0,0,1,0,17,1,98,118,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,98,118,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,15,1,98,118,0,0,17,1,137,119,0,0,1, 
  2,21,7,108,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,41,112,2,129,37,224,194,127,42,48,2,129,43,32,131,128,45,240,1,128,47,176,1,128,94,112,1,128,4,17,1,208,137,0,0,1,4,17,1,77,134, 
  0,0,1,4,17,1,178,130,0,0,1,4,17,1,47,127,0,0,1,4,19,34,0,0,0,94,0,0,0,3,0,14,1,4,17,1,172,123,0,0,1,4,17,1,17,120,0,0,1,21,9,27,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86, 
  232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98, 
  168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,3,122,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,3,122,0, 
  0,1,4,15,1,3,122,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,3,122,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,3,122,0,0,1,4,15,1,3,122,0, 
  0,17,1,18,214,0,0,1,4,15,1,3,122,0,0,17,1,159,213,0,0,1,4,15,1,3,122,0,0,17,1,44,213,0,0,1,4,15,1,3,122,0,0,17,1,185,212,0,0,1,4,15,1,3,122,0,0,17,1,70, 
  212,0,0,1,4,15,1,3,122,0,0,17,1,211,211,0,0,1,4,15,1,3,122,0,0,17,1,96,211,0,0,1,4,15,1,3,122,0,0,17,1,237,210,0,0,1,4,15,1,3,122,0,0,17,1,122,210,0,0,1, 
  4,15,1,3,122,0,0,17,1,7,210,0,0,1,4,15,1,3,122,0,0,17,1,148,209,0,0,1,4,15,1,3,122,0,0,17,1,33,209,0,0,1,4,15,1,3,122,0,0,17,1,174,208,0,0,1,4,15,1,3, 
  122,0,0,17,1,59,208,0,0,1,4,15,1,3,122,0,0,17,1,200,207,0,0,1,4,15,1,3,122,0,0,17,1,151,205,0,0,1,4,15,1,3,122,0,0,17,1,206,174,0,0,1,4,15,1,3,122,0,0,17, 
  1,57,146,0,0,1,4,15,1,3,122,0,0,17,1,47,141,0,0,1,4,15,1,3,122,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199, 
  130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,3,122, 
  0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,3,122,0,0,1,15,1,3,122,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,178,0,0, 
  0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,3, 
  122,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,3,122,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,3,122,0,0,1,19,34, 
  0,0,0,95,0,0,0,1,0,17,1,3,122,0,0,1,15,1,3,122,0,0,17,1,42,123,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,208,1,128,37,144,194,127,42,80,193,128, 
  43,80,66,128,47,144,1,128,94,16,2,128,4,17,1,47,127,0,0,1,4,17,1,77,134,0,0,1,4,17,1,178,130,0,0,1,4,17,1,208,137,0,0,1,4,17,1,17,120,0,0,1,4,17,1,172,123,0,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136, 
  72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24, 
  15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17, 
  1,158,125,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,158,125,0,0,1,4,15,1,158,125,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,158,125,0,0,1,4,19, 
  87,0,0,0,4,1,0,0,1,0,17,1,158,125,0,0,1,4,15,1,158,125,0,0,17,1,18,214,0,0,1,4,15,1,158,125,0,0,17,1,159,213,0,0,1,4,15,1,158,125,0,0,17,1,44,213,0,0,1,4, 
  15,1,158,125,0,0,17,1,185,212,0,0,1,4,15,1,158,125,0,0,17,1,70,212,0,0,1,4,15,1,158,125,0,0,17,1,211,211,0,0,1,4,15,1,158,125,0,0,17,1,96,211,0,0,1,4,15,1,158,125, 
  0,0,17,1,237,210,0,0,1,4,15,1,158,125,0,0,17,1,122,210,0,0,1,4,15,1,158,125,0,0,17,1,7,210,0,0,1,4,15,1,158,125,0,0,17,1,148,209,0,0,1,4,15,1,158,125,0,0,17,1, 
  33,209,0,0,1,4,15,1,158,125,0,0,17,1,174,208,0,0,1,4,15,1,158,125,0,0,17,1,59,208,0,0,1,4,15,1,158,125,0,0,17,1,200,207,0,0,1,4,15,1,158,125,0,0,17,1,151,205,0,0, 
  1,4,15,1,158,125,0,0,17,1,206,174,0,0,1,4,15,1,158,125,0,0,17,1,57,146,0,0,1,4,15,1,158,125,0,0,17,1,47,141,0,0,1,4,15,1,158,125,0,0,17,1,126,114,0,0,1,2,21,0, 
  38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128, 
  120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,158,125,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,158,125,0,0,1,15,1,158,125,0,0,17,1,231,113,0,0,1,19,80,0, 
  0,0,221,0,0,0,1,0,17,1,158,125,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,158,125,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,158,125,0,0,1,19,64,0,0,0,176,0,0,0, 
  1,0,17,1,158,125,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,158,125,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,158,125,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,158,125, 
  0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,158,125,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,158,125,0,0,1,15,1,158,125,0,0,17,1,197,126,0,0,1,2,21,7,66,0,0,0,255, 
  255,255,255,4,0,0,0,2,0,0,0,94,16,1,128,37,208,1,128,42,80,129,127,47,144,1,128,4,17,1,208,137,0,0,1,4,17,1,47,127,0,0,1,4,17,1,77,134,0,0,1,4,17,1,172,123,0,0,1,21, 
  9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72, 
  134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15, 
  129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1, 
  33,129,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,33,129,0,0,1,4,15,1,33,129,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,33,129,0,0,1,4,19,87, 
  0,0,0,4,1,0,0,1,0,17,1,33,129,0,0,1,4,15,1,33,129,0,0,17,1,18,214,0,0,1,4,15,1,33,129,0,0,17,1,159,213,0,0,1,4,15,1,33,129,0,0,17,1,44,213,0,0,1,4,15, 
  1,33,129,0,0,17,1,185,212,0,0,1,4,15,1,33,129,0,0,17,1,70,212,0,0,1,4,15,1,33,129,0,0,17,1,211,211,0,0,1,4,15,1,33,129,0,0,17,1,96,211,0,0,1,4,15,1,33,129,0, 
  0,17,1,237,210,0,0,1,4,15,1,33,129,0,0,17,1,122,210,0,0,1,4,15,1,33,129,0,0,17,1,7,210,0,0,1,4,15,1,33,129,0,0,17,1,148,209,0,0,1,4,15,1,33,129,0,0,17,1,33, 
  209,0,0,1,4,15,1,33,129,0,0,17,1,174,208,0,0,1,4,15,1,33,129,0,0,17,1,59,208,0,0,1,4,15,1,33,129,0,0,17,1,200,207,0,0,1,4,15,1,33,129,0,0,17,1,151,205,0,0,1, 
  4,15,1,33,129,0,0,17,1,206,174,0,0,1,4,15,1,33,129,0,0,17,1,57,146,0,0,1,4,15,1,33,129,0,0,17,1,47,141,0,0,1,4,15,1,33,129,0,0,17,1,126,114,0,0,1,2,21,0,38, 
  1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120, 
  192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,33,129,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,33,129,0,0,1,15,1,33,129,0,0,17,1,88,91,0,0,1,19,80,0,0, 
  0,221,0,0,0,1,0,17,1,33,129,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,33,129,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,33,129,0,0,1,19,64,0,0,0,176,0,0,0,1, 
  0,17,1,33,129,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,33,129,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,33,129,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,33,129,0, 
  0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,33,129,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,33,129,0,0,1,15,1,33,129,0,0,17,1,72,130,0,0,1,2,21,7,66,0,0,0,255,255, 
  255,255,4,0,0,0,2,0,0,0,94,144,1,128,37,208,1,128,42,80,129,127,47,16,1,128,4,17,1,77,134,0,0,1,4,17,1,47,127,0,0,1,4,17,1,208,137,0,0,1,4,17,1,172,123,0,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134, 
  1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129, 
  34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,164, 
  132,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,164,132,0,0,1,4,15,1,164,132,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,164,132,0,0,1,4,19,87,0, 
  0,0,4,1,0,0,1,0,17,1,164,132,0,0,1,4,15,1,164,132,0,0,17,1,18,214,0,0,1,4,15,1,164,132,0,0,17,1,159,213,0,0,1,4,15,1,164,132,0,0,17,1,44,213,0,0,1,4,15,1, 
  164,132,0,0,17,1,185,212,0,0,1,4,15,1,164,132,0,0,17,1,70,212,0,0,1,4,15,1,164,132,0,0,17,1,211,211,0,0,1,4,15,1,164,132,0,0,17,1,96,211,0,0,1,4,15,1,164,132,0,0, 
  17,1,237,210,0,0,1,4,15,1,164,132,0,0,17,1,122,210,0,0,1,4,15,1,164,132,0,0,17,1,7,210,0,0,1,4,15,1,164,132,0,0,17,1,148,209,0,0,1,4,15,1,164,132,0,0,17,1,33,209, 
  0,0,1,4,15,1,164,132,0,0,17,1,174,208,0,0,1,4,15,1,164,132,0,0,17,1,59,208,0,0,1,4,15,1,164,132,0,0,17,1,200,207,0,0,1,4,15,1,164,132,0,0,17,1,151,205,0,0,1,4, 
  15,1,164,132,0,0,17,1,206,174,0,0,1,4,15,1,164,132,0,0,17,1,57,146,0,0,1,4,15,1,164,132,0,0,17,1,47,141,0,0,1,4,15,1,164,132,0,0,17,1,126,114,0,0,1,2,21,0,38,1, 
  0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192, 
  2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,164,132,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,164,132,0,0,1,15,1,164,132,0,0,17,1,231,113,0,0,1,19,80,0,0,0, 
  221,0,0,0,1,0,17,1,164,132,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,164,132,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,164,132,0,0,1,19,64,0,0,0,176,0,0,0,1,0, 
  17,1,164,132,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,164,132,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,164,132,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,164,132,0,0, 
  1,19,64,0,0,0,172,0,0,0,1,0,17,1,164,132,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,164,132,0,0,1,15,1,164,132,0,0,17,1,203,133,0,0,1,2,21,7,90,0,0,0,255,255,255, 
  255,6,0,0,0,2,0,0,0,45,144,2,128,37,80,193,127,42,208,193,128,43,80,66,128,47,144,1,128,94,16,2,128,4,17,1,172,123,0,0,1,4,17,1,77,134,0,0,1,4,17,1,47,127,0,0,1,4,17,1, 
  208,137,0,0,1,4,17,1,17,120,0,0,1,4,17,1,178,130,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,88,0,0,0,3,0,14, 
  1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90, 
  40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128, 
  144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,63,136,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,63,136,0,0,1,4,15,1,63,136,0,0,17,1,133,214,0,0,1, 
  4,19,87,0,0,0,5,1,0,0,1,0,17,1,63,136,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,63,136,0,0,1,4,15,1,63,136,0,0,17,1,18,214,0,0,1,4,15,1,63,136,0,0,17, 
  1,159,213,0,0,1,4,15,1,63,136,0,0,17,1,44,213,0,0,1,4,15,1,63,136,0,0,17,1,185,212,0,0,1,4,15,1,63,136,0,0,17,1,70,212,0,0,1,4,15,1,63,136,0,0,17,1,211,211,0, 
  0,1,4,15,1,63,136,0,0,17,1,96,211,0,0,1,4,15,1,63,136,0,0,17,1,237,210,0,0,1,4,15,1,63,136,0,0,17,1,122,210,0,0,1,4,15,1,63,136,0,0,17,1,7,210,0,0,1,4,15, 
  1,63,136,0,0,17,1,148,209,0,0,1,4,15,1,63,136,0,0,17,1,33,209,0,0,1,4,15,1,63,136,0,0,17,1,174,208,0,0,1,4,15,1,63,136,0,0,17,1,59,208,0,0,1,4,15,1,63,136,0, 
  0,17,1,200,207,0,0,1,4,15,1,63,136,0,0,17,1,151,205,0,0,1,4,15,1,63,136,0,0,17,1,206,174,0,0,1,4,15,1,63,136,0,0,17,1,57,146,0,0,1,4,15,1,63,136,0,0,17,1,47, 
  141,0,0,1,4,15,1,63,136,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5, 
  129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,63,136,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1, 
  63,136,0,0,1,15,1,63,136,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,177, 
  0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17, 
  1,63,136,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,63,136,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,63,136,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,63,136,0,0,1, 
  15,1,63,136,0,0,17,1,102,137,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,16,1,128,37,144,1,128,42,208,129,127,47,80,1,128,4,17,1,208,137,0,0,1,4,17,1,77, 
  134,0,0,1,4,17,1,172,123,0,0,1,4,17,1,47,127,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0,0,0,3,0,14,1, 
  21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40, 
  11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144, 
  4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,194,139,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,194,139,0,0,1,4,15,1,194,139,0,0,17,1,133,214,0,0,1,4, 
  19,87,0,0,0,5,1,0,0,1,0,17,1,194,139,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,194,139,0,0,1,4,15,1,194,139,0,0,17,1,18,214,0,0,1,4,15,1,194,139,0,0,17,1, 
  159,213,0,0,1,4,15,1,194,139,0,0,17,1,44,213,0,0,1,4,15,1,194,139,0,0,17,1,185,212,0,0,1,4,15,1,194,139,0,0,17,1,70,212,0,0,1,4,15,1,194,139,0,0,17,1,211,211,0,0, 
  1,4,15,1,194,139,0,0,17,1,96,211,0,0,1,4,15,1,194,139,0,0,17,1,237,210,0,0,1,4,15,1,194,139,0,0,17,1,122,210,0,0,1,4,15,1,194,139,0,0,17,1,7,210,0,0,1,4,15,1, 
  194,139,0,0,17,1,148,209,0,0,1,4,15,1,194,139,0,0,17,1,33,209,0,0,1,4,15,1,194,139,0,0,17,1,174,208,0,0,1,4,15,1,194,139,0,0,17,1,59,208,0,0,1,4,15,1,194,139,0,0, 
  17,1,200,207,0,0,1,4,15,1,194,139,0,0,17,1,151,205,0,0,1,4,15,1,194,139,0,0,17,1,206,174,0,0,1,4,15,1,194,139,0,0,17,1,57,146,0,0,1,4,15,1,194,139,0,0,17,1,47,141, 
  0,0,1,4,15,1,194,139,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129, 
  86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,194,139,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,194, 
  139,0,0,1,15,1,194,139,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,177,0, 
  0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1, 
  194,139,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,194,139,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,194,139,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,194,139,0,0,1,15, 
  1,194,139,0,0,17,1,233,140,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176,0,128,4,17,1,208,137,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141, 
  132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72, 
  129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,19,145,0,0,1,4,19,120,0,0,0,103,1,0,0,1, 
  0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,19,145,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,19,145,0,0,1, 
  4,15,1,19,145,0,0,17,1,18,214,0,0,1,4,15,1,19,145,0,0,17,1,159,213,0,0,1,4,15,1,19,145,0,0,17,1,44,213,0,0,1,4,15,1,19,145,0,0,17,1,185,212,0,0,1,4,15,1,19, 
  145,0,0,17,1,70,212,0,0,1,4,15,1,19,145,0,0,17,1,211,211,0,0,1,4,15,1,19,145,0,0,17,1,96,211,0,0,1,4,15,1,19,145,0,0,17,1,237,210,0,0,1,4,15,1,19,145,0,0,17, 
  1,122,210,0,0,1,4,15,1,19,145,0,0,17,1,7,210,0,0,1,4,15,1,19,145,0,0,17,1,148,209,0,0,1,4,15,1,19,145,0,0,17,1,33,209,0,0,1,4,15,1,19,145,0,0,17,1,174,208,0, 
  0,1,4,15,1,19,145,0,0,17,1,59,208,0,0,1,4,15,1,19,145,0,0,17,1,200,207,0,0,1,4,15,1,19,145,0,0,17,1,151,205,0,0,1,4,15,1,19,145,0,0,17,1,206,174,0,0,1,4,15, 
  1,19,145,0,0,17,1,57,146,0,0,1,4,15,1,19,145,0,0,17,1,33,143,0,0,1,4,15,1,19,145,0,0,17,1,126,114,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96, 
  136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31, 
  24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0, 
  17,1,19,145,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,19,145,0,0,1,4, 
  19,87,0,0,0,4,1,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,17,1,18,214,0,0,1,4,15,1,19,145,0,0,17,1,159,213,0,0,1,4,15,1,19,145,0,0,17,1,44,213,0,0,1, 
  4,15,1,19,145,0,0,17,1,185,212,0,0,1,4,15,1,19,145,0,0,17,1,70,212,0,0,1,4,15,1,19,145,0,0,17,1,211,211,0,0,1,4,15,1,19,145,0,0,17,1,96,211,0,0,1,4,15,1,19, 
  145,0,0,17,1,237,210,0,0,1,4,15,1,19,145,0,0,17,1,122,210,0,0,1,4,15,1,19,145,0,0,17,1,7,210,0,0,1,4,15,1,19,145,0,0,17,1,148,209,0,0,1,4,15,1,19,145,0,0,17, 
  1,33,209,0,0,1,4,15,1,19,145,0,0,17,1,174,208,0,0,1,4,15,1,19,145,0,0,17,1,59,208,0,0,1,4,15,1,19,145,0,0,17,1,200,207,0,0,1,4,15,1,19,145,0,0,17,1,151,205,0, 
  0,1,4,15,1,19,145,0,0,17,1,206,174,0,0,1,4,15,1,19,145,0,0,17,1,57,146,0,0,1,4,15,1,19,145,0,0,17,1,33,143,0,0,1,4,15,1,19,145,0,0,17,1,126,114,0,0,1,2,21, 
  0,37,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3, 
  128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,19,145,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,19,145,0,0,1,15,1,19,145,0,0,17,1,88,91,0,0,1,19,80, 
  0,0,0,221,0,0,0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,176,0,0, 
  0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,19,145,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,19, 
  145,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,19,145,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,19,34,0,0,0,93,0,0,0,2,0,1,2,21,7,30,0,0,0,255, 
  255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,17,1,115,146,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3, 
  0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10, 
  128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19, 
  121,0,0,0,104,1,0,0,1,0,17,1,101,148,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,101,148,0,0,1,4,15,1,101,148,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0, 
  1,0,17,1,101,148,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,101,148,0,0,1,4,15,1,101,148,0,0,17,1,18,214,0,0,1,4,15,1,101,148,0,0,17,1,159,213,0,0,1,4,15,1,101, 
  148,0,0,17,1,44,213,0,0,1,4,15,1,101,148,0,0,17,1,185,212,0,0,1,4,15,1,101,148,0,0,17,1,70,212,0,0,1,4,15,1,101,148,0,0,17,1,211,211,0,0,1,4,15,1,101,148,0,0,17, 
  1,96,211,0,0,1,4,15,1,101,148,0,0,17,1,237,210,0,0,1,4,15,1,101,148,0,0,17,1,122,210,0,0,1,4,15,1,101,148,0,0,17,1,7,210,0,0,1,4,15,1,101,148,0,0,17,1,148,209,0, 
  0,1,4,15,1,101,148,0,0,17,1,33,209,0,0,1,4,15,1,101,148,0,0,17,1,174,208,0,0,1,4,15,1,101,148,0,0,17,1,59,208,0,0,1,4,15,1,101,148,0,0,17,1,200,207,0,0,1,4,15, 
  1,101,148,0,0,17,1,151,205,0,0,1,4,15,1,101,148,0,0,17,1,206,174,0,0,1,4,15,1,101,148,0,0,17,1,57,146,0,0,1,4,15,1,101,148,0,0,17,1,47,141,0,0,1,4,15,1,101,148,0, 
  0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82, 
  136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,101,148,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,101,148,0,0,1,15,1,101,148,0, 
  0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,101,148,0, 
  0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0, 
  0,173,0,0,0,1,0,17,1,101,148,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,101,148,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,101,148,0,0,1,15,1,101,148,0,0,17,1,140,149, 
  0,0,1,2,21,7,102,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,44,240,2,128,37,112,194,128,42,48,2,129,43,176,130,128,45,240,1,128,47,176,1,128,94,112,1,128,4,17,1,111,171,0,0,1,4,17, 
  1,236,167,0,0,1,4,17,1,81,164,0,0,1,4,17,1,206,160,0,0,1,4,17,1,75,157,0,0,1,4,17,1,176,153,0,0,1,4,17,1,14,150,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132, 
  87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128, 
  100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,0,152,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,0,152,0,0,1,4, 
  15,1,0,152,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,0,152,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,0,152,0,0,1,4,15,1,0,152,0,0,17,1, 
  18,214,0,0,1,4,15,1,0,152,0,0,17,1,159,213,0,0,1,4,15,1,0,152,0,0,17,1,44,213,0,0,1,4,15,1,0,152,0,0,17,1,185,212,0,0,1,4,15,1,0,152,0,0,17,1,70,212,0,0, 
  1,4,15,1,0,152,0,0,17,1,211,211,0,0,1,4,15,1,0,152,0,0,17,1,96,211,0,0,1,4,15,1,0,152,0,0,17,1,237,210,0,0,1,4,15,1,0,152,0,0,17,1,122,210,0,0,1,4,15,1, 
  0,152,0,0,17,1,7,210,0,0,1,4,15,1,0,152,0,0,17,1,148,209,0,0,1,4,15,1,0,152,0,0,17,1,33,209,0,0,1,4,15,1,0,152,0,0,17,1,174,208,0,0,1,4,15,1,0,152,0,0, 
  17,1,59,208,0,0,1,4,15,1,0,152,0,0,17,1,200,207,0,0,1,4,15,1,0,152,0,0,17,1,151,205,0,0,1,4,15,1,0,152,0,0,17,1,206,174,0,0,1,4,15,1,0,152,0,0,17,1,57,146, 
  0,0,1,4,15,1,0,152,0,0,17,1,47,141,0,0,1,4,15,1,0,152,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200, 
  136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,0,152,0,0,1, 
  19,87,0,0,0,6,1,0,0,1,0,17,1,0,152,0,0,1,15,1,0,152,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,0,152,0,0,1,19,64,0,0,0,178,0,0,0,1,0, 
  17,1,0,152,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,0,152,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,0,152,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,0,152,0,0, 
  1,19,64,0,0,0,174,0,0,0,1,0,17,1,0,152,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,0,152,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,0,152,0,0,1,19,34,0,0,0, 
  95,0,0,0,1,0,17,1,0,152,0,0,1,15,1,0,152,0,0,17,1,39,153,0,0,1,2,21,7,109,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,41,112,2,129,37,232,194,127,42,48,2,129,43,40,131, 
  128,45,240,1,128,47,176,1,128,94,112,1,128,4,17,1,208,137,0,0,1,4,17,1,77,134,0,0,1,4,17,1,178,130,0,0,1,4,17,1,47,127,0,0,1,4,19,81,0,0,0,223,0,0,0,6,0,14,14,1, 
  4,17,1,172,123,0,0,1,4,17,1,17,120,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0, 
  0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104, 
  9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0, 
  0,1,0,17,1,162,155,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,162,155,0,0,1,4,15,1,162,155,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,162,155,0, 
  0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,162,155,0,0,1,4,15,1,162,155,0,0,17,1,18,214,0,0,1,4,15,1,162,155,0,0,17,1,159,213,0,0,1,4,15,1,162,155,0,0,17,1,44,213, 
  0,0,1,4,15,1,162,155,0,0,17,1,185,212,0,0,1,4,15,1,162,155,0,0,17,1,70,212,0,0,1,4,15,1,162,155,0,0,17,1,211,211,0,0,1,4,15,1,162,155,0,0,17,1,96,211,0,0,1,4, 
  15,1,162,155,0,0,17,1,237,210,0,0,1,4,15,1,162,155,0,0,17,1,122,210,0,0,1,4,15,1,162,155,0,0,17,1,7,210,0,0,1,4,15,1,162,155,0,0,17,1,148,209,0,0,1,4,15,1,162,155, 
  0,0,17,1,33,209,0,0,1,4,15,1,162,155,0,0,17,1,174,208,0,0,1,4,15,1,162,155,0,0,17,1,59,208,0,0,1,4,15,1,162,155,0,0,17,1,200,207,0,0,1,4,15,1,162,155,0,0,17,1, 
  151,205,0,0,1,4,15,1,162,155,0,0,17,1,206,174,0,0,1,4,15,1,162,155,0,0,17,1,57,146,0,0,1,4,15,1,162,155,0,0,17,1,47,141,0,0,1,4,15,1,162,155,0,0,17,1,126,114,0,0, 
  1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128, 
  118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,162,155,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,162,155,0,0,1,15,1,162,155,0,0,17,1,88,91,0,0, 
  1,19,80,0,0,0,221,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0, 
  176,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,162,155,0,0,1,19,64,0,0,0,173,0,0,0,1,0, 
  17,1,162,155,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,162,155,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,162,155,0,0,1,15,1,162,155,0,0,17,1,201,156,0,0,1,2,21,7,90, 
  0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,80,2,128,37,208,193,127,42,16,194,128,43,144,66,128,47,144,1,128,94,80,1,128,4,17,1,111,171,0,0,1,4,17,1,236,167,0,0,1,4,17,1,75,157, 
  0,0,1,4,17,1,206,160,0,0,1,4,17,1,81,164,0,0,1,4,17,1,176,153,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87, 
  0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12, 
  128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5, 
  128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,61,159,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,61,159,0,0,1,4,15,1,61,159,0,0,17, 
  1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,61,159,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,61,159,0,0,1,4,15,1,61,159,0,0,17,1,18,214,0,0,1,4,15, 
  1,61,159,0,0,17,1,159,213,0,0,1,4,15,1,61,159,0,0,17,1,44,213,0,0,1,4,15,1,61,159,0,0,17,1,185,212,0,0,1,4,15,1,61,159,0,0,17,1,70,212,0,0,1,4,15,1,61,159,0, 
  0,17,1,211,211,0,0,1,4,15,1,61,159,0,0,17,1,96,211,0,0,1,4,15,1,61,159,0,0,17,1,237,210,0,0,1,4,15,1,61,159,0,0,17,1,122,210,0,0,1,4,15,1,61,159,0,0,17,1,7, 
  210,0,0,1,4,15,1,61,159,0,0,17,1,148,209,0,0,1,4,15,1,61,159,0,0,17,1,33,209,0,0,1,4,15,1,61,159,0,0,17,1,174,208,0,0,1,4,15,1,61,159,0,0,17,1,59,208,0,0,1, 
  4,15,1,61,159,0,0,17,1,200,207,0,0,1,4,15,1,61,159,0,0,17,1,151,205,0,0,1,4,15,1,61,159,0,0,17,1,206,174,0,0,1,4,15,1,61,159,0,0,17,1,57,146,0,0,1,4,15,1,61, 
  159,0,0,17,1,47,141,0,0,1,4,15,1,61,159,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84, 
  248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,61,159,0,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,61,159,0,0,1,15,1,61,159,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,61,159,0,0,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,174, 
  0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,61,159,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,61,159,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,61,159,0,0,1,15,1,61,159,0,0,17,1,100,160,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,208,1,128,37,144,1,128,42,80,129,127,47,16,1,128,4,17,1,236,167,0, 
  0,1,4,17,1,206,160,0,0,1,4,17,1,75,157,0,0,1,4,17,1,111,171,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0, 
  0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128, 
  89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128, 
  127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,192,162,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,192,162,0,0,1,4,15,1,192,162,0,0,17,1, 
  133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,192,162,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,192,162,0,0,1,4,15,1,192,162,0,0,17,1,18,214,0,0,1,4,15,1, 
  192,162,0,0,17,1,159,213,0,0,1,4,15,1,192,162,0,0,17,1,44,213,0,0,1,4,15,1,192,162,0,0,17,1,185,212,0,0,1,4,15,1,192,162,0,0,17,1,70,212,0,0,1,4,15,1,192,162,0,0, 
  17,1,211,211,0,0,1,4,15,1,192,162,0,0,17,1,96,211,0,0,1,4,15,1,192,162,0,0,17,1,237,210,0,0,1,4,15,1,192,162,0,0,17,1,122,210,0,0,1,4,15,1,192,162,0,0,17,1,7,210, 
  0,0,1,4,15,1,192,162,0,0,17,1,148,209,0,0,1,4,15,1,192,162,0,0,17,1,33,209,0,0,1,4,15,1,192,162,0,0,17,1,174,208,0,0,1,4,15,1,192,162,0,0,17,1,59,208,0,0,1,4, 
  15,1,192,162,0,0,17,1,200,207,0,0,1,4,15,1,192,162,0,0,17,1,151,205,0,0,1,4,15,1,192,162,0,0,17,1,206,174,0,0,1,4,15,1,192,162,0,0,17,1,57,146,0,0,1,4,15,1,192,162, 
  0,0,17,1,47,141,0,0,1,4,15,1,192,162,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248, 
  5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,192,162,0,0,1,19,87,0,0,0,6,1,0, 
  0,1,0,17,1,192,162,0,0,1,15,1,192,162,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,192,162,0,0,1,19, 
  64,0,0,0,177,0,0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,174,0, 
  0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,192,162,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,192,162,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1, 
  192,162,0,0,1,15,1,192,162,0,0,17,1,231,163,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,144,1,128,37,16,1,128,42,208,129,127,47,80,1,128,4,17,1,75,157,0,0, 
  1,4,17,1,236,167,0,0,1,4,17,1,111,171,0,0,1,4,17,1,206,160,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90,0,0, 
  0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89, 
  152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127, 
  40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,67,166,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,67,166,0,0,1,4,15,1,67,166,0,0,17,1,133, 
  214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,67,166,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,67,166,0,0,1,4,15,1,67,166,0,0,17,1,18,214,0,0,1,4,15,1,67, 
  166,0,0,17,1,159,213,0,0,1,4,15,1,67,166,0,0,17,1,44,213,0,0,1,4,15,1,67,166,0,0,17,1,185,212,0,0,1,4,15,1,67,166,0,0,17,1,70,212,0,0,1,4,15,1,67,166,0,0,17, 
  1,211,211,0,0,1,4,15,1,67,166,0,0,17,1,96,211,0,0,1,4,15,1,67,166,0,0,17,1,237,210,0,0,1,4,15,1,67,166,0,0,17,1,122,210,0,0,1,4,15,1,67,166,0,0,17,1,7,210,0, 
  0,1,4,15,1,67,166,0,0,17,1,148,209,0,0,1,4,15,1,67,166,0,0,17,1,33,209,0,0,1,4,15,1,67,166,0,0,17,1,174,208,0,0,1,4,15,1,67,166,0,0,17,1,59,208,0,0,1,4,15, 
  1,67,166,0,0,17,1,200,207,0,0,1,4,15,1,67,166,0,0,17,1,151,205,0,0,1,4,15,1,67,166,0,0,17,1,206,174,0,0,1,4,15,1,67,166,0,0,17,1,57,146,0,0,1,4,15,1,67,166,0, 
  0,17,1,47,141,0,0,1,4,15,1,67,166,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5, 
  128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,67,166,0,0,1,19,87,0,0,0,6,1,0,0, 
  1,0,17,1,67,166,0,0,1,15,1,67,166,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,67,166,0,0,1,19,64, 
  0,0,0,177,0,0,0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,174,0,0, 
  0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,67,166,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,67,166,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,67, 
  166,0,0,1,15,1,67,166,0,0,17,1,106,167,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,144,1,128,37,208,193,127,42,16,194,128,43,80,65,128,47,144,2,128,94,80,2,128, 
  4,17,1,176,153,0,0,1,4,17,1,81,164,0,0,1,4,17,1,75,157,0,0,1,4,17,1,206,160,0,0,1,4,17,1,111,171,0,0,1,4,17,1,236,167,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56, 
  7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200, 
  205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,222,169,0,0,1,4,19,120,0,0,0, 
  103,1,0,0,1,0,17,1,222,169,0,0,1,4,15,1,222,169,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,222,169,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1, 
  222,169,0,0,1,4,15,1,222,169,0,0,17,1,18,214,0,0,1,4,15,1,222,169,0,0,17,1,159,213,0,0,1,4,15,1,222,169,0,0,17,1,44,213,0,0,1,4,15,1,222,169,0,0,17,1,185,212,0,0, 
  1,4,15,1,222,169,0,0,17,1,70,212,0,0,1,4,15,1,222,169,0,0,17,1,211,211,0,0,1,4,15,1,222,169,0,0,17,1,96,211,0,0,1,4,15,1,222,169,0,0,17,1,237,210,0,0,1,4,15,1, 
  222,169,0,0,17,1,122,210,0,0,1,4,15,1,222,169,0,0,17,1,7,210,0,0,1,4,15,1,222,169,0,0,17,1,148,209,0,0,1,4,15,1,222,169,0,0,17,1,33,209,0,0,1,4,15,1,222,169,0,0, 
  17,1,174,208,0,0,1,4,15,1,222,169,0,0,17,1,59,208,0,0,1,4,15,1,222,169,0,0,17,1,200,207,0,0,1,4,15,1,222,169,0,0,17,1,151,205,0,0,1,4,15,1,222,169,0,0,17,1,206,174, 
  0,0,1,4,15,1,222,169,0,0,17,1,57,146,0,0,1,4,15,1,222,169,0,0,17,1,47,141,0,0,1,4,15,1,222,169,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0, 
  3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0, 
  0,7,1,0,0,1,0,17,1,222,169,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,222,169,0,0,1,15,1,222,169,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,222,169, 
  0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0, 
  0,0,175,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,222,169,0,0,1,19,64,0,0,0,172,0,0,0, 
  1,0,17,1,222,169,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,222,169,0,0,1,15,1,222,169,0,0,17,1,5,171,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94, 
  80,1,128,37,16,1,128,42,208,129,127,47,144,1,128,4,17,1,75,157,0,0,1,4,17,1,111,171,0,0,1,4,17,1,236,167,0,0,1,4,17,1,206,160,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7, 
  128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205, 
  128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,97,173,0,0,1,4,19,120,0,0,0,103, 
  1,0,0,1,0,17,1,97,173,0,0,1,4,15,1,97,173,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,97,173,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,97, 
  173,0,0,1,4,15,1,97,173,0,0,17,1,18,214,0,0,1,4,15,1,97,173,0,0,17,1,159,213,0,0,1,4,15,1,97,173,0,0,17,1,44,213,0,0,1,4,15,1,97,173,0,0,17,1,185,212,0,0,1, 
  4,15,1,97,173,0,0,17,1,70,212,0,0,1,4,15,1,97,173,0,0,17,1,211,211,0,0,1,4,15,1,97,173,0,0,17,1,96,211,0,0,1,4,15,1,97,173,0,0,17,1,237,210,0,0,1,4,15,1,97, 
  173,0,0,17,1,122,210,0,0,1,4,15,1,97,173,0,0,17,1,7,210,0,0,1,4,15,1,97,173,0,0,17,1,148,209,0,0,1,4,15,1,97,173,0,0,17,1,33,209,0,0,1,4,15,1,97,173,0,0,17, 
  1,174,208,0,0,1,4,15,1,97,173,0,0,17,1,59,208,0,0,1,4,15,1,97,173,0,0,17,1,200,207,0,0,1,4,15,1,97,173,0,0,17,1,151,205,0,0,1,4,15,1,97,173,0,0,17,1,206,174,0, 
  0,1,4,15,1,97,173,0,0,17,1,57,146,0,0,1,4,15,1,97,173,0,0,17,1,47,141,0,0,1,4,15,1,97,173,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3, 
  0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0, 
  7,1,0,0,1,0,17,1,97,173,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,97,173,0,0,1,15,1,97,173,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,97,173,0, 
  0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0, 
  0,175,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,97,173,0,0,1,19,64,0,0,0,172,0,0,0,1, 
  0,17,1,97,173,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,97,173,0,0,1,15,1,97,173,0,0,17,1,136,174,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176, 
  0,128,4,17,1,111,171,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,2,2,0,0,166,79,3,0, 
  28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,83,232,205,132,84,120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,88,40,12,128,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128, 
  93,248,9,128,94,136,9,128,31,160,15,129,34,48,143,128,81,192,206,128,82,80,206,128,95,24,137,129,97,56,200,129,98,200,7,128,99,88,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128, 
  8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,212,178,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,212,178,0,0,1,4,15,1,212,178,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5, 
  1,0,0,1,0,17,1,212,178,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,212,178,0,0,1,4,15,1,212,178,0,0,17,1,18,214,0,0,1,4,15,1,212,178,0,0,17,1,159,213,0,0,1,4, 
  15,1,212,178,0,0,17,1,44,213,0,0,1,4,15,1,212,178,0,0,17,1,185,212,0,0,1,4,15,1,212,178,0,0,17,1,70,212,0,0,1,4,15,1,212,178,0,0,17,1,211,211,0,0,1,4,15,1,212,178, 
  0,0,17,1,96,211,0,0,1,4,15,1,212,178,0,0,17,1,237,210,0,0,1,4,15,1,212,178,0,0,17,1,122,210,0,0,1,4,15,1,212,178,0,0,17,1,7,210,0,0,1,4,15,1,212,178,0,0,17,1, 
  148,209,0,0,1,4,15,1,212,178,0,0,17,1,33,209,0,0,1,4,15,1,212,178,0,0,17,1,174,208,0,0,1,4,15,1,212,178,0,0,17,1,59,208,0,0,1,4,15,1,212,178,0,0,17,1,200,207,0,0, 
  1,4,15,1,212,178,0,0,17,1,151,205,0,0,1,4,19,82,0,0,0,225,0,0,0,2,0,1,4,15,1,212,178,0,0,17,1,209,176,0,0,1,4,15,1,212,178,0,0,17,1,57,146,0,0,1,4,15,1,212, 
  178,0,0,17,1,114,63,0,0,1,4,15,1,212,178,0,0,17,1,126,114,0,0,1,2,21,1,2,2,0,0,166,79,3,0,28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,83,232,205,132,84, 
  120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,88,40,12,128,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,160,15,129,34,48,143,128,81,192,206,128,82,80,206,128,95, 
  24,137,129,97,56,200,129,98,200,7,128,99,88,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,212,178,0,0,1,4,19,120,0,0, 
  0,103,1,0,0,1,0,17,1,212,178,0,0,1,4,15,1,212,178,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,212,178,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17, 
  1,212,178,0,0,1,4,15,1,212,178,0,0,17,1,18,214,0,0,1,4,15,1,212,178,0,0,17,1,159,213,0,0,1,4,15,1,212,178,0,0,17,1,44,213,0,0,1,4,15,1,212,178,0,0,17,1,185,212,0, 
  0,1,4,15,1,212,178,0,0,17,1,70,212,0,0,1,4,15,1,212,178,0,0,17,1,211,211,0,0,1,4,15,1,212,178,0,0,17,1,96,211,0,0,1,4,15,1,212,178,0,0,17,1,237,210,0,0,1,4,15, 
  1,212,178,0,0,17,1,122,210,0,0,1,4,15,1,212,178,0,0,17,1,7,210,0,0,1,4,15,1,212,178,0,0,17,1,148,209,0,0,1,4,15,1,212,178,0,0,17,1,33,209,0,0,1,4,15,1,212,178,0, 
  0,17,1,174,208,0,0,1,4,15,1,212,178,0,0,17,1,59,208,0,0,1,4,15,1,212,178,0,0,17,1,200,207,0,0,1,4,15,1,212,178,0,0,17,1,151,205,0,0,1,4,19,82,0,0,0,225,0,0,0, 
  2,0,1,4,15,1,212,178,0,0,17,1,209,176,0,0,1,4,15,1,212,178,0,0,17,1,57,146,0,0,1,4,15,1,212,178,0,0,17,1,114,63,0,0,1,4,15,1,212,178,0,0,17,1,126,114,0,0,1,2, 
  21,0,55,1,0,0,255,255,255,255,14,0,0,0,3,0,0,0,64,192,8,130,81,160,7,131,34,80,201,129,83,168,6,128,84,24,6,128,85,136,69,129,86,248,68,129,87,104,4,128,80,48,8,129,82,16,7,128,117,216, 
  3,128,118,112,3,128,120,224,2,128,121,80,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,212,178,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,212,178,0,0,1,15,1,212,178,0,0,17,1,88,91, 
  0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,212,178,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,212,178,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,212,178,0,0,1,19,64,0, 
  0,0,176,0,0,0,1,0,17,1,212,178,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,212,178,0,0,1,15,1,212,178,0,0,17,1,171,201,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,212, 
  178,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,212,178,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,212,178,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,212,178,0,0,1,15,1, 
  212,178,0,0,17,1,12,180,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,208,1,128,37,80,193,127,42,144,193,128,43,80,66,128,47,16,2,128,94,144,2,128,4,17,1,40,198,0, 
  0,1,4,17,1,165,194,0,0,1,4,17,1,10,191,0,0,1,4,17,1,135,187,0,0,1,4,17,1,236,183,0,0,1,4,17,1,141,180,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0, 
  6,208,0,128,5,208,0,128,8,19,83,0,0,0,226,0,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101, 
  48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97, 
  24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,127,182,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17, 
  1,127,182,0,0,1,4,15,1,127,182,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,127,182,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,127,182,0,0,1,4,15, 
  1,127,182,0,0,17,1,18,214,0,0,1,4,15,1,127,182,0,0,17,1,159,213,0,0,1,4,15,1,127,182,0,0,17,1,44,213,0,0,1,4,15,1,127,182,0,0,17,1,185,212,0,0,1,4,15,1,127,182,0, 
  0,17,1,70,212,0,0,1,4,15,1,127,182,0,0,17,1,211,211,0,0,1,4,15,1,127,182,0,0,17,1,96,211,0,0,1,4,15,1,127,182,0,0,17,1,237,210,0,0,1,4,15,1,127,182,0,0,17,1,122, 
  210,0,0,1,4,15,1,127,182,0,0,17,1,7,210,0,0,1,4,15,1,127,182,0,0,17,1,148,209,0,0,1,4,15,1,127,182,0,0,17,1,33,209,0,0,1,4,15,1,127,182,0,0,17,1,174,208,0,0,1, 
  4,15,1,127,182,0,0,17,1,59,208,0,0,1,4,15,1,127,182,0,0,17,1,200,207,0,0,1,4,15,1,127,182,0,0,17,1,151,205,0,0,1,4,15,1,127,182,0,0,17,1,206,174,0,0,1,4,15,1,127, 
  182,0,0,17,1,57,146,0,0,1,4,15,1,127,182,0,0,17,1,114,63,0,0,1,4,15,1,127,182,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200, 
  128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0, 
  17,1,127,182,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,127,182,0,0,1,15,1,127,182,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0, 
  0,178,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0,0,175,0,0,0,1, 
  0,17,1,127,182,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,127,182,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,127,182,0, 
  0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,127,182,0,0,1,15,1,127,182,0,0,17,1,166,183,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176,0,128,4,17,1,141, 
  180,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0, 
  0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104, 
  9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0, 
  0,1,0,17,1,222,185,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,222,185,0,0,1,4,15,1,222,185,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,222,185,0, 
  0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,222,185,0,0,1,4,15,1,222,185,0,0,17,1,18,214,0,0,1,4,15,1,222,185,0,0,17,1,159,213,0,0,1,4,15,1,222,185,0,0,17,1,44,213, 
  0,0,1,4,15,1,222,185,0,0,17,1,185,212,0,0,1,4,15,1,222,185,0,0,17,1,70,212,0,0,1,4,15,1,222,185,0,0,17,1,211,211,0,0,1,4,15,1,222,185,0,0,17,1,96,211,0,0,1,4, 
  15,1,222,185,0,0,17,1,237,210,0,0,1,4,15,1,222,185,0,0,17,1,122,210,0,0,1,4,15,1,222,185,0,0,17,1,7,210,0,0,1,4,15,1,222,185,0,0,17,1,148,209,0,0,1,4,15,1,222,185, 
  0,0,17,1,33,209,0,0,1,4,15,1,222,185,0,0,17,1,174,208,0,0,1,4,15,1,222,185,0,0,17,1,59,208,0,0,1,4,15,1,222,185,0,0,17,1,200,207,0,0,1,4,15,1,222,185,0,0,17,1, 
  151,205,0,0,1,4,15,1,222,185,0,0,17,1,206,174,0,0,1,4,15,1,222,185,0,0,17,1,57,146,0,0,1,4,15,1,222,185,0,0,17,1,114,63,0,0,1,4,15,1,222,185,0,0,17,1,126,114,0,0, 
  1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128, 
  118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,222,185,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,222,185,0,0,1,15,1,222,185,0,0,17,1,231,113,0,0, 
  1,19,80,0,0,0,221,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0, 
  176,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,222,185,0,0,1,19,64,0,0,0,173,0,0,0,1,0, 
  17,1,222,185,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,222,185,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,222,185,0,0,1,15,1,222,185,0,0,17,1,5,187,0,0,1,2,21,7,90, 
  0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,16,2,128,37,80,194,127,42,80,193,128,43,144,66,128,47,144,1,128,94,208,1,128,4,17,1,165,194,0,0,1,4,17,1,135,187,0,0,1,4,17,1,141,180, 
  0,0,1,4,17,1,10,191,0,0,1,4,17,1,40,198,0,0,1,4,17,1,236,183,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87, 
  0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12, 
  128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5, 
  128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,121,189,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,121,189,0,0,1,4,15,1,121,189,0,0,17, 
  1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,121,189,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,121,189,0,0,1,4,15,1,121,189,0,0,17,1,18,214,0,0,1,4,15, 
  1,121,189,0,0,17,1,159,213,0,0,1,4,15,1,121,189,0,0,17,1,44,213,0,0,1,4,15,1,121,189,0,0,17,1,185,212,0,0,1,4,15,1,121,189,0,0,17,1,70,212,0,0,1,4,15,1,121,189,0, 
  0,17,1,211,211,0,0,1,4,15,1,121,189,0,0,17,1,96,211,0,0,1,4,15,1,121,189,0,0,17,1,237,210,0,0,1,4,15,1,121,189,0,0,17,1,122,210,0,0,1,4,15,1,121,189,0,0,17,1,7, 
  210,0,0,1,4,15,1,121,189,0,0,17,1,148,209,0,0,1,4,15,1,121,189,0,0,17,1,33,209,0,0,1,4,15,1,121,189,0,0,17,1,174,208,0,0,1,4,15,1,121,189,0,0,17,1,59,208,0,0,1, 
  4,15,1,121,189,0,0,17,1,200,207,0,0,1,4,15,1,121,189,0,0,17,1,151,205,0,0,1,4,15,1,121,189,0,0,17,1,206,174,0,0,1,4,15,1,121,189,0,0,17,1,57,146,0,0,1,4,15,1,121, 
  189,0,0,17,1,114,63,0,0,1,4,15,1,121,189,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84, 
  248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,121,189,0,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,121,189,0,0,1,15,1,121,189,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,121,189,0,0,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,174, 
  0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,121,189,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,121,189,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,121,189,0,0,1,15,1,121,189,0,0,17,1,160,190,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,208,1,128,37,144,1,128,42,16,129,127,47,80,1,128,4,17,1,165,194,0, 
  0,1,4,17,1,135,187,0,0,1,4,17,1,40,198,0,0,1,4,17,1,141,180,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0, 
  0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128, 
  89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128, 
  127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,252,192,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,252,192,0,0,1,4,15,1,252,192,0,0,17,1, 
  133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,252,192,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,252,192,0,0,1,4,15,1,252,192,0,0,17,1,18,214,0,0,1,4,15,1, 
  252,192,0,0,17,1,159,213,0,0,1,4,15,1,252,192,0,0,17,1,44,213,0,0,1,4,15,1,252,192,0,0,17,1,185,212,0,0,1,4,15,1,252,192,0,0,17,1,70,212,0,0,1,4,15,1,252,192,0,0, 
  17,1,211,211,0,0,1,4,15,1,252,192,0,0,17,1,96,211,0,0,1,4,15,1,252,192,0,0,17,1,237,210,0,0,1,4,15,1,252,192,0,0,17,1,122,210,0,0,1,4,15,1,252,192,0,0,17,1,7,210, 
  0,0,1,4,15,1,252,192,0,0,17,1,148,209,0,0,1,4,15,1,252,192,0,0,17,1,33,209,0,0,1,4,15,1,252,192,0,0,17,1,174,208,0,0,1,4,15,1,252,192,0,0,17,1,59,208,0,0,1,4, 
  15,1,252,192,0,0,17,1,200,207,0,0,1,4,15,1,252,192,0,0,17,1,151,205,0,0,1,4,15,1,252,192,0,0,17,1,206,174,0,0,1,4,15,1,252,192,0,0,17,1,57,146,0,0,1,4,15,1,252,192, 
  0,0,17,1,114,63,0,0,1,4,15,1,252,192,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248, 
  5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,252,192,0,0,1,19,87,0,0,0,6,1,0, 
  0,1,0,17,1,252,192,0,0,1,15,1,252,192,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,252,192,0,0,1,19, 
  64,0,0,0,177,0,0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,174,0, 
  0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,252,192,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,252,192,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1, 
  252,192,0,0,1,15,1,252,192,0,0,17,1,35,194,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,144,1,128,37,208,193,127,42,16,194,128,43,80,66,128,47,80,1,128,94,144,2, 
  128,4,17,1,135,187,0,0,1,4,17,1,10,191,0,0,1,4,17,1,40,198,0,0,1,4,17,1,165,194,0,0,1,4,17,1,236,183,0,0,1,4,17,1,141,180,0,0,1,21,9,27,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99, 
  56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82, 
  200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,151,196,0,0,1,4,19,120,0,0, 
  0,103,1,0,0,1,0,17,1,151,196,0,0,1,4,15,1,151,196,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,151,196,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17, 
  1,151,196,0,0,1,4,15,1,151,196,0,0,17,1,18,214,0,0,1,4,15,1,151,196,0,0,17,1,159,213,0,0,1,4,15,1,151,196,0,0,17,1,44,213,0,0,1,4,15,1,151,196,0,0,17,1,185,212,0, 
  0,1,4,15,1,151,196,0,0,17,1,70,212,0,0,1,4,15,1,151,196,0,0,17,1,211,211,0,0,1,4,15,1,151,196,0,0,17,1,96,211,0,0,1,4,15,1,151,196,0,0,17,1,237,210,0,0,1,4,15, 
  1,151,196,0,0,17,1,122,210,0,0,1,4,15,1,151,196,0,0,17,1,7,210,0,0,1,4,15,1,151,196,0,0,17,1,148,209,0,0,1,4,15,1,151,196,0,0,17,1,33,209,0,0,1,4,15,1,151,196,0, 
  0,17,1,174,208,0,0,1,4,15,1,151,196,0,0,17,1,59,208,0,0,1,4,15,1,151,196,0,0,17,1,200,207,0,0,1,4,15,1,151,196,0,0,17,1,151,205,0,0,1,4,15,1,151,196,0,0,17,1,206, 
  174,0,0,1,4,15,1,151,196,0,0,17,1,57,146,0,0,1,4,15,1,151,196,0,0,17,1,114,63,0,0,1,4,15,1,151,196,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0, 
  0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0, 
  0,0,7,1,0,0,1,0,17,1,151,196,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,151,196,0,0,1,15,1,151,196,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,151, 
  196,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,151,196,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,151,196,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,151,196,0,0,1,19,64, 
  0,0,0,175,0,0,0,1,0,17,1,151,196,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,151,196,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,151,196,0,0,1,19,64,0,0,0,172,0,0, 
  0,1,0,17,1,151,196,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,151,196,0,0,1,15,1,151,196,0,0,17,1,190,197,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0, 
  94,208,1,128,37,16,1,128,42,144,129,127,47,80,1,128,4,17,1,40,198,0,0,1,4,17,1,135,187,0,0,1,4,17,1,165,194,0,0,1,4,17,1,141,180,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56, 
  7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200, 
  205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,26,200,0,0,1,4,19,120,0,0,0, 
  103,1,0,0,1,0,17,1,26,200,0,0,1,4,15,1,26,200,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,26,200,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1, 
  26,200,0,0,1,4,15,1,26,200,0,0,17,1,18,214,0,0,1,4,15,1,26,200,0,0,17,1,159,213,0,0,1,4,15,1,26,200,0,0,17,1,44,213,0,0,1,4,15,1,26,200,0,0,17,1,185,212,0,0, 
  1,4,15,1,26,200,0,0,17,1,70,212,0,0,1,4,15,1,26,200,0,0,17,1,211,211,0,0,1,4,15,1,26,200,0,0,17,1,96,211,0,0,1,4,15,1,26,200,0,0,17,1,237,210,0,0,1,4,15,1, 
  26,200,0,0,17,1,122,210,0,0,1,4,15,1,26,200,0,0,17,1,7,210,0,0,1,4,15,1,26,200,0,0,17,1,148,209,0,0,1,4,15,1,26,200,0,0,17,1,33,209,0,0,1,4,15,1,26,200,0,0, 
  17,1,174,208,0,0,1,4,15,1,26,200,0,0,17,1,59,208,0,0,1,4,15,1,26,200,0,0,17,1,200,207,0,0,1,4,15,1,26,200,0,0,17,1,151,205,0,0,1,4,15,1,26,200,0,0,17,1,206,174, 
  0,0,1,4,15,1,26,200,0,0,17,1,57,146,0,0,1,4,15,1,26,200,0,0,17,1,114,63,0,0,1,4,15,1,26,200,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0, 
  3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0, 
  0,7,1,0,0,1,0,17,1,26,200,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,26,200,0,0,1,15,1,26,200,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,26,200, 
  0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0, 
  0,0,175,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,26,200,0,0,1,19,64,0,0,0,172,0,0,0, 
  1,0,17,1,26,200,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,26,200,0,0,1,15,1,26,200,0,0,17,1,65,201,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94, 
  80,1,128,37,144,1,128,42,208,129,127,47,16,1,128,4,17,1,135,187,0,0,1,4,17,1,141,180,0,0,1,4,17,1,40,198,0,0,1,4,17,1,165,194,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,64,1,128,93,208,0,128,4,19,82,0,0,0,224, 
  0,0,0,3,0,14,1,4,17,1,247,201,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0, 
  0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9, 
  128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0, 
  1,0,17,1,233,203,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,233,203,0,0,1,4,15,1,233,203,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,233,203,0,0, 
  1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,233,203,0,0,1,4,15,1,233,203,0,0,17,1,18,214,0,0,1,4,15,1,233,203,0,0,17,1,159,213,0,0,1,4,15,1,233,203,0,0,17,1,44,213,0, 
  0,1,4,15,1,233,203,0,0,17,1,185,212,0,0,1,4,15,1,233,203,0,0,17,1,70,212,0,0,1,4,15,1,233,203,0,0,17,1,211,211,0,0,1,4,15,1,233,203,0,0,17,1,96,211,0,0,1,4,15, 
  1,233,203,0,0,17,1,237,210,0,0,1,4,15,1,233,203,0,0,17,1,122,210,0,0,1,4,15,1,233,203,0,0,17,1,7,210,0,0,1,4,15,1,233,203,0,0,17,1,148,209,0,0,1,4,15,1,233,203,0, 
  0,17,1,33,209,0,0,1,4,15,1,233,203,0,0,17,1,174,208,0,0,1,4,15,1,233,203,0,0,17,1,59,208,0,0,1,4,15,1,233,203,0,0,17,1,200,207,0,0,1,4,15,1,233,203,0,0,17,1,151, 
  205,0,0,1,4,15,1,233,203,0,0,17,1,206,174,0,0,1,4,15,1,233,203,0,0,17,1,57,146,0,0,1,4,15,1,233,203,0,0,17,1,114,63,0,0,1,4,15,1,233,203,0,0,17,1,126,114,0,0,1, 
  2,21,0,43,1,0,0,255,255,255,255,14,0,0,0,3,0,0,0,64,96,8,130,81,64,7,131,34,240,200,129,83,168,6,128,84,24,6,128,85,136,69,129,86,248,68,129,87,104,4,128,80,208,7,129,82,176,6,128,117, 
  216,3,128,118,112,3,128,120,224,2,128,121,80,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,233,203,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,233,203,0,0,1,15,1,233,203,0,0,17,1,231, 
  113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,233,203,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,233,203,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,233,203,0,0,1,19,64, 
  0,0,0,176,0,0,0,1,0,17,1,233,203,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,233,203,0,0,1,1,19,64,0,0,0,174,0,0,0,1,0,17,1,233,203,0,0,1,19,64,0,0,0,173,0, 
  0,0,1,0,17,1,233,203,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,233,203,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,233,203,0,0,1,15,1,233,203,0,0,17,1,21,205,0,0,1, 
  2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,80,1,128,37,80,194,127,42,16,194,128,43,144,66,128,47,208,1,128,94,144,1,128,4,17,1,10,191,0,0,1,4,17,1,141,180,0,0,1,4, 
  17,1,135,187,0,0,1,4,17,1,165,194,0,0,1,4,17,1,40,198,0,0,1,4,17,1,236,183,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,83, 
  0,0,0,227,0,0,0,3,0,14,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,160,207,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,84,0,0,0,229,0,0,0,1,0,1,21,1,191,0,0,0,147,80,3,0,10,0,0,0,3,0,0,0,128,112,2,128,1,208,1,130,2,208,1,128,70,168,68,129, 
  101,16,4,128,69,24,197,127,54,136,69,127,127,8,3,128,102,120,3,128,129,216,1,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,162,206,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,162,206, 
  0,0,1,4,15,1,162,206,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,162,206,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,162,206,0,0,1,4,15,1,162,206, 
  0,0,17,1,200,58,0,0,1,4,15,1,162,206,0,0,17,1,85,58,0,0,1,4,15,1,162,206,0,0,17,1,157,56,0,0,1,2,21,0,189,0,0,0,255,255,255,255,9,0,0,0,3,0,0,0,80,200,4,130, 
  121,24,2,128,66,88,5,128,139,176,1,128,119,56,3,128,117,168,3,128,118,64,3,128,87,56,68,127,120,168,2,128,15,1,162,206,0,0,17,1,96,207,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,162,206, 
  0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,162,206,0,0,1,1,15,1,162,206,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,162,206,0,0,1,19,139,0,0,0,143,1, 
  0,0,1,0,17,1,162,206,0,0,1,19,139,0,0,0,141,1,0,0,1,0,17,1,162,206,0,0,1,19,139,0,0,0,142,1,0,0,1,0,17,1,162,206,0,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0, 
  0,0,0,0,0,0,41,176,0,128,4,19,119,0,0,0,102,1,0,0,3,0,14,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,39,0,0,0,255,255, 
  255,255,2,0,0,0,1,0,0,0,84,48,1,128,119,208,0,128,19,84,0,0,0,228,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,19,208,0, 
  0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,85,0,0,0,231,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,119,208,0,128,85,48,193,127,19,85,0,0,0,230,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,134,208,0,0,17,1,226,205, 
  0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,243,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0, 
  86,48,1,128,119,208,0,128,19,86,0,0,0,242,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,233,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119, 
  208,0,128,19,86,0,0,0,232,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,108,209,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,255,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86, 
  0,0,0,254,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,223,209,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,247,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,246,0, 
  0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,237,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,236,0,0,0,2,0,1, 
  1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,197,210,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128, 
  5,208,0,128,8,19,86,0,0,0,1,1,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,0,1,0,0,2,0,1,1,2,21,7,36, 
  0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,56,211,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8, 
  19,86,0,0,0,249,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,248,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255, 
  255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,171,211,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0, 
  239,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,238,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0, 
  0,0,0,0,0,40,176,0,128,4,15,1,30,212,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,253,0,0,0,1, 
  0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,252,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0, 
  40,176,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,245,0,0,0,1,0,1,21,0,39, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,244,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4, 
  15,1,4,213,0,0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,235,0,0,0,1,0,1,21,0,39,0,0,0,255,255, 
  255,255,2,0,0,0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,234,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,119,213,0, 
  0,17,1,226,205,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,3,1,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,86,48,1,128,119,208,0,128,19,86,0,0,0,2,1,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,234,213,0,0,17,1,226,205, 
  0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,251,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0, 
  86,48,1,128,119,208,0,128,19,86,0,0,0,250,0,0,0,2,0,1,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,4,15,1,93,214,0,0,17,1,226,205,0,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,86,0,0,0,241,0,0,0,1,0,1,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,86,48,1,128,119, 
  208,0,128,19,86,0,0,0,240,0,0,0,2,0,1,1,2,21,1,73,0,0,0,248,81,3,0,4,0,0,0,2,0,0,0,72,24,1,128,1,16,129,128,2,16,1,128,41,176,1,128,8,4,19,69,0,0,0,193,0, 
  0,0,1,0,17,1,207,214,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,207,214,0,0,1,2,21,0,55,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,118,240,0,128,37,88,65,128,69,248,0, 
  128,1,19,118,0,0,0,101,1,0,0,2,0,1,19,118,0,0,0,100,1,0,0,2,0,1,2,21,1,50,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19, 
  37,0,0,0,101,0,0,0,1,0,17,1,58,215,0,0,1,2,21,0,61,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,122,240,0,128,37,88,65,128,65,248,0,128,1,19,122,0,0,0,105,1,0,0,2,0, 
  1,19,65,0,0,0,179,0,0,0,1,0,17,1,58,215,0,0,1,2,21,0,142,1,0,0,255,255,255,255,19,0,0,0,4,0,0,0,64,88,202,128,81,216,8,128,34,232,74,130,80,104,9,128,68,248,9,130,85,40, 
  135,130,86,152,134,130,87,8,6,128,120,232,3,128,9,224,11,130,10,80,203,128,82,72,8,128,84,184,135,128,90,120,69,129,116,112,5,128,117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,120,215,0,0, 
  17,1,166,238,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,120,215,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,120,215,0,0,1,15,1,120,215,0,0,17,1,231,113,0,0,1,19,80,0,0, 
  0,221,0,0,0,1,0,17,1,120,215,0,0,1,1,19,68,0,0,0,190,0,0,0,1,0,17,1,120,215,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,120,215,0,0,1,19,64,0,0,0,177,0,0,0, 
  1,0,17,1,120,215,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,120,215,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,120,215,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,120,215, 
  0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,120,215,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,120,215,0,0,1,19,116,0,0,0,97,1,0,0,2,0,1,19,34,0,0,0,95,0,0,0, 
  1,0,17,1,120,215,0,0,1,15,1,120,215,0,0,17,1,7,217,0,0,1,19,68,0,0,0,189,0,0,0,1,0,17,1,120,215,0,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,120,215,0,0,1,2,21, 
  7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,80,1,128,37,16,194,127,42,144,194,128,43,144,65,128,47,80,2,128,94,208,1,128,4,17,1,11,235,0,0,1,4,17,1,112,231,0,0,1,4,17,1, 
  17,228,0,0,1,4,17,1,142,224,0,0,1,4,17,1,11,221,0,0,1,4,17,1,136,217,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,9,0,0, 
  0,28,0,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8, 
  12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152, 
  5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,122,219,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,122,219,0,0,1,4,15,1,122,219,0,0, 
  17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,122,219,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,122,219,0,0,1,4,15,1,122,219,0,0,17,1,18,214,0,0,1,4, 
  15,1,122,219,0,0,17,1,159,213,0,0,1,4,15,1,122,219,0,0,17,1,44,213,0,0,1,4,15,1,122,219,0,0,17,1,185,212,0,0,1,4,15,1,122,219,0,0,17,1,70,212,0,0,1,4,15,1,122,219, 
  0,0,17,1,211,211,0,0,1,4,15,1,122,219,0,0,17,1,96,211,0,0,1,4,15,1,122,219,0,0,17,1,237,210,0,0,1,4,15,1,122,219,0,0,17,1,122,210,0,0,1,4,15,1,122,219,0,0,17,1, 
  7,210,0,0,1,4,15,1,122,219,0,0,17,1,148,209,0,0,1,4,15,1,122,219,0,0,17,1,33,209,0,0,1,4,15,1,122,219,0,0,17,1,174,208,0,0,1,4,15,1,122,219,0,0,17,1,59,208,0,0, 
  1,4,15,1,122,219,0,0,17,1,200,207,0,0,1,4,15,1,122,219,0,0,17,1,151,205,0,0,1,4,15,1,122,219,0,0,17,1,206,174,0,0,1,4,15,1,122,219,0,0,17,1,57,146,0,0,1,4,15,1, 
  122,219,0,0,17,1,47,141,0,0,1,4,15,1,122,219,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130, 
  84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,122,219,0,0,1,19,87,0,0,0,6, 
  1,0,0,1,0,17,1,122,219,0,0,1,15,1,122,219,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,122,219,0,0, 
  1,19,64,0,0,0,177,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0, 
  174,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,122,219,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,122,219,0,0,1,19,34,0,0,0,95,0,0,0,1,0, 
  17,1,122,219,0,0,1,15,1,122,219,0,0,17,1,161,220,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,80,1,128,37,16,1,128,42,144,129,127,47,208,1,128,4,17,1,142,224, 
  0,0,1,4,17,1,17,228,0,0,1,4,17,1,136,217,0,0,1,4,17,1,11,221,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,90, 
  0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12, 
  128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5, 
  128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,253,222,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,253,222,0,0,1,4,15,1,253,222,0,0,17, 
  1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,253,222,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,253,222,0,0,1,4,15,1,253,222,0,0,17,1,18,214,0,0,1,4,15, 
  1,253,222,0,0,17,1,159,213,0,0,1,4,15,1,253,222,0,0,17,1,44,213,0,0,1,4,15,1,253,222,0,0,17,1,185,212,0,0,1,4,15,1,253,222,0,0,17,1,70,212,0,0,1,4,15,1,253,222,0, 
  0,17,1,211,211,0,0,1,4,15,1,253,222,0,0,17,1,96,211,0,0,1,4,15,1,253,222,0,0,17,1,237,210,0,0,1,4,15,1,253,222,0,0,17,1,122,210,0,0,1,4,15,1,253,222,0,0,17,1,7, 
  210,0,0,1,4,15,1,253,222,0,0,17,1,148,209,0,0,1,4,15,1,253,222,0,0,17,1,33,209,0,0,1,4,15,1,253,222,0,0,17,1,174,208,0,0,1,4,15,1,253,222,0,0,17,1,59,208,0,0,1, 
  4,15,1,253,222,0,0,17,1,200,207,0,0,1,4,15,1,253,222,0,0,17,1,151,205,0,0,1,4,15,1,253,222,0,0,17,1,206,174,0,0,1,4,15,1,253,222,0,0,17,1,57,146,0,0,1,4,15,1,253, 
  222,0,0,17,1,47,141,0,0,1,4,15,1,253,222,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84, 
  248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,253,222,0,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,253,222,0,0,1,15,1,253,222,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,253,222,0,0,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,174, 
  0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,253,222,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,253,222,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,253,222,0,0,1,15,1,253,222,0,0,17,1,36,224,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,80,1,128,37,144,1,128,42,16,129,127,47,208,1,128,4,17,1,136,217,0, 
  0,1,4,17,1,17,228,0,0,1,4,17,1,142,224,0,0,1,4,17,1,11,221,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,89,0, 
  0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128, 
  89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128, 
  127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,128,226,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,128,226,0,0,1,4,15,1,128,226,0,0,17,1, 
  133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,128,226,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,128,226,0,0,1,4,15,1,128,226,0,0,17,1,18,214,0,0,1,4,15,1, 
  128,226,0,0,17,1,159,213,0,0,1,4,15,1,128,226,0,0,17,1,44,213,0,0,1,4,15,1,128,226,0,0,17,1,185,212,0,0,1,4,15,1,128,226,0,0,17,1,70,212,0,0,1,4,15,1,128,226,0,0, 
  17,1,211,211,0,0,1,4,15,1,128,226,0,0,17,1,96,211,0,0,1,4,15,1,128,226,0,0,17,1,237,210,0,0,1,4,15,1,128,226,0,0,17,1,122,210,0,0,1,4,15,1,128,226,0,0,17,1,7,210, 
  0,0,1,4,15,1,128,226,0,0,17,1,148,209,0,0,1,4,15,1,128,226,0,0,17,1,33,209,0,0,1,4,15,1,128,226,0,0,17,1,174,208,0,0,1,4,15,1,128,226,0,0,17,1,59,208,0,0,1,4, 
  15,1,128,226,0,0,17,1,200,207,0,0,1,4,15,1,128,226,0,0,17,1,151,205,0,0,1,4,15,1,128,226,0,0,17,1,206,174,0,0,1,4,15,1,128,226,0,0,17,1,57,146,0,0,1,4,15,1,128,226, 
  0,0,17,1,47,141,0,0,1,4,15,1,128,226,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248, 
  5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,128,226,0,0,1,19,87,0,0,0,6,1,0, 
  0,1,0,17,1,128,226,0,0,1,15,1,128,226,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,128,226,0,0,1,19, 
  64,0,0,0,177,0,0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,174,0, 
  0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,128,226,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,128,226,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1, 
  128,226,0,0,1,15,1,128,226,0,0,17,1,167,227,0,0,1,2,21,7,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,94,16,1,128,37,208,1,128,42,144,129,127,47,80,1,128,4,17,1,17,228,0,0, 
  1,4,17,1,11,221,0,0,1,4,17,1,136,217,0,0,1,4,17,1,142,224,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,91,0,0, 
  0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89, 
  152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127, 
  40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,3,230,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,3,230,0,0,1,4,15,1,3,230,0,0,17,1,133, 
  214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,3,230,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,3,230,0,0,1,4,15,1,3,230,0,0,17,1,18,214,0,0,1,4,15,1,3, 
  230,0,0,17,1,159,213,0,0,1,4,15,1,3,230,0,0,17,1,44,213,0,0,1,4,15,1,3,230,0,0,17,1,185,212,0,0,1,4,15,1,3,230,0,0,17,1,70,212,0,0,1,4,15,1,3,230,0,0,17, 
  1,211,211,0,0,1,4,15,1,3,230,0,0,17,1,96,211,0,0,1,4,15,1,3,230,0,0,17,1,237,210,0,0,1,4,15,1,3,230,0,0,17,1,122,210,0,0,1,4,15,1,3,230,0,0,17,1,7,210,0, 
  0,1,4,15,1,3,230,0,0,17,1,148,209,0,0,1,4,15,1,3,230,0,0,17,1,33,209,0,0,1,4,15,1,3,230,0,0,17,1,174,208,0,0,1,4,15,1,3,230,0,0,17,1,59,208,0,0,1,4,15, 
  1,3,230,0,0,17,1,200,207,0,0,1,4,15,1,3,230,0,0,17,1,151,205,0,0,1,4,15,1,3,230,0,0,17,1,206,174,0,0,1,4,15,1,3,230,0,0,17,1,57,146,0,0,1,4,15,1,3,230,0, 
  0,17,1,47,141,0,0,1,4,15,1,3,230,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5, 
  128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,3,230,0,0,1,19,87,0,0,0,6,1,0,0, 
  1,0,17,1,3,230,0,0,1,15,1,3,230,0,0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,3,230,0,0,1,19,64, 
  0,0,0,177,0,0,0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,174,0,0, 
  0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,3,230,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,3,230,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,3, 
  230,0,0,1,15,1,3,230,0,0,17,1,42,231,0,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,94,176,0,128,4,17,1,17,228,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56, 
  7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200, 
  205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,98,233,0,0,1,4,19,120,0,0,0, 
  103,1,0,0,1,0,17,1,98,233,0,0,1,4,15,1,98,233,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,98,233,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1, 
  98,233,0,0,1,4,15,1,98,233,0,0,17,1,18,214,0,0,1,4,15,1,98,233,0,0,17,1,159,213,0,0,1,4,15,1,98,233,0,0,17,1,44,213,0,0,1,4,15,1,98,233,0,0,17,1,185,212,0,0, 
  1,4,15,1,98,233,0,0,17,1,70,212,0,0,1,4,15,1,98,233,0,0,17,1,211,211,0,0,1,4,15,1,98,233,0,0,17,1,96,211,0,0,1,4,15,1,98,233,0,0,17,1,237,210,0,0,1,4,15,1, 
  98,233,0,0,17,1,122,210,0,0,1,4,15,1,98,233,0,0,17,1,7,210,0,0,1,4,15,1,98,233,0,0,17,1,148,209,0,0,1,4,15,1,98,233,0,0,17,1,33,209,0,0,1,4,15,1,98,233,0,0, 
  17,1,174,208,0,0,1,4,15,1,98,233,0,0,17,1,59,208,0,0,1,4,15,1,98,233,0,0,17,1,200,207,0,0,1,4,15,1,98,233,0,0,17,1,151,205,0,0,1,4,15,1,98,233,0,0,17,1,206,174, 
  0,0,1,4,15,1,98,233,0,0,17,1,57,146,0,0,1,4,15,1,98,233,0,0,17,1,47,141,0,0,1,4,15,1,98,233,0,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0, 
  3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0, 
  0,7,1,0,0,1,0,17,1,98,233,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,98,233,0,0,1,15,1,98,233,0,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,98,233, 
  0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0, 
  0,0,175,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,98,233,0,0,1,19,64,0,0,0,172,0,0,0, 
  1,0,17,1,98,233,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,98,233,0,0,1,15,1,98,233,0,0,17,1,137,234,0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45, 
  144,1,128,37,80,194,127,42,144,194,128,43,80,65,128,47,16,2,128,94,208,1,128,4,17,1,112,231,0,0,1,4,17,1,11,235,0,0,1,4,17,1,17,228,0,0,1,4,17,1,11,221,0,0,1,4,17,1,142,224, 
  0,0,1,4,17,1,136,217,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3, 
  0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10, 
  128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19, 
  121,0,0,0,104,1,0,0,1,0,17,1,253,236,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,253,236,0,0,1,4,15,1,253,236,0,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0, 
  1,0,17,1,253,236,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,253,236,0,0,1,4,15,1,253,236,0,0,17,1,18,214,0,0,1,4,15,1,253,236,0,0,17,1,159,213,0,0,1,4,15,1,253, 
  236,0,0,17,1,44,213,0,0,1,4,15,1,253,236,0,0,17,1,185,212,0,0,1,4,15,1,253,236,0,0,17,1,70,212,0,0,1,4,15,1,253,236,0,0,17,1,211,211,0,0,1,4,15,1,253,236,0,0,17, 
  1,96,211,0,0,1,4,15,1,253,236,0,0,17,1,237,210,0,0,1,4,15,1,253,236,0,0,17,1,122,210,0,0,1,4,15,1,253,236,0,0,17,1,7,210,0,0,1,4,15,1,253,236,0,0,17,1,148,209,0, 
  0,1,4,15,1,253,236,0,0,17,1,33,209,0,0,1,4,15,1,253,236,0,0,17,1,174,208,0,0,1,4,15,1,253,236,0,0,17,1,59,208,0,0,1,4,15,1,253,236,0,0,17,1,200,207,0,0,1,4,15, 
  1,253,236,0,0,17,1,151,205,0,0,1,4,15,1,253,236,0,0,17,1,206,174,0,0,1,4,15,1,253,236,0,0,17,1,57,146,0,0,1,4,15,1,253,236,0,0,17,1,47,141,0,0,1,4,15,1,253,236,0, 
  0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82, 
  136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,253,236,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,253,236,0,0,1,15,1,253,236,0, 
  0,17,1,88,91,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,253,236,0, 
  0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0, 
  0,173,0,0,0,1,0,17,1,253,236,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,253,236,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,253,236,0,0,1,15,1,253,236,0,0,17,1,36,238, 
  0,0,1,2,21,7,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,45,144,2,128,37,208,193,127,42,80,194,128,43,144,65,128,47,16,2,128,94,80,1,128,4,17,1,17,228,0,0,1,4,17,1,112,231,0, 
  0,1,4,17,1,142,224,0,0,1,4,17,1,11,221,0,0,1,4,17,1,136,217,0,0,1,4,17,1,11,235,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128, 
  8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,39,0,0,0,93,82,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,79,248,0,128,8,4,17,1,206,238,0,0,1,2,21,1,50,0,0,0, 
  176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,1,239,0,0,1,2,21,0,61,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,90,240,0,128,37,88,65,128,65,248,0,128,1,19,90,0,0,0,11,1,0,0,3,0,1,19,65,0,0,0,179,0,0,0,1,0,17,1,1,239,0,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,116,208,0,128,75,48,1,128,19,75,0,0,0,209,0,0,0,2,0,1,1,2,21,1,69,0,0,0,100,58,3,0,5,0,0,0,2,0,0,0,120,48,1,128,1,176,1,128,2,176,129,128,123,112,1, 
  128,10,184,1,128,4,17,1,159,240,0,0,1,4,17,1,33,240,0,0,1,8,4,15,1,184,239,0,0,17,1,107,27,0,0,1,19,113,0,0,0,92,1,0,0,1,0,1,21,0,40,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,184,239,0,0,17,1,225,239,0,0,1,1,2,21,1,51,0,0,0,228,61,3,0,4,0,0,0,2,0,0,0,120,80,1,128,1,144,1,128,2,144,1,128,123, 
  16,1,128,4,17,1,229,44,0,0,1,4,17,1,31,45,0,0,1,8,19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,57,0,0,0,158,63,3,0,4,0,0,0,2,0,0,0,120,136,1,128,1,128,1,128,2, 
  128,65,128,10,16,1,128,4,15,1,215,45,0,0,17,1,107,27,0,0,1,8,4,17,1,102,240,0,0,1,19,113,0,0,0,83,1,0,0,2,0,1,21,1,45,0,0,0,53,60,3,0,3,0,0,0,1,0,0,0, 
  2,96,129,128,1,96,1,128,10,240,0,128,4,15,1,48,33,0,0,17,1,107,27,0,0,1,8,19,113,0,0,0,81,1,0,0,3,0,1,21,1,57,0,0,0,82,59,3,0,4,0,0,0,2,0,0,0,10,80,1, 
  128,1,192,1,128,2,192,129,127,123,16,1,128,4,17,1,228,240,0,0,1,4,15,1,25,44,0,0,17,1,59,31,0,0,1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,45,0,0,0,53,60,3,0,3,0, 
  0,0,1,0,0,0,2,240,128,128,1,240,0,128,10,248,0,128,8,4,15,1,39,32,0,0,17,1,107,27,0,0,1,19,113,0,0,0,87,1,0,0,3,0,1,21,1,85,0,0,0,128,64,3,0,6,0,0,0,2, 
  0,0,0,136,184,1,128,1,56,130,128,2,56,2,128,25,64,66,128,33,80,65,128,137,248,1,128,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,172,22,0,0,1,4,17,1,89,21,0,0,1,8,4,19,131, 
  0,0,0,116,1,0,0,2,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,176,0,0,0,188,37,3,0,11,0,0,0,3,0,0,0,112,40,3,128,1,240,1,129,2,240,1,128,31,16,197,129,76,8,4,128, 
  41,120,4,129,6,240,129,128,7,240,1,127,110,152,3,128,129,144,2,128,135,248,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,106,15,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,106,15, 
  0,0,1,4,15,1,106,15,0,0,17,1,185,242,0,0,1,4,15,1,106,15,0,0,17,1,47,242,0,0,1,4,15,1,106,15,0,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,106, 
  15,0,0,1,4,15,1,106,15,0,0,17,1,122,3,0,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0, 
  101,0,0,0,1,0,17,1,210,14,0,0,1,4,15,1,210,14,0,0,17,1,122,3,0,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176, 
  1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,174,38,0,0,1,4,15,1,174,38,0,0,17,1,122,3,0,0,1,2,21,1,180,0,0,0,166,82,3,0,11,0,0,0,3,0,0,0,113,104,4,128,1, 
  240,193,127,2,240,129,129,67,56,133,129,116,48,3,128,117,200,2,128,118,96,2,128,111,208,196,128,114,0,4,128,115,152,3,128,119,248,1,128,8,4,19,111,0,0,0,66,1,0,0,2,0,1,4,19,111,0,0,0,64, 
  1,0,0,2,0,1,4,19,111,0,0,0,59,1,0,0,2,0,1,4,19,111,0,0,0,65,1,0,0,2,0,1,4,19,111,0,0,0,61,1,0,0,2,0,1,4,19,111,0,0,0,60,1,0,0,2,0,1,4,19, 
  111,0,0,0,62,1,0,0,2,0,1,4,19,111,0,0,0,67,1,0,0,2,0,1,4,19,111,0,0,0,63,1,0,0,2,0,1,2,21,0,184,1,0,0,255,255,255,255,21,0,0,0,4,0,0,0,61,144,139,129, 
  113,208,6,128,114,64,198,131,115,176,197,131,75,112,10,128,37,200,12,128,77,8,74,128,109,128,72,131,110,240,7,128,121,32,5,128,74,0,11,128,59,96,76,126,60,248,203,129,13,48,205,124,78,160,137,126,79,16,73,128, 
  111,96,7,128,130,144,4,128,131,40,4,128,140,192,3,128,141,48,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,110,243,0,0,1,15,1,110,243,0,0,17,1,174,248,0,0,1,15,1,110,243,0,0,17,1,211, 
  247,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,110,243,0,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,110,243,0,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,110,243,0,0,1,19,77, 
  0,0,0,214,0,0,0,1,0,17,1,110,243,0,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,110,243,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,110,243,0,0,1,19,74,0,0,0,207,0,0, 
  0,1,0,17,1,110,243,0,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,110,243,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,110,243,0,0,1,15,1,110,243,0,0,17,1,51,50,0,0,1,15, 
  1,110,243,0,0,17,1,152,245,0,0,1,19,60,0,0,0,163,0,0,0,1,0,17,1,110,243,0,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,110,243,0,0,1,15,1,110,243,0,0,17,1,197,47,0,0, 
  1,15,1,110,243,0,0,17,1,93,245,0,0,1,15,1,110,243,0,0,17,1,39,245,0,0,1,15,1,110,243,0,0,17,1,155,8,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,110,243,0,0,1,2,21, 
  1,53,0,0,0,9,37,3,0,5,0,0,0,2,0,0,0,32,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,61,0,0,0,165,0,0,0,3,0,14,1,2,21,1,47,0,0,0,93, 
  37,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,66,56,1,128,8,4,17,1,154,9,0,0,1,19,59,0,0,0,162,0,0,0,1,0,1,21,1,217,0,0,0,140,57, 
  3,0,13,0,0,0,3,0,0,0,112,160,2,128,1,192,6,129,2,192,134,129,31,72,197,129,76,80,6,128,41,16,131,129,6,192,198,128,7,192,6,127,82,48,2,128,110,64,4,128,127,176,132,128,129,168,3,128,135,184, 
  5,128,4,15,1,125,246,0,0,17,1,220,13,0,0,1,4,15,1,125,246,0,0,17,1,185,242,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,125,246,0,0,1,4,19,121,0,0,0,104,1,0,0,1, 
  0,17,1,125,246,0,0,1,4,15,1,125,246,0,0,17,1,105,38,0,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,125,246,0,0,1,4,15,1,125,246,0,0,17,1,116,10,0,0,1,4,19,130,0,0, 
  0,115,1,0,0,1,0,17,1,125,246,0,0,1,4,15,1,125,246,0,0,17,1,40,12,0,0,1,8,19,78,0,0,0,219,0,0,0,1,0,1,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61, 
  224,9,129,113,72,10,128,114,104,71,130,115,232,69,131,77,88,132,128,37,96,4,128,109,200,196,130,110,216,6,128,111,200,3,128,121,208,2,128,74,72,6,128,130,192,8,128,140,88,8,128,13,200,199,124,78,88,68,126,79, 
  88,69,126,131,96,3,128,141,80,9,128,19,109,0,0,0,56,1,0,0,1,0,17,1,125,246,0,0,1,15,1,125,246,0,0,17,1,74,43,0,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,125,246,0,0,1, 
  1,15,1,125,246,0,0,17,1,155,8,0,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,125,246,0,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,125,246,0,0,1,19,78,0,0,0,217,0,0,0,2, 
  0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,125,246,0,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,125,246,0,0,1,19,77,0,0,0,216,0,0,0,2,0,1,19,61,0,0,0,166,0,0,0,1, 
  0,17,1,125,246,0,0,1,15,1,125,246,0,0,17,1,109,46,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,125,246,0,0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,125,246,0,0,1,15,1,125, 
  246,0,0,17,1,58,46,0,0,1,19,77,0,0,0,215,0,0,0,2,0,1,2,21,1,69,0,0,0,100,58,3,0,5,0,0,0,2,0,0,0,120,112,1,128,1,176,1,128,2,176,129,128,123,48,1,128,10,184,1, 
  128,4,17,1,105,248,0,0,1,4,17,1,36,248,0,0,1,8,4,15,1,124,44,0,0,17,1,107,27,0,0,1,19,113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,82,59,3,0,4,0,0,0,2,0, 
  0,0,10,88,1,128,1,80,1,128,2,80,129,127,123,16,1,128,4,17,1,228,240,0,0,1,8,4,15,1,25,44,0,0,17,1,59,31,0,0,1,19,113,0,0,0,82,1,0,0,2,0,1,21,1,57,0,0,0,158, 
  63,3,0,4,0,0,0,2,0,0,0,120,136,1,128,1,16,1,128,2,16,65,128,10,24,1,128,8,4,15,1,215,45,0,0,17,1,107,27,0,0,1,4,17,1,102,240,0,0,1,19,113,0,0,0,83,1,0,0,2, 
  0,1,21,1,85,0,0,0,128,64,3,0,6,0,0,0,2,0,0,0,136,184,1,128,1,248,129,128,2,248,1,128,25,0,66,128,33,80,65,128,137,104,2,128,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1, 
  172,22,0,0,1,8,4,19,131,0,0,0,116,1,0,0,2,0,1,4,17,1,89,21,0,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,0,84,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,37,168,129, 
  128,13,16,194,127,61,160,1,128,79,16,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,15,249,0,0,1,1,15,1,15,249,0,0,17,1,100,249,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,15,249, 
  0,0,1,2,21,1,39,0,0,0,171,87,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,47,0,0, 
  0,0,99,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,210,249,0,0,1,8,19,38,0,0,0,109,0,0,0,3,0,1,21,1,167,4,0,0, 
  240,65,3,0,31,0,0,0,4,0,0,0,96,88,18,135,1,112,4,132,2,112,132,131,99,200,14,128,84,104,95,133,101,240,11,128,6,112,68,131,7,112,68,131,88,216,27,128,89,168,26,128,10,152,228,130,91,72,24,128, 
  92,24,23,128,93,232,21,128,94,184,20,128,31,200,227,129,34,248,162,128,81,200,161,129,82,152,160,129,86,56,222,129,87,8,29,128,90,120,25,128,95,136,83,129,97,40,145,129,98,248,143,129,100,152,13,128,102,72,10,128, 
  127,72,9,128,128,72,7,128,129,72,5,128,130,120,4,128,8,4,15,1,237,102,1,0,15,1,249,102,1,0,15,1,5,103,1,0,17,1,170,102,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0, 
  7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,102,1,0,15,1,158,102,1,0,17,1,3,101,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19, 
  87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,102,1,0,15,1,158,102,1,0,17,1,3,101,1,0,1,4,15,1,237,102,1,0,15,1, 
  158,102,1,0,15,1,3,101,1,0,15,1,196,100,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237, 
  102,1,0,15,1,158,102,1,0,17,1,3,101,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,102,1,0,15,1,158,102, 
  1,0,17,1,3,101,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0, 
  15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99, 
  1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0, 
  15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1, 
  237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,237,102,1,0,15,1, 
  158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,97,97,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1, 
  3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0, 
  1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1, 
  88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,237,102, 
  1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,17,1,55,75,1,0,1,4, 
  15,1,237,102,1,0,15,1,158,102,1,0,15,1,3,101,1,0,17,1,232,61,1,0,1,4,15,1,237,102,1,0,15,1,151,17,1,0,17,1,122,254,0,0,1,2,21,1,229,3,0,0,143,73,3,0,28,0,0,0, 
  4,0,0,0,96,120,143,134,1,16,4,132,2,16,132,131,99,120,12,128,84,120,218,132,101,0,10,128,86,120,153,132,87,120,24,128,40,120,221,130,89,120,22,128,90,120,21,128,91,120,20,128,92,120,19,128,93,120,18,128, 
  94,120,17,128,31,136,94,129,34,232,157,128,81,120,28,129,82,120,27,129,88,120,23,128,95,120,80,129,97,120,142,129,98,120,13,128,100,120,11,128,102,136,8,128,127,184,7,128,128,232,5,128,129,24,4,128,8,4,19,121, 
  0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,88,17,1,0,17,1,3,101,1,0,1,4,19,120,0,0, 
  0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,88,17,1,0,17,1,3,101,1,0,1,4,15,1,88,17,1,0, 
  15,1,3,101,1,0,15,1,196,100,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,88,17,1,0,17, 
  1,3,101,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,88,17,1,0,17,1,3,101,1,0,1,4,15,1,88,17,1,0, 
  15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1, 
  88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0, 
  1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  186,98,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,48,98,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1, 
  88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,88,17,1,0,15,1,3,101, 
  1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,88,17,1,0, 
  15,1,3,101,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1, 
  88,17,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,163,2,1,0,17,1,96,2,1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,17,1,55,75, 
  1,0,1,4,15,1,88,17,1,0,15,1,3,101,1,0,17,1,232,61,1,0,1,2,21,1,66,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0, 
  0,101,0,0,0,1,0,19,65,0,0,0,179,0,0,0,1,0,19,36,0,0,0,100,0,0,0,2,0,1,2,21,7,47,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,56,1,128,125,208,0,128,4,19,10, 
  0,0,0,30,0,0,0,3,0,1,4,17,1,238,2,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,163,0,0,0,222,74,3,0,6,0,0,0, 
  2,0,0,0,41,200,3,129,1,80,193,127,2,80,65,128,54,248,130,128,69,40,2,128,70,88,1,128,8,4,15,1,120,16,1,0,15,1,64,17,1,0,15,1,76,17,1,0,17,1,33,16,1,0,1,4,15,1,120,16, 
  1,0,15,1,64,17,1,0,15,1,76,17,1,0,17,1,202,15,1,0,1,4,15,1,120,16,1,0,15,1,64,17,1,0,15,1,76,17,1,0,17,1,115,15,1,0,1,4,19,37,0,0,0,101,0,0,0,1,0,19, 
  65,0,0,0,179,0,0,0,1,0,15,1,120,16,1,0,15,1,64,17,1,0,17,1,146,3,1,0,1,2,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,4,17,1,215,3,1,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,35,0,0,0,98,0,0,0,1,0,1,21,1,79,3,0,0,112,77,3,0,28,0,0,0,4,0,0,0,96,200,141, 
  134,1,16,4,132,2,16,132,131,99,88,11,128,84,184,214,132,101,64,9,128,86,232,149,132,87,24,21,128,88,72,20,128,89,120,19,128,10,8,90,130,91,216,17,128,92,8,17,128,93,56,16,128,94,104,15,128,31,152,89, 
  129,34,40,153,128,81,88,24,129,82,136,23,129,90,168,18,128,95,152,78,129,97,248,140,129,98,40,12,128,100,136,10,128,102,248,7,128,127,88,7,128,128,184,5,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0, 
  1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,124,68,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6, 
  1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,124,68,0,0,1,4,15,1,124,68,0,0,15,1,221,13,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0, 
  5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,124,68,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34, 
  0,0,0,95,0,0,0,1,0,17,1,124,68,0,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1, 
  0,17,1,206,99,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1, 
  4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,124,68,0,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,235,97,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1, 
  0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,124,68,0, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15, 
  1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,124,68,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179, 
  81,1,0,1,4,15,1,124,68,0,0,17,1,97,7,1,0,1,4,15,1,124,68,0,0,17,1,232,61,1,0,1,4,15,1,85,7,1,0,17,1,39,7,1,0,1,2,21,1,45,0,0,0,93,78,3,0,3,0,0, 
  0,1,0,0,0,2,240,128,128,1,240,0,128,40,248,0,128,8,4,15,1,163,2,1,0,17,1,96,2,1,0,1,2,19,35,0,0,0,97,0,0,0,3,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4, 
  0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94, 
  72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1, 
  0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0, 
  0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,15,1,221,13,1,0,17,1,112,100,1,0,1,4,19,87,0, 
  0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0, 
  19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,206,99,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1, 
  0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,86,67,0, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97, 
  97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,86, 
  67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1, 
  0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17, 
  1,179,81,1,0,1,4,15,1,86,67,0,0,17,1,159,10,1,0,1,4,15,1,86,67,0,0,17,1,232,61,1,0,1,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3, 
  132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153, 
  128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7, 
  1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0, 
  0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,15,1,221,13,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64, 
  0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,86,67,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1, 
  0,17,1,86,67,0,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1, 
  4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,86,67,0,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,117,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1, 
  0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,86,67,0, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121, 
  93,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,86,67,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,86, 
  67,0,0,17,1,159,10,1,0,1,4,15,1,86,67,0,0,17,1,232,61,1,0,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,46,64,65,128,60,208,0,128,4,15,1,103,15,1,0,17,1, 
  119,14,1,0,1,4,17,1,52,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,117,0,0,0,98,1,0,0,1,0,1,21,1,66,0,0,0,176,36, 
  3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1,0,19,65,0,0,0,179,0,0,0,1,0,19,80,0,0,0,222,0,0,0,3,0,1,2,21, 
  1,50,0,0,0,59,77,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,72,248,0,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,170,14,1,0,1,2,21,7,47,0,0,0,255,255,255,255, 
  2,0,0,0,1,0,0,0,44,56,65,128,62,208,0,128,4,19,88,0,0,0,9,1,0,0,3,0,1,4,17,1,245,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5, 
  208,0,128,8,2,21,1,50,0,0,0,59,77,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,72,248,0,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,40,15,1,0,1,2,21,7,35,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,62,176,0,128,4,19,88,0,0,0,8,1,0,0,5,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,19, 
  117,0,0,0,99,1,0,0,2,0,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15,1,190,15,1,0,17,1,119,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,66,0,0,0,184,0,0,0,1,0,1,19,66,0,0,0,181,0,0,0,2,0,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128, 
  4,15,1,21,16,1,0,17,1,119,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,66,0,0,0,183,0,0,0,1,0,1,19,66,0,0,0,180,0, 
  0,0,2,0,1,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15,1,108,16,1,0,17,1,119,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6, 
  208,0,128,5,208,0,128,8,19,66,0,0,0,185,0,0,0,1,0,1,19,66,0,0,0,182,0,0,0,2,0,1,21,0,123,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,35,216,2,128,37,72,194,128,10,208, 
  195,128,11,104,67,127,65,224,1,128,66,80,1,128,19,35,0,0,0,99,0,0,0,1,0,17,1,120,16,1,0,1,15,1,120,16,1,0,17,1,210,60,0,0,1,19,65,0,0,0,179,0,0,0,1,0,17,1,120,16, 
  1,0,1,19,11,0,0,0,31,0,0,0,1,0,17,1,120,16,1,0,1,15,1,120,16,1,0,17,1,244,16,1,0,1,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,44,64,1,128,125,208, 
  0,128,4,19,10,0,0,0,29,0,0,0,5,0,14,1,4,17,1,4,60,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,19,11,0,0,0,31,0,0, 
  0,1,0,1,19,35,0,0,0,99,0,0,0,1,0,1,21,7,35,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,4,19,68,0,0,0,192,0,0,0,3,0,1,21,9,27,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,126,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,64,216,201,128,81,176,8,128,34,104,74,130,80,64,9,128,68,208,9,130,85,0,71, 
  130,86,112,70,130,87,224,5,128,120,200,3,128,9,96,203,129,10,208,202,128,82,32,8,128,84,144,7,128,90,80,5,129,117,192,4,128,118,88,4,128,121,56,3,128,122,208,2,128,15,1,151,17,1,0,17,1,5,103,1, 
  0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,151,17,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,151,17,1,0,1,15,1,151,17,1,0,17,1,169,61,1,0,1,19,80,0,0,0,221,0,0,0, 
  1,0,17,1,151,17,1,0,1,19,68,0,0,0,190,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,151,17, 
  1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0, 
  0,0,173,0,0,0,1,0,17,1,151,17,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,151,17,1,0,1,1,19,34,0,0,0,95,0,0,0,1,0,17,1,151,17,1,0,1,15,1,151,17,1,0,17,1, 
  22,19,1,0,1,19,68,0,0,0,189,0,0,0,1,0,17,1,151,17,1,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,151,17,1,0,1,2,21,1,99,0,0,0,31,100,3,0,8,0,0,0,3,0,0,0, 
  25,144,65,129,1,208,194,127,2,208,66,129,35,208,1,128,36,216,2,128,33,144,2,128,30,80,2,128,34,16,2,128,4,17,1,149,56,1,0,1,4,17,1,92,51,1,0,1,4,17,1,72,46,1,0,1,4,17,1,76, 
  41,1,0,1,4,17,1,80,36,1,0,1,8,4,17,1,133,19,1,0,1,19,9,0,0,0,28,0,0,0,1,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2, 
  240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81, 
  56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0, 
  0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,245,34,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0, 
  178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,245,34,1,0,1,4,15,1,245,34,1,0,15,1,182,34,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0, 
  0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,245,34,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,245,34,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15, 
  1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,245,34,1,0,15,1,88, 
  100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1, 
  0,17,1,117,98,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1, 
  4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,245,34,1,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,146,96,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1, 
  0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,245,34,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,245,34,1, 
  0,17,1,88,26,1,0,1,4,15,1,245,34,1,0,17,1,195,22,1,0,1,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150, 
  132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78, 
  129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0, 
  0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0, 
  0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,15,1,1,26,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0, 
  0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98, 
  118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1, 
  0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17, 
  1,255,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15, 
  1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,98,118,0,0,15,1,88, 
  100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1, 
  0,17,1,28,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1, 
  4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,98,118,0,0,15, 
  1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,98,118,0,0,17,1,47,141,0,0,1,4,15, 
  1,98,118,0,0,17,1,112,116,0,0,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,46,208,64,128,60,16,1,128,4,17,1,215,91,0,0,1,4,15,1,103,15,1,0,17,1,119,14,1,0, 
  1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19,117,0,0,0,98,1,0,0,1,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168, 
  77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120, 
  25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19, 
  87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0, 
  1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15,1,212,32,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0, 
  0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0, 
  95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  206,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1, 
  144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,235,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4, 
  15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,144,33,1,0,15,1, 
  88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,53,96, 
  1,0,17,1,121,93,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0, 
  1,4,15,1,144,33,1,0,17,1,150,29,1,0,1,4,15,1,144,33,1,0,17,1,195,22,1,0,1,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131, 
  99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128, 
  82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0, 
  19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0, 
  0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15,1,212,32,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0, 
  0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33, 
  1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,144,33, 
  1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  117,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1, 
  144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,146,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4, 
  15,1,144,33,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,144,33,1,0,17,1, 
  150,29,1,0,1,4,15,1,144,33,1,0,17,1,195,22,1,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1,128,10,4,17,1,52,14, 
  1,0,1,6,17,1,19,33,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,120,1,129,1,48,129,128,2,48,1,128,41,120,1,128,72,56,1, 
  128,10,12,17,1,80,33,1,0,1,12,19,117,0,0,0,98,1,0,0,1,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15,1,103,15,1,0,17,1,119,14,1,0,1, 
  21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,37,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168, 
  7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,144,33,1,0,1,19,87,0,0, 
  0,6,1,0,0,1,0,17,1,144,33,1,0,1,15,1,144,33,1,0,17,1,212,32,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,144,33, 
  1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0, 
  0,0,174,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,144,33,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,144,33,1,0,1,19,34,0,0,0,95,0,0,0, 
  1,0,17,1,144,33,1,0,1,19,34,0,0,0,93,0,0,0,2,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,80,1,128,2,80,1,128,27,16,1,128,6,17,1,19, 
  33,1,0,1,10,4,17,1,52,14,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84, 
  248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,245,34,1,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,245,34,1,0,1,15,1,245,34,1,0,17,1,182,34,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,245,34,1,0,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,174, 
  0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,245,34,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,245,34,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,245,34,1,0,1,15,1,245,34,1,0,17,1,28,36,1,0,1,2,21,1,39,0,0,0,31,100,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,36,240,0,128,4,17,1,133,19,1,0,1,8,19, 
  34,0,0,0,92,0,0,0,3,0,14,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248, 
  20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104, 
  10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0, 
  0,0,1,0,17,1,205,39,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,205,39, 
  1,0,1,4,15,1,205,39,1,0,15,1,142,39,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,205, 
  39,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,205,39,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1, 
  100,100,1,0,17,1,19,100,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99, 
  1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,205,39, 
  1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  166,97,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1, 
  205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,205,39,1,0,15,1,88,100, 
  1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,109,93,1,0, 
  17,1,30,90,1,0,1,4,15,1,205,39,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,205,39,1,0,17,1,88,26,1,0,1,4,15,1,205,39,1,0,17,1,195,22,1,0, 
  1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,16,1,128,2,16,1,128,27,24,1,128,10,6,17,1,19,33,1,0,1,4,17,1,52,14,1,0,1,19,117,0,0,0,98,1, 
  0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117, 
  184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,205,39,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,205,39,1,0,1,15,1,205,39,1,0,17,1,142, 
  39,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,205,39,1,0,1,19,64, 
  0,0,0,176,0,0,0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,173,0,0, 
  0,1,0,17,1,205,39,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,205,39,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,205,39,1,0,1,15,1,205,39,1,0,17,1,244,40,1,0,1,2, 
  21,1,75,0,0,0,31,100,3,0,6,0,0,0,2,0,0,0,36,144,1,128,1,16,2,129,2,16,130,128,35,80,1,128,30,24,2,128,33,208,1,128,4,17,1,92,51,1,0,1,4,17,1,133,19,1,0,1,4,17, 
  1,80,36,1,0,1,8,4,17,1,76,41,1,0,1,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56, 
  11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104, 
  215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64, 
  0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,201,44,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1, 
  0,19,34,0,0,0,95,0,0,0,1,0,17,1,201,44,1,0,1,4,15,1,201,44,1,0,15,1,138,44,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0, 
  1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,201,44,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,201,44,1,0, 
  1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,201,44,1,0, 
  15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1, 
  100,100,1,0,17,1,255,98,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98, 
  1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,201,44, 
  1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  146,96,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1, 
  201,44,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,201,44,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,201,44,1,0,17,1,88,26, 
  1,0,1,4,15,1,201,44,1,0,17,1,195,22,1,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,144,1,128,2,144,1,128,27,80,1,128,4,17,1,52,14,1,0,1, 
  6,17,1,19,33,1,0,1,10,19,117,0,0,0,98,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85, 
  104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,201,44,1,0,1,19,87,0,0,0,6,1,0,0,1,0, 
  17,1,201,44,1,0,1,15,1,201,44,1,0,17,1,138,44,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0, 
  0,177,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0,0,174,0,0,0,1, 
  0,17,1,201,44,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,201,44,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,201,44,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,201,44,1, 
  0,1,15,1,201,44,1,0,17,1,240,45,1,0,1,2,21,1,75,0,0,0,31,100,3,0,6,0,0,0,2,0,0,0,36,16,2,128,1,80,2,129,2,80,130,128,35,208,1,128,30,80,1,128,33,144,1,128,4,17, 
  1,76,41,1,0,1,4,17,1,80,36,1,0,1,4,17,1,92,51,1,0,1,4,17,1,133,19,1,0,1,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0, 
  0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72, 
  15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0, 
  0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,197,49,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0, 
  6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,197,49,1,0,1,4,15,1,197,49,1,0,15,1,134,49,1,0,17,1,112,100,1,0,1,4,19,87,0,0, 
  0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,197,49,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19, 
  34,0,0,0,95,0,0,0,1,0,17,1,197,49,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,206,99,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0, 
  1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,197,49,1,0, 
  15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1, 
  100,100,1,0,17,1,235,97,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97, 
  1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,197,49, 
  1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0, 
  15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,197,49,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1, 
  179,81,1,0,1,4,15,1,197,49,1,0,17,1,88,26,1,0,1,4,15,1,197,49,1,0,17,1,195,22,1,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,16,1,128, 
  2,16,1,128,27,24,1,128,10,6,17,1,19,33,1,0,1,4,17,1,52,14,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81, 
  24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1, 
  197,49,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,197,49,1,0,1,15,1,197,49,1,0,17,1,134,49,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,178, 
  0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17, 
  1,197,49,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,197,49,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,197,49,1,0,1, 
  19,34,0,0,0,95,0,0,0,1,0,17,1,197,49,1,0,1,15,1,197,49,1,0,17,1,236,50,1,0,1,2,21,1,99,0,0,0,31,100,3,0,8,0,0,0,3,0,0,0,25,16,66,129,1,16,195,127,2,16, 
  67,129,35,208,2,128,36,80,2,128,33,144,2,128,30,144,1,128,34,208,1,128,4,17,1,76,41,1,0,1,4,17,1,72,46,1,0,1,4,17,1,149,56,1,0,1,4,17,1,133,19,1,0,1,4,17,1,80,36,1, 
  0,1,4,17,1,92,51,1,0,1,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152, 
  150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120, 
  78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178, 
  0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,22,55,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0, 
  0,0,95,0,0,0,1,0,17,1,22,55,1,0,1,4,15,1,22,55,1,0,15,1,154,54,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34, 
  0,0,0,95,0,0,0,1,0,17,1,22,55,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,22,55,1,0,1,4,15,1, 
  22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,22,55,1,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,255,98,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4, 
  15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,22,55,1,0,15,1, 
  88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,28,97,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0, 
  1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,22,55,1,0, 
  15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,22,55,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,22,55,1,0,17,1,88,26,1,0,1,4, 
  15,1,22,55,1,0,17,1,195,22,1,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,52,14,1,0,1,10,6,17,1, 
  217,54,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,120,1,129,1,112,129,128,2,112,1,128,41,120,1,128,72,48,1,128,12,17,1,80,33, 
  1,0,1,10,12,19,117,0,0,0,98,1,0,0,1,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129, 
  86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,22,55,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,22, 
  55,1,0,1,15,1,22,55,1,0,17,1,154,54,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,177,0, 
  0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1, 
  22,55,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,22,55,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,22,55,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,22,55,1,0,1,15, 
  1,22,55,1,0,17,1,61,56,1,0,1,2,21,1,75,0,0,0,31,100,3,0,6,0,0,0,2,0,0,0,36,24,2,128,1,16,2,129,2,16,130,128,35,80,1,128,30,208,1,128,33,144,1,128,4,17,1,92,51, 
  1,0,1,4,17,1,80,36,1,0,1,4,17,1,76,41,1,0,1,8,4,17,1,133,19,1,0,1,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96, 
  168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31, 
  120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0, 
  19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,18,60,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0, 
  0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,18,60,1,0,1,4,15,1,18,60,1,0,15,1,211,59,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1, 
  0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,18,60,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0, 
  0,95,0,0,0,1,0,17,1,18,60,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17, 
  1,206,99,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15, 
  1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,18,60,1,0,15,1,88, 
  100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1, 
  0,17,1,235,97,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1, 
  4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,18,60,1,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,53, 
  96,1,0,17,1,121,93,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,18,60,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1, 
  0,1,4,15,1,18,60,1,0,17,1,88,26,1,0,1,4,15,1,18,60,1,0,17,1,195,22,1,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1, 
  128,27,88,1,128,10,4,17,1,52,14,1,0,1,6,17,1,19,33,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130, 
  34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,18,60,1, 
  0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,18,60,1,0,1,15,1,18,60,1,0,17,1,211,59,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,18,60,1,0,1,19,64,0,0,0,178,0,0,0, 
  1,0,17,1,18,60,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,18,60,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,18,60,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,18,60, 
  1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,18,60,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,18,60,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,18,60,1,0,1,19,34,0, 
  0,0,95,0,0,0,1,0,17,1,18,60,1,0,1,15,1,18,60,1,0,17,1,57,61,1,0,1,2,21,1,99,0,0,0,31,100,3,0,8,0,0,0,3,0,0,0,25,80,66,129,1,208,194,127,2,208,66,129,35, 
  144,2,128,36,144,1,128,33,16,2,128,30,216,2,128,34,208,1,128,4,17,1,133,19,1,0,1,4,17,1,72,46,1,0,1,4,17,1,80,36,1,0,1,4,17,1,149,56,1,0,1,4,17,1,92,51,1,0,1,8, 
  4,17,1,76,41,1,0,1,19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,52,14, 
  1,0,1,10,6,17,1,19,33,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152, 
  150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120, 
  78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178, 
  0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0, 
  0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,15,1,224,74,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34, 
  0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,15,1, 
  98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,255,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4, 
  15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,98,118,0,0,15,1, 
  88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,28,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0, 
  1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,98,118,0,0, 
  15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,98,118,0,0,17,1,100,68,1,0,1,4, 
  15,1,98,118,0,0,17,1,38,65,1,0,1,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132, 
  87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128, 
  100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0, 
  95,0,0,0,1,0,17,1,98,118,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1, 
  98,118,0,0,1,4,15,1,98,118,0,0,15,1,224,74,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,98,118,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,98,118,0,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  137,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1, 
  98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,166,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4, 
  15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,98,118,0,0,15,1, 
  88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,109,93, 
  1,0,17,1,30,90,1,0,1,4,15,1,98,118,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,98,118,0,0,17,1,100,68,1,0,1,4,15,1,98,118,0,0,17,1,38,65, 
  1,0,1,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88, 
  19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56, 
  7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145, 
  0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145, 
  0,0,15,1,224,74,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,19,87,0, 
  0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100, 
  1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,19,145, 
  0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  48,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1, 
  19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,134,96,1,0, 
  17,1,65,96,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4, 
  15,1,19,145,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,19,145,0,0,17,1,162,71,1,0,1,4,15,1,19,145,0,0,17,1,232,61,1,0,1,2,21,1,61,3,0,0, 
  196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128, 
  92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128, 
  8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,19,120,0,0,0,103, 
  1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,15,1,224,74,1,0,17,1, 
  112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64, 
  0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,19,145,0,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,19,145,0,0, 
  15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1, 
  100,100,1,0,17,1,68,99,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98, 
  1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,19,145, 
  0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0, 
  15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1, 
  215,96,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1, 
  19,145,0,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,19,145,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,19,145,0,0,15,1,88,100, 
  1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,19,145,0,0,17,1,162,71,1,0,1,4,15,1,19,145,0,0,17,1,232,61,1,0,1,2,21,7,48,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,46,208,64,128,60,16,1,128,4,17,1,52,14,1,0,1,4,15,1,103,15,1,0,17,1,119,14,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,19, 
  117,0,0,0,98,1,0,0,1,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20, 
  128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10, 
  128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0, 
  0,1,0,17,1,144,33,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1, 
  0,1,4,15,1,144,33,1,0,15,1,134,49,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33, 
  1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,19,100,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1, 
  0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,144,33,1, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166, 
  97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,144, 
  33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1, 
  0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17, 
  1,30,90,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,144,33,1,0,17,1,117,78,1,0,1,4,15,1,144,33,1,0,17,1,232,61,1,0,1, 
  2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90, 
  136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128, 
  152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1, 
  4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15, 
  1,134,49,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,19,87,0,0,0,4, 
  1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,144,33,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1, 
  4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,144,33,1,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100, 
  100,1,0,17,1,186,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1, 
  0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,144,33,1, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65, 
  96,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,144,33,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,144, 
  33,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,144,33,1,0,17,1,117,78,1,0,1,4,15,1,144,33,1,0,17,1,232,61,1,0,1,2,21,7,30,0,0,0,255,255,255, 
  255,1,0,0,0,0,0,0,0,40,176,0,128,4,17,1,237,81,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,61,3,0,0,196,78,3,0,27, 
  0,0,0,4,0,0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93, 
  24,16,128,94,72,15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0, 
  0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,43,85,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0, 
  19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,43,85,1,0,1,4,15,1,43,85,1,0,15,1,221,13,1,0,17,1,112,100,1,0,1, 
  4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,43,85,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0, 
  0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,43,85,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1, 
  0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17, 
  1,68,99,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15, 
  1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,43,85,1,0,15,1,88, 
  100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1, 
  0,17,1,97,97,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1, 
  4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,43,85,1,0,15, 
  1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,43,85,1,0,15,1,88,100,1,0,15,1,18, 
  90,1,0,17,1,179,81,1,0,1,4,15,1,43,85,1,0,17,1,100,68,1,0,1,4,15,1,43,85,1,0,17,1,232,61,1,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200, 
  128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0, 
  17,1,43,85,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,43,85,1,0,1,15,1,43,85,1,0,17,1,231,113,0,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0, 
  0,178,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0,0,175,0,0,0,1, 
  0,17,1,43,85,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,43,85,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,43,85,1, 
  0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,43,85,1,0,1,15,1,43,85,1,0,17,1,82,86,1,0,1,2,21,7,102,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,44,240,2,128,37,112,194,128, 
  42,48,2,129,43,176,130,128,45,240,1,128,47,176,1,128,94,112,1,128,4,17,1,111,171,0,0,1,4,17,1,236,167,0,0,1,4,17,1,81,164,0,0,1,4,17,1,206,160,0,0,1,4,17,1,75,157,0,0,1, 
  4,17,1,176,153,0,0,1,4,17,1,212,86,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0, 
  0,0,96,168,77,134,1,240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72, 
  15,128,31,120,25,129,34,8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0, 
  0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,0,152,0,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0, 
  6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,0,152,0,0,1,4,15,1,0,152,0,0,15,1,224,74,1,0,17,1,112,100,1,0,1,4,19,87,0,0, 
  0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,0,152,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19, 
  34,0,0,0,95,0,0,0,1,0,17,1,0,152,0,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,206,99,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0, 
  1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,0,152,0,0, 
  15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1, 
  100,100,1,0,17,1,235,97,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97, 
  1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,0,152, 
  0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0, 
  15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,0,152,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1, 
  179,81,1,0,1,4,15,1,0,152,0,0,17,1,100,68,1,0,1,4,15,1,0,152,0,0,17,1,232,61,1,0,1,2,19,64,0,0,0,173,0,0,0,1,0,1,21,1,78,3,0,0,166,79,3,0,28,0,0,0, 
  4,0,0,0,96,200,141,134,1,16,4,132,2,16,132,131,83,136,215,132,84,184,214,132,101,64,9,128,86,232,149,132,87,24,21,128,88,72,20,128,89,120,19,128,90,168,18,128,91,216,17,128,92,8,17,128,93,56,16,128, 
  94,104,15,128,31,0,26,129,34,144,153,128,81,192,216,128,82,240,215,128,95,152,142,129,97,248,204,129,98,40,12,128,99,88,11,128,100,136,10,128,102,248,7,128,127,88,7,128,128,184,5,128,129,24,4,128,8,4,19,121, 
  0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,212,178,0,0,1,4,19,120,0,0,0,103,1,0,0,1, 
  0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,212,178,0,0,1,4,15,1,212,178,0,0,15,1,221,13,1,0,17,1,112,100,1,0, 
  1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,212,178,0,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178, 
  0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,212,178,0,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,212,178,0,0,15,1,88,100, 
  1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0, 
  17,1,68,99,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4, 
  15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,212,178,0,0,15,1, 
  88,100,1,0,15,1,100,100,1,0,17,1,235,97,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100, 
  1,0,17,1,97,97,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0, 
  1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,212,178,0,0, 
  15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,19,82,0,0,0,225,0,0,0,2,0,1,4,15,1,212,178,0,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15, 
  1,212,178,0,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,212,178,0,0,17,1,97,7,1,0,1,4,15,1,212,178,0,0,17,1,232,61,1,0,1,2,19,64,0,0,0,174,0, 
  0,0,1,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,41,96,1,0,17,1,178,93,1,0,1,19,84,0,0,0,229,0,0,0,1, 
  0,1,21,1,37,1,0,0,147,80,3,0,10,0,0,0,3,0,0,0,128,32,3,128,1,208,1,130,2,208,1,128,70,72,71,129,101,88,6,128,69,232,199,127,54,136,72,127,127,104,4,128,102,104,5,128,129,216,1,128, 
  8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,139,0,0,0,143,1,0,0,1,0,17,1,234,95,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6, 
  1,0,0,1,0,19,139,0,0,0,143,1,0,0,1,0,17,1,234,95,1,0,1,4,15,1,234,95,1,0,15,1,228,94,1,0,15,1,240,94,1,0,15,1,171,95,1,0,17,1,112,100,1,0,1,4,19,87,0,0, 
  0,5,1,0,0,1,0,19,139,0,0,0,143,1,0,0,1,0,17,1,234,95,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,139,0,0,0,143,1,0,0,1,0,17,1,234,95,1,0,1,4,15,1,234,95, 
  1,0,15,1,216,94,1,0,17,1,33,16,1,0,1,4,15,1,234,95,1,0,15,1,216,94,1,0,17,1,202,15,1,0,1,4,15,1,234,95,1,0,15,1,216,94,1,0,17,1,115,15,1,0,1,2,19,139,0,0, 
  0,142,1,0,0,1,0,1,19,139,0,0,0,141,1,0,0,1,0,1,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,80,232,129,128,117,88,1,128,118,240,0,128,15,1,240,94,1,0,17,1,47,95, 
  1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,240,94,1,0,1,1,2,21,1,51,0,0,0,12,104,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,80,1,128,2,80,1,128,27,16,1,128,6,17,1, 
  110,95,1,0,1,10,4,17,1,52,14,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,56,1,129,1,48,129,128,2,48,1,128,41,56,1,128, 
  72,160,1,128,10,12,19,117,0,0,0,98,1,0,0,1,0,1,12,17,1,80,33,1,0,1,2,21,1,51,0,0,0,12,104,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1, 
  128,10,4,17,1,52,14,1,0,1,6,17,1,19,33,1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,7,35,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,41,176,0,128,4,19,119,0,0,0,102,1, 
  0,0,3,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,19,84,0,0,0,228,0,0,0,2,0,1,19,64,0,0,0,175,0,0,0,1,0,1,21,1,45, 
  0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,122,96,1,0,17,1,178,93,1,0,1,19,85,0,0,0,231,0,0,0,1,0,1,19,85,0,0,0,230, 
  0,0,0,2,0,1,19,64,0,0,0,176,0,0,0,1,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,203,96,1,0,17,1,178,93, 
  1,0,1,19,86,0,0,0,243,0,0,0,1,0,1,19,86,0,0,0,242,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15, 
  1,16,97,1,0,17,1,178,93,1,0,1,19,86,0,0,0,233,0,0,0,1,0,1,19,86,0,0,0,232,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240, 
  64,128,31,248,0,128,8,4,15,1,85,97,1,0,17,1,178,93,1,0,1,19,86,0,0,0,255,0,0,0,1,0,1,19,86,0,0,0,254,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1, 
  0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,154,97,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,247,0,0,0,1,0,1,19,86,0,0,0,246,0,0,0,2,0,1,21,1,45,0,0,0, 
  14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,223,97,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,19,86,0,0,0,236,0,0,0, 
  2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,36,98,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,1,1,0,0,1,0,1, 
  19,86,0,0,0,0,1,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,105,98,1,0,17,1,178,93,1,0,1,8,19,86,0, 
  0,0,249,0,0,0,1,0,1,19,86,0,0,0,248,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,174,98,1,0,17,1, 
  178,93,1,0,1,8,19,86,0,0,0,239,0,0,0,1,0,1,19,86,0,0,0,238,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128, 
  4,15,1,243,98,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,253,0,0,0,1,0,1,19,86,0,0,0,252,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1, 
  128,1,96,65,128,31,240,0,128,4,15,1,56,99,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,19,86,0,0,0,244,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0, 
  0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,125,99,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,235,0,0,0,1,0,1,19,86,0,0,0,234,0,0,0,2,0,1,21,1,45, 
  0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,194,99,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,3,1,0,0,1,0,1,19,86,0,0,0,2, 
  1,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,7,100,1,0,17,1,178,93,1,0,1,8,19,86,0,0,0,251,0,0,0, 
  1,0,1,19,86,0,0,0,250,0,0,0,2,0,1,21,1,45,0,0,0,14,103,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,76,100,1,0,17,1,178,93,1,0,1,8, 
  19,86,0,0,0,241,0,0,0,1,0,1,19,86,0,0,0,240,0,0,0,2,0,1,19,34,0,0,0,95,0,0,0,1,0,1,19,64,0,0,0,177,0,0,0,1,0,1,21,1,83,0,0,0,248,81,3,0,4,0, 
  0,0,2,0,0,0,72,24,1,128,1,16,129,128,2,16,1,128,41,216,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,118,0,0,0,101,1,0,0,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,19, 
  118,0,0,0,100,1,0,0,2,0,1,2,21,1,51,0,0,0,100,101,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1,128,10,4,17,1,52,14,1,0,1,6,17,1,19,33, 
  1,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,0,43,1,0,0,255,255,255,255,14,0,0,0,3,0,0,0,64,88,200,128,9,80,201,129,34,232,200,129,80,200,71,130,84,24,6,128,85,136,69,129,86,248,68, 
  129,87,104,4,128,81,56,71,129,82,168,6,128,117,216,3,128,118,112,3,128,120,224,2,128,121,80,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,3,101,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1, 
  3,101,1,0,1,15,1,3,101,1,0,17,1,211,59,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,177, 
  0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17, 
  1,3,101,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,3,101,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,3,101,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,3,101,1,0,1, 
  15,1,3,101,1,0,17,1,47,102,1,0,1,1,2,21,1,99,0,0,0,31,100,3,0,8,0,0,0,3,0,0,0,25,144,65,129,1,208,194,127,2,208,66,129,35,216,2,128,36,144,2,128,33,16,2,128,30,80,2, 
  128,34,208,1,128,4,17,1,149,56,1,0,1,4,17,1,72,46,1,0,1,4,17,1,80,36,1,0,1,4,17,1,76,41,1,0,1,4,17,1,133,19,1,0,1,8,4,17,1,92,51,1,0,1,19,9,0,0,0,28, 
  0,0,0,1,0,1,19,68,0,0,0,191,0,0,0,1,0,1,21,1,66,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1, 
  0,19,65,0,0,0,179,0,0,0,1,0,19,122,0,0,0,105,1,0,0,2,0,1,2,19,38,0,0,0,107,0,0,0,5,0,1,19,68,0,0,0,190,0,0,0,1,0,1,21,1,39,0,0,0,93,82,3,0,3, 
  0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,79,248,0,128,8,4,17,1,45,103,1,0,1,2,21,1,66,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,41,248,0,128,8, 
  4,19,37,0,0,0,101,0,0,0,1,0,19,65,0,0,0,179,0,0,0,1,0,19,90,0,0,0,11,1,0,0,3,0,1,2,21,1,47,0,0,0,10,105,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48, 
  1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17,1,160,103,1,0,1,2,21,1,105,0,0,0,125,105,3,0,7,0,0,0,2,0,0,0,72,120,1,128,1,112,65,129,2,112,129,128,7,112,129,128,6,112, 
  1,128,31,216,2,128,41,16,2,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,249,108,1,0,1,4,19,37,0,0,0,101,0,0,0,1,0,15,1,10,104,1,0,17,1,15,249,0,0,1,4,15,1,10,104, 
  1,0,17,1,122,3,0,0,1,2,21,1,47,0,0,0,0,99,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,69,104,1,0,1,8,19,38,0, 
  0,0,108,0,0,0,5,0,1,21,1,167,4,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,88,18,135,1,112,4,132,2,112,132,131,99,200,14,128,84,104,95,133,101,240,11,128,6,112,68,131,7,112,68,131,88, 
  216,27,128,89,168,26,128,10,152,228,130,91,72,24,128,92,24,23,128,93,232,21,128,94,184,20,128,31,200,227,129,34,248,162,128,81,200,161,129,82,152,160,129,86,56,222,129,87,8,29,128,90,120,25,128,95,136,83,129,97, 
  40,145,129,98,248,143,129,100,152,13,128,102,72,10,128,127,72,9,128,128,72,7,128,129,72,5,128,130,120,4,128,8,4,15,1,237,108,1,0,15,1,249,102,1,0,15,1,5,103,1,0,17,1,170,102,1,0,1,4,19, 
  121,0,0,0,104,1,0,0,1,0,19,87,0,0,0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,108,1,0,15,1,158,102,1,0,17,1,3,101,1, 
  0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,108,1,0,15,1,158,102,1,0,17, 
  1,3,101,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,196,100,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1, 
  0,19,34,0,0,0,95,0,0,0,1,0,15,1,237,108,1,0,15,1,158,102,1,0,17,1,3,101,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95, 
  0,0,0,1,0,15,1,237,108,1,0,15,1,158,102,1,0,17,1,3,101,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1, 
  0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15, 
  1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,237, 
  108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,237,108,1,0,15,1,158, 
  102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17, 
  1,235,97,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3, 
  101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1, 
  4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88, 
  100,1,0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,237,108,1, 
  0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17,1,121,93,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,109, 
  93,1,0,17,1,30,90,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1, 
  0,15,1,3,101,1,0,17,1,55,75,1,0,1,4,15,1,237,108,1,0,15,1,158,102,1,0,15,1,3,101,1,0,17,1,232,61,1,0,1,4,15,1,237,108,1,0,15,1,151,17,1,0,17,1,122,254,0,0,1, 
  2,19,38,0,0,0,106,0,0,0,7,0,1,21,1,75,0,0,0,249,105,3,0,6,0,0,0,2,0,0,0,44,24,66,129,1,80,1,128,2,80,129,128,7,80,1,128,6,80,1,128,72,88,1,128,8,4,19,69,0, 
  0,0,193,0,0,0,1,0,19,38,0,0,0,104,0,0,0,6,0,1,4,17,1,69,109,1,0,1,2,21,1,47,0,0,0,182,106,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7, 
  48,65,128,43,56,1,128,8,4,17,1,117,109,1,0,1,2,21,1,63,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0, 
  0,0,193,0,0,0,1,0,19,38,0,0,0,102,0,0,0,8,0,1,2,21,1,75,0,0,0,249,105,3,0,6,0,0,0,2,0,0,0,44,24,66,129,1,80,1,128,2,80,129,128,7,80,1,128,6,80,1,128,72, 
  88,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,38,0,0,0,105,0,0,0,4,0,1,4,17,1,1,110,1,0,1,2,21,1,47,0,0,0,182,106,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,1,128,2,48,129,127,7,48,65,128,43,56,1,128,8,4,17,1,49,110,1,0,1,2,21,1,63,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6, 
  48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,38,0,0,0,103,0,0,0,6,0,1,2,21,1,63,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7, 
  48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,38,0,0,0,110,0,0,0,2,0,1,2,21,1,63,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2, 
  48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,38,0,0,0,111,0,0,0,2,0,1,2,21,0,77,1,0,0,255,255,255,255,16,0,0,0,4,0,0,0,96,208,4,128,70, 
  120,7,128,91,96,5,128,19,248,9,128,100,64,4,128,104,176,3,128,38,104,201,126,71,232,6,128,72,128,70,127,73,240,133,129,106,144,2,128,43,0,201,125,44,112,8,128,45,8,8,128,14,96,10,128,105,32,3,128,19, 
  71,0,0,0,199,0,0,0,1,0,17,1,241,110,1,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,241,110,1,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,241,110,1,0,1,19,70,0,0,0,196,0, 
  0,0,1,0,17,1,241,110,1,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,241,110,1,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,241,110,1,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1, 
  241,110,1,0,1,15,1,241,110,1,0,17,1,127,124,1,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,241,110,1,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,241,110,1,0,1,15,1,241,110,1,0, 
  17,1,107,115,1,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,241,110,1,0,1,15,1,241,110,1,0,17,1,91,125,1,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,241,110,1,0,1,15,1,241,110, 
  1,0,17,1,63,112,1,0,1,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,122,112,1,0,1,8,19,14, 
  0,0,0,46,0,0,0,1,0,1,21,1,122,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,48,10,128,1,144,194,127,2,144,66,128,50,192,9,128,103,56,5,128,53,80,9,128,6,144,2,128,7,144,66,127, 
  107,56,4,128,73,56,8,128,74,32,7,128,75,8,70,127,108,104,3,128,109,152,2,128,46,96,11,128,47,240,10,128,8,4,15,1,95,115,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4, 
  15,1,95,115,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,95,115,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1, 
  95,115,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,44,0,0,0,3,0,1,4,19, 
  73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,44,0,0,0,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0, 
  0,44,0,0,0,3,0,1,4,15,1,1,114,1,0,17,1,27,125,1,0,1,4,15,1,245,113,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,56,0,0,0,3,0,1, 
  4,15,1,245,113,1,0,17,1,113,110,1,0,1,4,15,1,245,113,1,0,17,1,201,2,0,0,1,2,19,19,0,0,0,56,0,0,0,3,0,1,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6, 
  112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,60,114,1,0,1,8,19,14,0,0,0,45,0,0,0,3,0,1,21,1,22,1,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,152, 
  7,128,1,240,193,127,2,240,129,129,75,104,197,129,108,200,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,128,6,128,103,152,4,128,107,152,3,128,8,4,15,1,83,115,1,0,15,1,134,161,1,0,15,1,146,161, 
  1,0,17,1,77,159,1,0,1,4,15,1,83,115,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,83,115,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0, 
  17,1,12,158,1,0,1,4,15,1,83,115,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0, 
  0,43,0,0,0,5,0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,43,0,0,0,5,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0, 
  120,0,0,0,1,0,19,14,0,0,0,43,0,0,0,5,0,1,2,19,14,0,0,0,43,0,0,0,5,0,1,19,14,0,0,0,44,0,0,0,3,0,1,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0, 
  0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,166,115,1,0,1,8,19,14,0,0,0,42,0,0,0,1,0,1,21,1,146,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0, 
  49,96,10,128,1,144,194,127,2,144,66,128,50,192,9,128,103,56,5,128,53,80,9,128,6,144,2,128,7,144,66,127,107,56,4,128,73,56,8,128,74,32,7,128,75,8,70,127,108,104,3,128,109,152,2,128,46,240,11,128, 
  47,80,11,128,8,4,15,1,115,124,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,115,124,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1, 
  115,124,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,115,124,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0, 
  0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,38,0,0,0,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,38,0, 
  0,0,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,38,0,0,0,3,0,1,4,15,1,21,123,1,0,17,1,27,125,1,0,1,4,15,1,57,117,1, 
  0,15,1,9,123,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,15,0,0,0,50,0,0,0,1,0,17,1,57,117,1,0,1,4,15,1,57,117,1,0,15,1,9,123,1,0,17,1,113, 
  110,1,0,1,4,15,1,57,117,1,0,15,1,9,123,1,0,17,1,201,2,0,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44, 
  232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,57,117,1,0, 
  1,19,71,0,0,0,198,0,0,0,1,0,17,1,57,117,1,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,57,117,1,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,57,117,1,0,1,19,70,0,0,0, 
  195,0,0,0,1,0,17,1,57,117,1,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,57,117,1,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,57,117,1,0,1,15,1,57,117,1,0,17,1,127,124,1, 
  0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,57,117,1,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,57,117,1,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,57,117,1,0,17,1,166,121, 
  1,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,57,117,1,0,1,15,1,57,117,1,0,17,1,112,118,1,0,1,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112, 
  193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,172,118,1,0,1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,125,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,72,10,128,1,144, 
  194,127,2,144,66,128,50,216,9,128,103,56,5,128,53,104,9,128,6,144,2,128,7,144,66,127,107,56,4,128,73,72,8,128,74,40,7,128,75,8,70,127,108,104,3,128,109,152,2,128,46,120,11,128,47,8,11,128,8,4, 
  15,1,153,121,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,153,121,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,153,121,1,0,15,1, 
  134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,153,121,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1, 
  0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0,0,5,0,14,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0,0,5,0,14, 
  1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0,0,5,0,14,1,4,15,1,54,120,1,0,17,1,27,125,1,0,1,4,15,1,42,120,1,0,17,1, 
  177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,15,0,0,0,51,0,0,0,3,0,1,4,15,1,42,120,1,0,17,1,113,110,1,0,1,4,15,1,42,120,1,0,17,1,201,2,0,0,1,2,19,15, 
  0,0,0,51,0,0,0,3,0,1,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,114,120,1,0,1,8,19,14,0, 
  0,0,39,0,0,0,5,0,14,1,21,1,25,1,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,168,7,128,1,240,193,127,2,240,129,129,75,104,197,129,108,200,2,128,109,248,1,128,6,240,1,128,7,240,129,128, 
  74,136,6,128,103,152,4,128,107,152,3,128,8,4,15,1,140,121,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,140,121,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1, 
  226,158,1,0,1,4,15,1,140,121,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,140,121,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133, 
  1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,35,0,0,0,7,0,14,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0, 
  1,0,19,14,0,0,0,35,0,0,0,7,0,14,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,35,0,0,0,7,0,14,1,2,19,14,0,0,0,35,0,0, 
  0,7,0,14,1,19,14,0,0,0,37,0,0,0,5,0,14,1,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,226, 
  121,1,0,1,8,19,14,0,0,0,40,0,0,0,3,0,14,1,21,1,25,1,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,168,7,128,1,240,193,127,2,240,129,129,75,104,197,129,108,200,2,128,109,248,1,128, 
  6,240,1,128,7,240,129,128,74,136,6,128,103,152,4,128,107,152,3,128,8,4,15,1,252,122,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,252,122,1,0,15,1,134,161,1,0, 
  15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,252,122,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,252,122,1,0,15,1,166,157,1,0,15,1, 
  178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5,0,14,1,4,19,73,0,0,0,203,0,0,0,1,0,19, 
  44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5,0,14,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5,0,14,1,2, 
  19,14,0,0,0,36,0,0,0,5,0,14,1,19,15,0,0,0,50,0,0,0,1,0,1,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13, 
  48,1,128,4,17,1,80,123,1,0,1,8,19,14,0,0,0,40,0,0,0,3,0,1,21,1,22,1,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,152,7,128,1,240,193,127,2,240,129,129,75,104,197,129,108,200, 
  2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,128,6,128,103,152,4,128,107,152,3,128,8,4,15,1,103,124,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,103,124,1,0, 
  15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,103,124,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,103,124,1,0,15,1, 
  166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5,0,1,4,19,73,0,0,0,203,0, 
  0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,36,0,0,0,5, 
  0,1,2,19,14,0,0,0,36,0,0,0,5,0,1,19,14,0,0,0,38,0,0,0,3,0,1,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1, 
  128,13,56,1,128,8,4,17,1,175,124,1,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15, 
  1,3,125,1,0,17,1,226,158,1,0,1,4,15,1,247,124,1,0,17,1,12,158,1,0,1,2,19,72,0,0,0,201,0,0,0,3,0,1,19,71,0,0,0,197,0,0,0,3,0,1,19,19,0,0,0,55,0,0,0, 
  1,0,1,21,1,63,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,43,0,0,0,117, 
  0,0,0,2,0,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,150,125,1,0,1,8,19,14,0,0,0,49, 
  0,0,0,1,0,1,21,1,22,1,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,152,7,128,1,240,193,127,2,240,129,129,75,104,197,129,108,200,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,128,6,128, 
  103,152,4,128,107,152,3,128,8,4,15,1,173,126,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,173,126,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0, 
  1,4,15,1,173,126,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,173,126,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4, 
  19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,47,0,0,0,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0, 
  0,0,47,0,0,0,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,47,0,0,0,3,0,1,2,19,14,0,0,0,47,0,0,0,3,0,1,21,1,81, 
  0,0,0,24,111,3,0,7,0,0,0,2,0,0,0,56,184,1,128,1,112,65,129,2,112,129,128,7,112,1,128,6,112,65,128,54,32,2,128,57,120,1,128,8,4,17,1,11,127,1,0,1,4,19,45,0,0,0,128,0, 
  0,0,2,0,1,4,19,45,0,0,0,127,0,0,0,2,0,1,2,21,1,69,0,0,0,153,112,3,0,6,0,0,0,2,0,0,0,56,88,1,128,1,80,1,128,2,80,129,128,7,80,1,128,6,80,65,128,54,192,1, 
  128,8,4,19,45,0,0,0,126,0,0,0,3,0,1,4,19,45,0,0,0,125,0,0,0,3,0,1,2,21,1,69,0,0,0,153,112,3,0,6,0,0,0,2,0,0,0,56,88,1,128,1,80,1,128,2,80,129,128,7, 
  80,1,128,6,80,65,128,54,192,1,128,8,4,19,45,0,0,0,130,0,0,0,2,0,1,4,19,45,0,0,0,129,0,0,0,2,0,1,2,21,1,81,0,0,0,24,111,3,0,7,0,0,0,2,0,0,0,56,184,1, 
  128,1,112,65,129,2,112,129,128,7,112,1,128,6,112,65,128,54,32,2,128,57,120,1,128,8,4,17,1,233,127,1,0,1,4,19,45,0,0,0,124,0,0,0,2,0,1,4,19,45,0,0,0,123,0,0,0,2,0,1, 
  2,21,1,69,0,0,0,153,112,3,0,6,0,0,0,2,0,0,0,56,88,1,128,1,80,1,128,2,80,129,128,7,80,1,128,6,80,65,128,54,192,1,128,8,4,19,45,0,0,0,122,0,0,0,3,0,1,4,19,45, 
  0,0,0,121,0,0,0,3,0,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,106,128,1,0,1,8,19,14, 
  0,0,0,42,0,0,0,1,0,1,21,1,146,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,96,10,128,1,144,194,127,2,144,66,128,50,192,9,128,103,56,5,128,53,80,9,128,6,144,2,128,7,144,66,127, 
  107,56,4,128,73,56,8,128,74,32,7,128,75,8,70,127,108,104,3,128,109,152,2,128,46,240,11,128,47,80,11,128,8,4,15,1,115,124,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4, 
  15,1,115,124,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,115,124,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1, 
  115,124,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,38,0,0,0,3,0,1,4,19, 
  73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,38,0,0,0,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0, 
  0,38,0,0,0,3,0,1,4,15,1,21,123,1,0,17,1,27,125,1,0,1,4,15,1,253,129,1,0,15,1,9,123,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,15,0,0,0,50, 
  0,0,0,1,0,17,1,253,129,1,0,1,4,15,1,253,129,1,0,15,1,9,123,1,0,17,1,113,110,1,0,1,4,15,1,253,129,1,0,15,1,9,123,1,0,17,1,201,2,0,0,1,2,21,0,54,1,0,0,255, 
  255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100, 
  32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,253,129,1,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,253,129,1,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1, 
  253,129,1,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,253,129,1,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,253,129,1,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,253,129,1,0,1,19, 
  44,0,0,0,120,0,0,0,1,0,17,1,253,129,1,0,1,15,1,253,129,1,0,17,1,127,124,1,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,253,129,1,0,1,19,44,0,0,0,118,0,0,0,1,0,17, 
  1,253,129,1,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,253,129,1,0,17,1,166,121,1,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,253,129,1,0,1,15,1,253,129,1,0,17,1,52,131,1, 
  0,1,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,112,131,1,0,1,8,19,14,0,0,0,41,0,0,0, 
  3,0,14,1,21,1,125,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,72,10,128,1,144,194,127,2,144,66,128,50,216,9,128,103,56,5,128,53,104,9,128,6,144,2,128,7,144,66,127,107,56,4,128,73,72, 
  8,128,74,40,7,128,75,8,70,127,108,104,3,128,109,152,2,128,46,120,11,128,47,8,11,128,8,4,15,1,153,121,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,153,121,1,0, 
  15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,153,121,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,153,121,1,0,15,1, 
  166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0,0,5,0,14,1,4,19,73,0,0,0,203, 
  0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0,0,5,0,14,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,37,0,0, 
  0,5,0,14,1,4,15,1,238,132,1,0,17,1,27,125,1,0,1,4,15,1,42,120,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,15,0,0,0,51,0,0,0,3,0,1,4,15,1, 
  42,120,1,0,17,1,113,110,1,0,1,4,15,1,42,120,1,0,17,1,201,2,0,0,1,2,21,1,47,0,0,0,103,107,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128, 
  13,48,1,128,4,17,1,114,120,1,0,1,8,19,14,0,0,0,39,0,0,0,5,0,14,1,21,1,47,0,0,0,250,112,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128, 
  39,56,1,128,8,4,17,1,90,133,1,0,1,2,21,1,82,0,0,0,78,113,3,0,7,0,0,0,2,0,0,0,6,112,129,129,1,112,193,128,2,112,129,127,7,112,1,128,41,248,65,128,105,184,1,128,106,120,1,128, 
  8,4,17,1,208,150,1,0,1,4,17,1,170,145,1,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,173,133,1,0,1,2,21,1,95,0,0,0,191,119,3,0,7,0,0,0,2,0,0,0,6,112,1,129,1, 
  112,1,128,2,112,129,127,7,112,129,128,10,136,2,128,31,232,65,128,39,120,1,128,8,4,15,1,80,145,1,0,17,1,16,145,1,0,1,4,15,1,248,144,1,0,15,1,4,145,1,0,17,1,66,141,1,0,1,4,15, 
  1,248,144,1,0,17,1,13,134,1,0,1,2,21,1,131,0,0,0,41,120,3,0,8,0,0,0,3,0,0,0,10,120,3,128,1,144,1,128,2,144,129,127,131,56,2,128,132,152,1,128,31,216,2,128,6,144,1,128,7, 
  144,129,127,8,4,15,1,41,140,1,0,15,1,54,141,1,0,17,1,137,139,1,0,1,4,15,1,41,140,1,0,15,1,125,139,1,0,17,1,245,136,1,0,1,4,15,1,41,140,1,0,15,1,233,136,1,0,17,1,66, 
  141,1,0,1,4,15,1,41,140,1,0,15,1,125,139,1,0,17,1,145,134,1,0,1,2,21,1,34,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,80,14,128,1,240,194,127,2,240,66,128,50,128,13,128,55, 
  64,76,131,53,224,12,128,6,240,2,128,7,240,66,127,74,112,8,128,73,184,9,128,58,160,139,127,59,0,75,129,108,248,3,128,109,248,2,128,46,64,16,128,47,112,15,128,75,40,135,128,103,40,6,128,107,248,4,128,8, 
  4,15,1,180,136,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,180,136,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226, 
  158,1,0,1,4,15,1,180,136,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,180,136,1,0,15,1,122,161,1,0,15,1,166,157,1, 
  0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,180,136,1,0,1,4,19,73,0,0, 
  0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,180,136,1,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19, 
  14,0,0,0,48,0,0,0,1,0,17,1,180,136,1,0,1,4,15,1,180,136,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,180,136,1,0,15,1,47,128,1,0,17,1,81,127,1,0,1,4,15,1, 
  180,136,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,180,136,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,180,136,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,177,110, 
  1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,180,136,1,0,17,1,241,110,1,0,1,4,15,1,180,136,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1, 
  113,110,1,0,1,4,15,1,180,136,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,52,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48, 
  129,127,7,48,65,128,11,56,1,128,8,4,19,126,0,0,0,111,1,0,0,3,0,1,2,19,94,0,0,0,18,1,0,0,1,0,1,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1, 
  48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,37,137,1,0,1,2,21,1,34,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,80,14,128,1,240,194,127,2,240,66,128,50,128,13,128,55, 
  64,76,131,53,224,12,128,6,240,2,128,7,240,66,127,74,112,8,128,73,184,9,128,58,160,139,127,59,0,75,129,108,248,3,128,109,248,2,128,46,64,16,128,47,112,15,128,75,40,135,128,103,40,6,128,107,248,4,128,8, 
  4,15,1,72,139,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,72,139,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226, 
  158,1,0,1,4,15,1,72,139,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,72,139,1,0,15,1,122,161,1,0,15,1,166,157,1, 
  0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,72,139,1,0,1,4,19,73,0,0, 
  0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,72,139,1,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19, 
  14,0,0,0,48,0,0,0,1,0,17,1,72,139,1,0,1,4,15,1,72,139,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,72,139,1,0,15,1,47,128,1,0,17,1,81,127,1,0,1,4,15,1, 
  72,139,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,72,139,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,72,139,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,177,110, 
  1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,72,139,1,0,17,1,241,110,1,0,1,4,15,1,72,139,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1, 
  113,110,1,0,1,4,15,1,72,139,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,52,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48, 
  129,127,7,48,65,128,11,56,1,128,8,4,19,126,0,0,0,110,1,0,0,4,0,1,2,19,94,0,0,0,19,1,0,0,1,0,1,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1, 
  48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,185,139,1,0,1,2,21,1,58,0,0,0,248,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,129, 
  56,1,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,244,139,1,0,1,2,21,1,52,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,11,56, 
  1,128,8,4,19,127,0,0,0,112,1,0,0,4,0,1,2,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,123,80,2,129,126,192,1,128,94,232,194,127,95,224,66,127,127,48,1,128,19,94,0,0,0, 
  20,1,0,0,1,0,17,1,41,140,1,0,1,19,94,0,0,0,19,1,0,0,1,0,17,1,41,140,1,0,1,19,94,0,0,0,18,1,0,0,1,0,17,1,41,140,1,0,1,1,15,1,41,140,1,0,17,1,148,140, 
  1,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120,3,128,1,176,1,128,2,176,129,127,11,8,67,129,132,184,1,128,31,152,2,128,6,176,1,128,7,176,129,127,131,40,2,128,8,4, 
  15,1,42,141,1,0,17,1,137,139,1,0,1,4,15,1,30,141,1,0,17,1,245,136,1,0,1,4,15,1,18,141,1,0,17,1,66,141,1,0,1,4,19,95,0,0,0,25,1,0,0,3,0,14,1,4,15,1,30,141, 
  1,0,17,1,145,134,1,0,1,2,19,94,0,0,0,21,1,0,0,2,0,1,19,94,0,0,0,22,1,0,0,2,0,1,19,94,0,0,0,23,1,0,0,2,0,1,19,94,0,0,0,20,1,0,0,1,0,1,21,1, 
  80,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,124,0,0,0,107,1,0,0,1,0, 
  19,125,0,0,0,108,1,0,0,1,0,17,1,147,141,1,0,1,2,21,0,84,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,124,120,1,128,69,16,66,128,125,16,1,128,123,8,2,128,15,1,147,141,1,0,17, 
  1,232,141,1,0,1,19,125,0,0,0,108,1,0,0,1,0,17,1,147,141,1,0,1,1,19,124,0,0,0,107,1,0,0,1,0,17,1,147,141,1,0,1,2,21,1,59,0,0,0,93,37,3,0,6,0,0,0,2,0, 
  0,0,32,152,1,128,1,80,1,128,2,80,129,128,7,80,1,128,6,80,65,128,66,88,1,128,8,4,17,1,173,144,1,0,1,4,17,1,36,142,1,0,1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0, 
  0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,84,142,1,0,1,2,21,1,34,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,80,14,128,1,240,194,127,2,240, 
  66,128,50,128,13,128,55,64,76,131,53,224,12,128,6,240,2,128,7,240,66,127,74,112,8,128,73,184,9,128,58,160,139,127,59,0,75,129,108,248,3,128,109,248,2,128,46,64,16,128,47,112,15,128,75,40,135,128,103,40, 
  6,128,107,248,4,128,8,4,15,1,119,144,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,119,144,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1, 
  65,159,1,0,17,1,226,158,1,0,1,4,15,1,119,144,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,119,144,1,0,15,1,122,161, 
  1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,119,144,1, 
  0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,119,144,1,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0, 
  120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,119,144,1,0,1,4,15,1,119,144,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,119,144,1,0,15,1,47,128,1,0,17,1,81, 
  127,1,0,1,4,15,1,119,144,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,119,144,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,119,144,1,0,15,1,241,110,1,0,15,1,15, 
  125,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,119,144,1,0,17,1,241,110,1,0,1,4,15,1,119,144,1,0,15,1,241,110,1,0,15, 
  1,15,125,1,0,17,1,113,110,1,0,1,4,15,1,119,144,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,53,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1, 
  128,1,48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19,123,0,0,0,106,1,0,0,6,0,14,1,2,21,1,74,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2, 
  48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,19,124,0,0,0,107,1,0,0,1,0,19,125,0,0,0,109,1,0,0,3,0,1,2,19,91,0,0,0,13,1,0,0,4,0,1, 
  19,95,0,0,0,24,1,0,0,1,0,1,21,1,63,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0, 
  0,1,0,19,92,0,0,0,14,1,0,0,2,0,1,2,21,1,77,0,0,0,207,123,3,0,6,0,0,0,2,0,0,0,6,80,1,129,1,80,1,128,2,80,129,127,7,80,129,128,10,248,1,128,31,88,1,128,8,4, 
  15,1,158,145,1,0,15,1,4,145,1,0,17,1,66,141,1,0,1,4,15,1,158,145,1,0,17,1,13,134,1,0,1,2,19,91,0,0,0,12,1,0,0,5,0,1,21,1,77,0,0,0,207,123,3,0,6,0,0,0, 
  2,0,0,0,6,80,1,129,1,80,1,128,2,80,129,127,7,80,129,128,10,248,1,128,31,88,1,128,8,4,15,1,184,150,1,0,15,1,196,150,1,0,17,1,173,147,1,0,1,4,15,1,184,150,1,0,17,1,248,145, 
  1,0,1,2,21,1,131,0,0,0,41,120,3,0,8,0,0,0,3,0,0,0,10,120,3,128,1,144,1,128,2,144,129,127,131,56,2,128,132,152,1,128,31,216,2,128,6,144,1,128,7,144,129,127,8,4,15,1,148,146, 
  1,0,15,1,161,147,1,0,17,1,137,139,1,0,1,4,15,1,148,146,1,0,15,1,136,146,1,0,17,1,245,136,1,0,1,4,15,1,148,146,1,0,15,1,124,146,1,0,17,1,173,147,1,0,1,4,15,1,148,146, 
  1,0,15,1,136,146,1,0,17,1,145,134,1,0,1,2,19,98,0,0,0,30,1,0,0,1,0,1,19,98,0,0,0,32,1,0,0,1,0,1,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,128,48, 
  1,128,126,80,2,128,98,232,194,127,99,224,66,128,127,192,1,128,19,98,0,0,0,30,1,0,0,1,0,17,1,148,146,1,0,1,19,98,0,0,0,31,1,0,0,1,0,17,1,148,146,1,0,1,19,98,0,0,0,32, 
  1,0,0,1,0,17,1,148,146,1,0,1,1,15,1,148,146,1,0,17,1,255,146,1,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120,3,128,1,176,1,128,2,176,129,127,11,8,67, 
  129,132,184,1,128,31,152,2,128,6,176,1,128,7,176,129,127,131,40,2,128,8,4,15,1,149,147,1,0,17,1,137,139,1,0,1,4,15,1,137,147,1,0,17,1,245,136,1,0,1,4,15,1,125,147,1,0,17,1,173, 
  147,1,0,1,4,19,99,0,0,0,37,1,0,0,3,0,14,1,4,15,1,137,147,1,0,17,1,145,134,1,0,1,2,19,98,0,0,0,33,1,0,0,2,0,1,19,98,0,0,0,35,1,0,0,2,0,1,19,98,0, 
  0,0,34,1,0,0,2,0,1,19,98,0,0,0,31,1,0,0,1,0,1,21,1,82,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,32,2,128,41, 
  88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,15,1,0,148,1,0,17,1,15,249,0,0,1,4,15,1,0,148,1,0,17,1,122,3,0,0,1,2,21,1,47,0,0,0,9,37,3,0,5,0,0,0,2,0, 
  0,0,32,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,17,1,48,148,1,0,1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48, 
  129,127,7,48,1,128,10,56,1,128,8,4,17,1,96,148,1,0,1,2,21,1,34,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,80,14,128,1,240,194,127,2,240,66,128,50,128,13,128,55,64,76,131,53,224, 
  12,128,6,240,2,128,7,240,66,127,74,112,8,128,73,184,9,128,58,160,139,127,59,0,75,129,108,248,3,128,109,248,2,128,46,64,16,128,47,112,15,128,75,40,135,128,103,40,6,128,107,248,4,128,8,4,15,1,131,150, 
  1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,131,150,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4, 
  15,1,131,150,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,131,150,1,0,15,1,122,161,1,0,15,1,166,157,1,0,15,1,178,157, 
  1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,131,150,1,0,1,4,19,73,0,0,0,203,0,0,0, 
  1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,131,150,1,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48, 
  0,0,0,1,0,17,1,131,150,1,0,1,4,15,1,131,150,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,131,150,1,0,15,1,47,128,1,0,17,1,81,127,1,0,1,4,15,1,131,150,1,0,15, 
  1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,131,150,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,131,150,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,177,110,1,0,1,4,19, 
  38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,131,150,1,0,17,1,241,110,1,0,1,4,15,1,131,150,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,113,110,1,0,1, 
  4,15,1,131,150,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,52,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65, 
  128,11,56,1,128,8,4,19,128,0,0,0,113,1,0,0,6,0,1,2,19,96,0,0,0,26,1,0,0,4,0,1,19,99,0,0,0,36,1,0,0,1,0,1,21,1,77,0,0,0,207,123,3,0,6,0,0,0,2,0, 
  0,0,6,80,1,129,1,80,1,128,2,80,129,127,7,80,129,128,10,248,1,128,31,88,1,128,8,4,15,1,142,157,1,0,15,1,154,157,1,0,17,1,211,152,1,0,1,4,15,1,142,157,1,0,17,1,30,151,1,0, 
  1,2,21,1,131,0,0,0,41,120,3,0,8,0,0,0,3,0,0,0,10,120,3,128,1,144,1,128,2,144,129,127,131,56,2,128,132,152,1,128,31,216,2,128,6,144,1,128,7,144,129,127,8,4,15,1,186,151,1,0, 
  15,1,199,152,1,0,17,1,137,139,1,0,1,4,15,1,186,151,1,0,15,1,174,151,1,0,17,1,245,136,1,0,1,4,15,1,186,151,1,0,15,1,162,151,1,0,17,1,211,152,1,0,1,4,15,1,186,151,1,0, 
  15,1,174,151,1,0,17,1,145,134,1,0,1,2,19,102,0,0,0,42,1,0,0,1,0,1,19,102,0,0,0,44,1,0,0,1,0,1,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,126,80,2,128, 
  129,48,1,128,102,232,130,127,103,224,66,128,127,192,1,128,19,102,0,0,0,42,1,0,0,1,0,17,1,186,151,1,0,1,19,102,0,0,0,43,1,0,0,1,0,17,1,186,151,1,0,1,19,102,0,0,0,44,1,0, 
  0,1,0,17,1,186,151,1,0,1,1,15,1,186,151,1,0,17,1,37,152,1,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120,3,128,1,176,1,128,2,176,129,127,11,8,67,129,132, 
  184,1,128,31,152,2,128,6,176,1,128,7,176,129,127,131,40,2,128,8,4,15,1,187,152,1,0,17,1,137,139,1,0,1,4,15,1,175,152,1,0,17,1,245,136,1,0,1,4,15,1,163,152,1,0,17,1,211,152,1, 
  0,1,4,19,103,0,0,0,49,1,0,0,3,0,14,1,4,15,1,175,152,1,0,17,1,145,134,1,0,1,2,19,102,0,0,0,45,1,0,0,2,0,1,19,102,0,0,0,47,1,0,0,2,0,1,19,102,0,0,0, 
  46,1,0,0,2,0,1,19,102,0,0,0,43,1,0,0,1,0,1,21,1,159,0,0,0,158,124,3,0,9,0,0,0,3,0,0,0,112,72,3,128,1,176,1,129,2,176,1,128,110,232,3,128,76,136,4,128,129,128,2, 
  128,6,176,65,127,7,176,65,128,135,184,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,15,1,214,154,1,0,17,1,80,154,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,15,1,214,154,1,0,17,1,80, 
  154,1,0,1,4,15,1,214,154,1,0,15,1,80,154,1,0,17,1,185,242,0,0,1,4,15,1,214,154,1,0,15,1,80,154,1,0,17,1,115,153,1,0,1,4,15,1,214,154,1,0,17,1,46,5,0,0,1,2,21, 
  1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,184,153,1,0,1,4,15,1,184,153,1,0, 
  17,1,122,3,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1, 
  184,153,1,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,184,153,1,0,17,1,29,154,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,184,153,1,0,1,2,21,1,39,0,0,0,85,125,3,0,3, 
  0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,133,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,110,0, 
  67,129,109,144,195,128,74,32,132,127,111,112,2,128,121,224,1,128,130,80,1,128,19,109,0,0,0,57,1,0,0,1,0,17,1,80,154,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,80,154,1,0,1,19,74, 
  0,0,0,208,0,0,0,1,0,17,1,80,154,1,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,80,154,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,80,154,1,0,1,1,2,21,1,47,0,0,0, 
  9,37,3,0,5,0,0,0,2,0,0,0,32,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,17,1,6,155,1,0,1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0, 
  6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,54,155,1,0,1,2,21,1,34,2,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,80,14,128,1,240,194,127,2,240,66,128, 
  50,128,13,128,55,64,76,131,53,224,12,128,6,240,2,128,7,240,66,127,74,112,8,128,73,184,9,128,58,160,139,127,59,0,75,129,108,248,3,128,109,248,2,128,46,64,16,128,47,112,15,128,75,40,135,128,103,40,6,128, 
  107,248,4,128,8,4,15,1,89,157,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1,89,157,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65,159, 
  1,0,17,1,226,158,1,0,1,4,15,1,89,157,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0,17,1,12,158,1,0,1,4,15,1,89,157,1,0,15,1,122,161,1,0, 
  15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,89,157,1,0,1, 
  4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,89,157,1,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0, 
  0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,17,1,89,157,1,0,1,4,15,1,89,157,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,89,157,1,0,15,1,47,128,1,0,17,1,81,127,1, 
  0,1,4,15,1,89,157,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1,89,157,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,89,157,1,0,15,1,241,110,1,0,15,1,15,125,1, 
  0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0,55,0,0,0,1,0,15,1,89,157,1,0,17,1,241,110,1,0,1,4,15,1,89,157,1,0,15,1,241,110,1,0,15,1,15, 
  125,1,0,17,1,113,110,1,0,1,4,15,1,89,157,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,201,2,0,0,1,2,21,1,52,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19,129,0,0,0,114,1,0,0,6,0,1,2,19,100,0,0,0,38,1,0,0,4,0,1,19,103,0,0,0,48,1,0,0,1,0,1,19,44,0,0,0,118, 
  0,0,0,1,0,1,21,0,89,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,96,160,65,128,100,16,1,128,70,192,2,128,91,48,2,128,19,70,0,0,0,196,0,0,0,1,0,17,1,178,157,1,0,1,19,70, 
  0,0,0,195,0,0,0,1,0,17,1,178,157,1,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,178,157,1,0,1,1,2,21,1,82,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80, 
  1,129,2,80,129,127,7,80,65,128,31,32,2,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,15,1,95,158,1,0,17,1,15,249,0,0,1,4,15,1,95,158,1,0,17,1,122,3,0,0,1,2,19, 
  104,0,0,0,50,1,0,0,2,0,1,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,72,224,2,129,105,192,1,128,106,48,1,128,71,72,3,128,104,80,2,128,19,71,0,0,0,199,0,0,0,1,0, 
  17,1,107,158,1,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,107,158,1,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,107,158,1,0,1,15,1,107,158,1,0,17,1,127,124,1,0,1,1,2,19,72, 
  0,0,0,200,0,0,0,1,0,1,21,1,82,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,32,2,128,41,88,1,128,8,4,19,37,0,0,0,101, 
  0,0,0,1,0,15,1,53,159,1,0,17,1,15,249,0,0,1,4,15,1,53,159,1,0,17,1,122,3,0,0,1,2,19,105,0,0,0,51,1,0,0,2,0,1,19,71,0,0,0,198,0,0,0,1,0,1,21,1,47, 
  0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,125,159,1,0,1,2,21,1,94,0,0,0,46,124,3,0,6,0,0,0,2, 
  0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,32,2,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,15,1,95,160,1,0,17,1,244,159,1,0,1,4,15,1,95,160,1,0, 
  15,1,220,159,1,0,15,1,232,159,1,0,17,1,122,3,0,0,1,2,19,108,0,0,0,54,1,0,0,1,0,1,19,107,0,0,0,53,1,0,0,1,0,1,21,1,39,0,0,0,200,126,3,0,3,0,0,0,1,0, 
  0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,39,160,1,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,55,0,0,0,176,36,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64, 
  128,41,248,0,128,8,4,19,37,0,0,0,101,0,0,0,1,0,19,79,0,0,0,220,0,0,0,3,0,1,2,21,0,145,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,108,112,1,128,13,248,195,128,106,104,2, 
  128,79,112,194,128,37,144,67,128,61,0,3,128,107,216,1,128,15,1,95,160,1,0,17,1,241,160,1,0,1,19,108,0,0,0,54,1,0,0,1,0,17,1,95,160,1,0,1,1,19,61,0,0,0,167,0,0,0,1,0, 
  17,1,95,160,1,0,1,19,107,0,0,0,53,1,0,0,1,0,17,1,95,160,1,0,1,15,1,95,160,1,0,17,1,244,159,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,95,160,1,0,1,2,21,1,112, 
  0,0,0,67,127,3,0,7,0,0,0,2,0,0,0,6,112,1,128,1,112,65,129,2,112,129,127,7,112,65,128,11,16,67,128,31,112,2,128,41,120,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,15,1,98,161, 
  1,0,15,1,232,159,1,0,17,1,15,249,0,0,1,4,15,1,98,161,1,0,15,1,232,159,1,0,17,1,122,3,0,0,1,4,19,106,0,0,0,52,1,0,0,4,0,14,1,2,19,108,0,0,0,55,1,0,0,2, 
  0,1,19,0,0,0,0,0,0,0,0,3,0,1,19,14,0,0,0,48,0,0,0,1,0,1,19,44,0,0,0,119,0,0,0,1,0,1,19,71,0,0,0,199,0,0,0,1,0,1,21,1,49,2,0,0,79,18,3,0, 
  19,0,0,0,4,0,0,0,49,200,14,128,1,240,194,127,2,240,66,128,50,248,13,128,55,184,76,131,53,88,13,128,6,240,2,128,7,240,66,127,74,152,8,128,73,8,10,128,58,24,140,127,59,120,75,129,108,248,3,128, 
  109,248,2,128,46,184,16,128,47,232,15,128,75,40,135,128,103,40,6,128,107,248,4,128,8,4,15,1,208,163,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,146,161,1,0,17,1,77,159,1,0,1,4,15,1, 
  208,163,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,65,159,1,0,17,1,226,158,1,0,1,4,15,1,208,163,1,0,15,1,122,161,1,0,15,1,134,161,1,0,15,1,107,158,1,0,15,1,214,158,1,0, 
  17,1,12,158,1,0,1,4,15,1,208,163,1,0,15,1,122,161,1,0,15,1,166,157,1,0,15,1,178,157,1,0,17,1,42,133,1,0,1,4,19,73,0,0,0,204,0,0,0,1,0,19,44,0,0,0,120,0,0,0, 
  1,0,19,14,0,0,0,48,0,0,0,1,0,19,0,0,0,0,1,0,0,0,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,19, 
  0,0,0,0,1,0,0,0,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,19,44,0,0,0,120,0,0,0,1,0,19,14,0,0,0,48,0,0,0,1,0,19,0,0,0,0,1,0,0,0,3,0,1,4,15,1, 
  208,163,1,0,15,1,47,128,1,0,17,1,151,127,1,0,1,4,15,1,208,163,1,0,15,1,47,128,1,0,17,1,81,127,1,0,1,4,15,1,208,163,1,0,15,1,47,128,1,0,17,1,185,126,1,0,1,4,15,1, 
  208,163,1,0,15,1,91,125,1,0,17,1,27,125,1,0,1,4,15,1,208,163,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,177,110,1,0,1,4,19,38,0,0,0,112,0,0,0,1,0,19,19,0,0,0, 
  55,0,0,0,1,0,15,1,208,163,1,0,17,1,241,110,1,0,1,4,15,1,208,163,1,0,15,1,241,110,1,0,15,1,15,125,1,0,17,1,113,110,1,0,1,4,15,1,208,163,1,0,15,1,241,110,1,0,15,1, 
  15,125,1,0,17,1,201,2,0,0,1,2,19,0,0,0,0,1,0,0,0,3,0,1,13,15,1,220,163,1,0,17,1,234,163,1,0,1,21,7,48,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,92,176,0,128, 
  4,15,1,142,165,1,0,15,1,118,165,1,0,15,1,130,165,1,0,17,1,14,165,1,0,1,21,9,243,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,120,2,128,5,8,5,128,2,48,129,128,3,192,3,128, 
  6,80,6,128,4,19,23,0,0,0,62,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,5,0,0,0,1,0,17,1,142,165,1,0,1,4,19,23,0,0,0,60,0,0,0,1,0,19,2,0, 
  0,0,3,0,0,0,1,0,19,3,0,0,0,5,0,0,0,1,0,17,1,142,165,1,0,1,4,19,23,0,0,0,61,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,5,0,0,0,1,0, 
  17,1,142,165,1,0,1,4,19,23,0,0,0,63,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,5,0,0,0,1,0,17,1,142,165,1,0,1,4,19,23,0,0,0,64,0,0,0,1,0, 
  19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,5,0,0,0,1,0,17,1,142,165,1,0,1,2,21,9,103,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,152,1,128,5,104,2,128,2,48,129,128, 
  3,0,2,128,6,208,2,128,4,19,24,0,0,0,67,0,0,0,2,0,1,4,19,24,0,0,0,65,0,0,0,2,0,1,4,19,24,0,0,0,66,0,0,0,2,0,1,4,19,24,0,0,0,68,0,0,0,2,0,1, 
  4,19,24,0,0,0,69,0,0,0,2,0,1,2,19,3,0,0,0,5,0,0,0,1,0,1,19,2,0,0,0,4,0,0,0,1,0,1,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,24,48,1,128, 
  1,72,3,128,2,184,2,128,3,80,66,128,23,192,1,128,19,2,0,0,0,4,0,0,0,1,0,17,1,142,165,1,0,1,19,2,0,0,0,3,0,0,0,1,0,17,1,142,165,1,0,1,15,1,142,165,1,0,17,1, 
  249,165,1,0,1,19,3,0,0,0,5,0,0,0,1,0,17,1,142,165,1,0,1,1,2,21,7,42,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,92,176,0,128,4,15,1,4,167,1,0,15,1,130,165,1,0, 
  17,1,14,165,1,0,1,21,9,213,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,72,2,128,5,120,4,128,2,48,129,128,3,96,3,128,6,144,5,128,4,19,23,0,0,0,62,0,0,0,1,0,19,2,0, 
  0,0,3,0,0,0,1,0,19,3,0,0,0,6,0,0,0,2,0,1,4,19,23,0,0,0,60,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,6,0,0,0,2,0,1,4,19,23,0,0, 
  0,61,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,6,0,0,0,2,0,1,4,19,23,0,0,0,63,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,6,0, 
  0,0,2,0,1,4,19,23,0,0,0,64,0,0,0,1,0,19,2,0,0,0,3,0,0,0,1,0,19,3,0,0,0,6,0,0,0,2,0,1,19,1,0,0,0,2,0,0,0,1,0,1,19,3,0,0,0,6,0,0, 
  0,2,0,1,15,1,220,163,1,0,17,1,29,167,1,0,1,21,1,202,0,0,0,190,127,3,0,13,0,0,0,3,0,0,0,24,112,197,130,1,48,2,129,2,48,2,128,27,144,4,128,22,224,69,129,25,0,197,128,6, 
  48,130,127,7,48,194,128,41,248,3,129,62,136,3,128,63,24,3,128,64,168,2,128,65,56,2,128,8,4,15,1,12,20,2,0,17,1,68,16,2,0,1,4,15,1,12,20,2,0,17,1,225,15,2,0,1,4,15,1,12, 
  20,2,0,17,1,236,13,2,0,1,4,15,1,12,20,2,0,17,1,246,11,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,12,20,2,0,1,4,15,1,12,20,2,0,17,1,223,1,2,0,1,4,15,1, 
  12,20,2,0,17,1,234,248,1,0,1,4,15,1,12,20,2,0,17,1,150,240,1,0,1,4,15,1,12,20,2,0,17,1,232,167,1,0,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48, 
  1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,35,168,1,0,1,2,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,27,128,129, 
  128,13,136,193,127,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,35,168,1,0,1,1,15,1,35,168,1,0,17,1,98,168,1,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0, 
  6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,146,168,1,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129, 
  31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,216,172,1,0,1, 
  4,19,121,0,0,0,104,1,0,0,1,0,17,1,216,172,1,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,216,172,1,0,1,4,15,1,216,172,1,0,17,1,185,242,0,0,1,4,15,1,216,172,1,0,17, 
  1,251,171,1,0,1,4,15,1,216,172,1,0,17,1,108,169,1,0,1,4,15,1,216,172,1,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,216,172,1,0,1,4,15,1,216,172,1,0, 
  17,1,122,3,0,0,1,2,21,1,176,0,0,0,188,37,3,0,11,0,0,0,3,0,0,0,112,40,3,128,1,240,1,129,2,240,1,128,31,16,197,129,76,8,4,128,41,120,4,129,6,240,129,128,7,240,1,127,110,152, 
  3,128,129,144,2,128,135,248,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,29,170,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,29,170,1,0,1,4,15,1,29,170,1,0,17,1,185,242, 
  0,0,1,4,15,1,29,170,1,0,17,1,47,242,0,0,1,4,15,1,29,170,1,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,29,170,1,0,1,4,15,1,29,170,1,0,17,1,122, 
  3,0,0,1,2,21,0,89,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,61,104,9,129,113,8,6,128,114,0,70,129,131,120,4,128,109,184,7,131,37,208,9,128,111,152,6,128,130,224,4,128,137,16,4,128,121, 
  112,197,127,74,216,72,128,138,168,3,128,140,64,3,128,13,56,202,124,110,40,7,128,79,72,200,125,141,176,2,128,19,140,0,0,0,145,1,0,0,1,0,17,1,29,170,1,0,1,15,1,29,170,1,0,17,1,8,38,0, 
  0,1,15,1,29,170,1,0,17,1,63,34,0,0,1,15,1,29,170,1,0,17,1,119,171,1,0,1,15,1,29,170,1,0,17,1,26,27,0,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,29,170,1,0,1,19, 
  109,0,0,0,56,1,0,0,1,0,17,1,29,170,1,0,1,1,19,138,0,0,0,139,1,0,0,1,0,17,1,29,170,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,29,170,1,0,1,19,74,0,0,0,207, 
  0,0,0,1,0,17,1,29,170,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,29,170,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,29,170,1,0,1,19,140,0,0,0,146,1,0,0,1,0,17, 
  1,29,170,1,0,1,15,1,29,170,1,0,17,1,247,16,0,0,1,15,1,29,170,1,0,17,1,196,16,0,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,29,170,1,0,1,2,21,1,65,0,0,0,81,52,3, 
  0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,83,200,1,128,125,88,1,128,8,4,19,114,0,0,0,95,1,0,0,3,0,14,1,4,17,1,185,171,1,0,1,2,21,1,53, 
  0,0,0,168,135,3,0,5,0,0,0,2,0,0,0,124,48,1,128,1,160,1,128,2,160,129,128,7,160,1,128,6,160,1,128,4,19,114,0,0,0,93,1,0,0,4,0,14,1,8,19,114,0,0,0,94,1,0,0,3, 
  0,14,1,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,64,172,1,0,1,4,15,1, 
  64,172,1,0,17,1,122,3,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0,0,0, 
  1,0,17,1,64,172,1,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,64,172,1,0,17,1,165,172,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,64,172,1,0,1,2,21,1,39,0,0,0,151, 
  136,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,189,1,0,0,255,255,255,255,22,0,0,0,4,0, 
  0,0,59,128,140,129,113,240,6,128,114,96,6,132,115,208,5,132,61,176,203,128,37,232,12,128,75,144,10,128,77,40,74,128,109,160,72,131,121,64,5,128,74,32,11,128,27,80,77,125,60,24,12,130,13,88,205,125,78,192, 
  137,128,79,48,137,128,110,16,8,128,111,128,7,128,130,176,4,128,131,72,4,128,140,224,3,128,141,80,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,216,172,1,0,1,15,1,216,172,1,0,17,1,58,240,1,0, 
  1,15,1,216,172,1,0,17,1,246,238,1,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,216,172,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,216,172,1,0,1,19,78,0,0,0,218,0,0,0,1, 
  0,17,1,216,172,1,0,1,19,77,0,0,0,214,0,0,0,1,0,17,1,216,172,1,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,216,172,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,216,172,1, 
  0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,216,172,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,216,172,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,216,172,1,0,1,15,1,216,172, 
  1,0,17,1,181,238,1,0,1,15,1,216,172,1,0,17,1,50,235,1,0,1,19,60,0,0,0,163,0,0,0,1,0,17,1,216,172,1,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,216,172,1,0,1,15,1, 
  216,172,1,0,17,1,255,234,1,0,1,15,1,216,172,1,0,17,1,201,174,1,0,1,19,27,0,0,0,79,0,0,0,4,0,14,1,15,1,216,172,1,0,17,1,150,174,1,0,1,1,19,61,0,0,0,166,0,0,0, 
  1,0,17,1,216,172,1,0,1,2,21,1,39,0,0,0,157,137,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0, 
  1,21,1,47,0,0,0,163,138,3,0,5,0,0,0,2,0,0,0,6,112,1,129,1,112,1,128,2,112,129,127,7,112,1,128,66,48,1,128,4,17,1,4,175,1,0,1,8,19,59,0,0,0,162,0,0,0,1,0,1, 
  21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104, 
  131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,212,176,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,212,176,1,0,1,4,19,115,0,0,0,96,1,0,0,1, 
  0,17,1,212,176,1,0,1,4,15,1,212,176,1,0,17,1,185,242,0,0,1,4,15,1,212,176,1,0,17,1,143,176,1,0,1,4,15,1,212,176,1,0,17,1,222,175,1,0,1,4,15,1,212,176,1,0,17,1,40, 
  12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,212,176,1,0,1,4,15,1,212,176,1,0,17,1,116,10,0,0,1,2,21,1,176,0,0,0,188,37,3,0,11,0,0,0,3,0,0,0,112,40,3,128, 
  1,240,1,129,2,240,1,128,31,16,197,129,76,8,4,128,41,120,4,129,6,240,129,128,7,240,1,127,110,152,3,128,129,144,2,128,135,248,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,29,170,1,0,1, 
  4,19,121,0,0,0,104,1,0,0,1,0,17,1,29,170,1,0,1,4,15,1,29,170,1,0,17,1,185,242,0,0,1,4,15,1,29,170,1,0,17,1,141,14,0,0,1,4,15,1,29,170,1,0,17,1,40,12,0,0, 
  1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,29,170,1,0,1,4,15,1,29,170,1,0,17,1,116,10,0,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193, 
  127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,64,172,1,0,1,4,15,1,64,172,1,0,17,1,116,10,0,0,1,2,21,0,149,1,0,0,255,255,255,255,20,0,0,0,4,0, 
  0,0,61,64,11,129,113,176,6,128,114,32,134,131,115,144,133,131,77,232,137,128,37,176,11,128,109,96,72,131,110,208,7,128,111,64,7,128,121,0,5,128,74,176,10,128,75,80,10,128,60,168,139,129,13,24,204,124,78,128, 
  73,126,79,240,72,126,130,112,4,128,131,8,4,128,140,160,3,128,141,16,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,212,176,1,0,1,15,1,212,176,1,0,17,1,111,234,1,0,1,15,1,212,176,1,0,17, 
  1,43,233,1,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,212,176,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,212,176,1,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,212,176,1,0,1, 
  19,77,0,0,0,214,0,0,0,1,0,17,1,212,176,1,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,212,176,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,212,176,1,0,1,19,74,0,0,0,207, 
  0,0,0,1,0,17,1,212,176,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,212,176,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,212,176,1,0,1,15,1,212,176,1,0,17,1,0,190,1,0, 
  1,15,1,212,176,1,0,17,1,208,178,1,0,1,19,60,0,0,0,164,0,0,0,3,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,212,176,1,0,1,15,1,212,176,1,0,17,1,157,178,1,0,1,1,15,1, 
  212,176,1,0,17,1,106,178,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,212,176,1,0,1,2,21,1,39,0,0,0,157,137,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,79,248,0,128, 
  8,4,17,1,206,8,0,0,1,19,13,0,0,0,34,0,0,0,1,0,1,21,1,39,0,0,0,54,139,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,140,240,0,128,4,17,1,42,17,0,0,1,8, 
  19,140,0,0,0,144,1,0,0,1,0,1,21,1,212,0,0,0,114,140,3,0,13,0,0,0,3,0,0,0,112,224,4,128,1,200,2,129,2,200,130,129,31,112,196,129,76,0,4,128,41,192,133,129,6,200,194,128,7,200, 
  2,127,82,80,5,128,110,48,6,128,127,104,131,128,129,208,2,128,135,48,2,128,4,19,130,0,0,0,115,1,0,0,1,0,17,1,170,188,1,0,1,10,4,19,121,0,0,0,104,1,0,0,1,0,17,1,170,188,1,0, 
  1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,170,188,1,0,1,4,15,1,170,188,1,0,17,1,40,12,0,0,1,4,15,1,170,188,1,0,17,1,116,10,0,0,1,4,15,1,170,188,1,0,17,1,185,242,0, 
  0,1,4,15,1,170,188,1,0,17,1,222,175,1,0,1,6,15,1,170,188,1,0,17,1,176,179,1,0,1,4,15,1,170,188,1,0,17,1,143,176,1,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,1,76,1, 
  0,0,86,141,3,0,29,0,0,0,4,0,0,0,112,56,6,128,1,176,196,131,2,176,4,132,3,56,9,128,4,56,9,128,22,120,8,128,6,176,196,127,7,176,132,132,24,32,74,131,25,184,8,130,10,56,7,128,27,248, 
  198,130,76,248,4,132,45,48,4,128,110,120,5,128,31,120,6,129,33,112,4,130,41,56,133,130,66,184,134,128,79,248,5,129,82,248,7,128,120,184,69,129,123,224,9,128,127,160,9,128,129,120,7,128,135,184,4,128,136,184, 
  7,128,137,248,8,128,140,56,8,128,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,10,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12, 
  17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180, 
  1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,19,78,0,0,0,219,0,0, 
  0,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,2,21,1,176,0,0,0,188,37,3,0,11,0,0,0,3,0,0,0,112,40,3,128,1,240,1,129,2,240,1,128,31, 
  16,197,129,76,8,4,128,41,120,4,129,6,240,129,128,7,240,1,127,110,152,3,128,129,144,2,128,135,248,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,174,181,1,0,1,4,19,121,0,0,0,104,1,0, 
  0,1,0,17,1,174,181,1,0,1,4,15,1,174,181,1,0,17,1,185,242,0,0,1,4,15,1,174,181,1,0,17,1,143,176,1,0,1,4,15,1,174,181,1,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0, 
  0,0,1,0,17,1,174,181,1,0,1,4,15,1,174,181,1,0,17,1,116,10,0,0,1,2,21,0,49,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,37,144,8,130,113,240,196,130,74,152,199,130,131,104,3,128, 
  140,0,3,128,13,248,200,126,110,224,5,128,79,0,7,129,61,40,72,128,77,144,71,128,109,112,6,129,111,80,5,128,121,96,4,128,130,208,3,128,141,112,2,128,19,140,0,0,0,145,1,0,0,1,0,17,1,174,181,1, 
  0,1,15,1,174,181,1,0,17,1,219,187,1,0,1,15,1,174,181,1,0,17,1,19,183,1,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,174,181,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,174, 
  181,1,0,1,19,77,0,0,0,215,0,0,0,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,174,181,1,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,174,181,1,0,1,19,74,0,0,0,206,0,0, 
  0,1,0,17,1,174,181,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,174,181,1,0,1,1,19,140,0,0,0,146,1,0,0,1,0,17,1,174,181,1,0,1,15,1,174,181,1,0,17,1,157,178,1,0,1, 
  15,1,174,181,1,0,17,1,224,182,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,174,181,1,0,1,2,21,1,39,0,0,0,157,137,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240, 
  0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,69,0,0,0,116,142,3,0,5,0,0,0,2,0,0,0,120,160,1,128,1,32,2,128,2,32,130,128,123,224,1,128,10,48,1, 
  128,4,15,1,254,186,1,0,17,1,18,186,1,0,1,4,17,1,69,184,1,0,1,4,17,1,100,183,1,0,1,8,19,113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,110,143,3,0,4,0,0,0,2,0, 
  0,0,120,16,1,128,1,80,1,128,2,80,65,128,10,88,1,128,4,17,1,12,184,1,0,1,8,4,15,1,169,183,1,0,17,1,107,27,0,0,1,19,113,0,0,0,83,1,0,0,2,0,1,21,0,40,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,169,183,1,0,17,1,210,183,1,0,1,1,2,21,1,45,0,0,0,92,144,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128, 
  120,240,0,128,4,19,113,0,0,0,84,1,0,0,4,0,14,1,8,19,113,0,0,0,79,1,0,0,3,0,14,1,21,1,45,0,0,0,63,145,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,10,240, 
  0,128,4,15,1,48,33,0,0,17,1,107,27,0,0,1,8,19,113,0,0,0,81,1,0,0,3,0,1,21,1,57,0,0,0,34,146,3,0,4,0,0,0,2,0,0,0,10,88,1,128,1,80,1,128,2,80,129,127,123, 
  16,1,128,4,17,1,217,185,1,0,1,8,4,15,1,118,185,1,0,17,1,138,184,1,0,1,19,113,0,0,0,82,1,0,0,2,0,1,21,1,86,0,0,0,202,46,3,0,6,0,0,0,2,0,0,0,39,216,65,129, 
  1,80,1,128,2,80,129,128,11,72,66,127,138,152,1,128,139,88,1,128,8,4,17,1,161,29,0,0,1,4,17,1,225,184,1,0,1,4,15,1,250,27,0,0,17,1,194,27,0,0,1,4,19,134,0,0,0,132,1,0, 
  0,2,0,1,2,21,7,53,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,208,0,128,125,64,1,128,4,15,1,56,29,0,0,17,1,50,185,1,0,1,4,19,134,0,0,0,131,1,0,0,3,0,1,21,9, 
  27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,56,0,0,0,203,47,3,0,4,0,0,0,2,0,0,0,138,24,1,128,1,16,1,128,2,16,129,127,139,128,1,128, 
  8,4,19,135,0,0,0,135,1,0,0,2,0,1,4,17,1,248,28,0,0,1,19,135,0,0,0,136,1,0,0,1,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128, 
  15,1,118,185,1,0,17,1,159,185,1,0,1,1,2,21,1,45,0,0,0,17,147,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240,0,128,4,19,113,0,0,0,88,1,0,0,4,0,14,1,8, 
  19,113,0,0,0,78,1,0,0,3,0,14,1,21,1,45,0,0,0,63,145,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,10,240,0,128,4,15,1,39,32,0,0,17,1,18,186,1,0,1,8,19,113, 
  0,0,0,87,1,0,0,3,0,1,21,1,86,0,0,0,202,46,3,0,6,0,0,0,2,0,0,0,39,216,65,129,1,80,1,128,2,80,129,128,11,72,66,127,138,152,1,128,139,88,1,128,8,4,17,1,161,29,0,0, 
  1,4,17,1,105,186,1,0,1,4,15,1,250,27,0,0,17,1,194,27,0,0,1,4,19,134,0,0,0,132,1,0,0,2,0,1,2,21,7,53,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,208,0,128,125, 
  64,1,128,4,15,1,56,29,0,0,17,1,186,186,1,0,1,4,19,134,0,0,0,131,1,0,0,3,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1, 
  56,0,0,0,203,47,3,0,4,0,0,0,2,0,0,0,138,88,1,128,1,80,1,128,2,80,129,127,139,16,1,128,4,17,1,248,28,0,0,1,8,4,19,135,0,0,0,135,1,0,0,2,0,1,19,135,0,0,0,136, 
  1,0,0,1,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,254,186,1,0,17,1,39,187,1,0,1,1,2,21,1,51,0,0,0,245,147,3,0,4,0,0, 
  0,2,0,0,0,120,16,1,128,1,80,1,128,2,80,1,128,123,88,1,128,4,17,1,161,187,1,0,1,8,4,17,1,103,187,1,0,1,19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,45,0,0,0,92,144,3, 
  0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,120,240,0,128,4,19,113,0,0,0,90,1,0,0,4,0,14,1,8,19,113,0,0,0,89,1,0,0,3,0,14,1,21,1,45,0,0,0,17,147,3,0,3, 
  0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,123,240,0,128,4,19,113,0,0,0,91,1,0,0,4,0,14,1,8,19,113,0,0,0,85,1,0,0,3,0,14,1,21,1,80,0,0,0,228,148,3,0,6,0,0, 
  0,2,0,0,0,136,192,1,128,1,80,129,128,2,80,1,128,25,64,66,128,33,88,65,128,137,0,2,128,10,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,172,22,0,0,1,4,17,1,89,21,0,0,1,6, 
  17,1,55,188,1,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,44,0,0,0,234,149,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,21,248,0,128,10,12,19,131,0,0,0,124,1,0,0, 
  1,0,1,12,17,1,107,188,1,0,1,21,7,35,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,43,176,0,128,4,19,131,0,0,0,116,1,0,0,2,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,88,5,129,113,80,9,128,114,208,71,130,115,112,71,131,77,88,132,128,37,240,4,128,109,48,200,130, 
  110,176,9,128,111,96,4,128,121,192,8,128,74,208,2,128,130,96,3,128,140,240,3,128,13,80,198,124,78,88,68,126,79,192,69,126,131,64,10,128,141,224,6,128,19,140,0,0,0,146,1,0,0,1,0,17,1,170,188,1, 
  0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,170,188,1,0,1,15,1,170,188,1,0,17,1,219,187,1,0,1,1,19,74,0,0,0,208,0,0,0,1,0,17,1,170,188,1,0,1,15,1,170,188,1,0,17,1, 
  224,182,1,0,1,15,1,170,188,1,0,17,1,157,178,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,170,188,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,170,188,1,0,1,19,140,0,0,0,145, 
  1,0,0,1,0,17,1,170,188,1,0,1,19,78,0,0,0,217,0,0,0,2,0,1,19,77,0,0,0,216,0,0,0,2,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,170,188,1,0,1,19,109,0,0,0,56, 
  1,0,0,1,0,17,1,170,188,1,0,1,19,77,0,0,0,215,0,0,0,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,170,188,1,0,1,15,1,170,188,1,0,17,1,19,183,1,0,1,2,21,1,53,0, 
  0,0,239,150,3,0,5,0,0,0,2,0,0,0,6,160,1,128,1,160,193,128,2,160,129,127,7,160,1,128,45,48,1,128,4,15,1,63,239,0,0,17,1,65,190,1,0,1,8,19,75,0,0,0,210,0,0,0,1,0, 
  1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,120,9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112,68,131,7,112,68,131,88,248,12,128,89,136,12,128,10, 
  120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88,10,128,31,8,208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24,12,128,95,232,73,129,97,8,137,129,98,152,136,129,100, 
  184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232,4,128,130,120,4,128,8,4,15,1,40,206,1,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,40,206,1,0,1,4,19,120, 
  0,0,0,103,1,0,0,1,0,17,1,40,206,1,0,1,4,15,1,40,206,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,40,206,1,0,1,4,19,87,0,0,0,4,1,0,0,1, 
  0,17,1,40,206,1,0,1,4,15,1,40,206,1,0,17,1,239,205,1,0,1,4,15,1,40,206,1,0,17,1,182,205,1,0,1,4,15,1,40,206,1,0,17,1,125,205,1,0,1,4,15,1,40,206,1,0,17,1,68, 
  205,1,0,1,4,15,1,40,206,1,0,17,1,11,205,1,0,1,4,15,1,40,206,1,0,17,1,210,204,1,0,1,4,15,1,40,206,1,0,17,1,153,204,1,0,1,4,15,1,40,206,1,0,17,1,96,204,1,0,1, 
  4,15,1,40,206,1,0,17,1,39,204,1,0,1,4,15,1,40,206,1,0,17,1,238,203,1,0,1,4,15,1,40,206,1,0,17,1,181,203,1,0,1,4,15,1,40,206,1,0,17,1,124,203,1,0,1,4,15,1,40, 
  206,1,0,17,1,67,203,1,0,1,4,15,1,40,206,1,0,17,1,10,203,1,0,1,4,15,1,40,206,1,0,17,1,209,202,1,0,1,4,15,1,40,206,1,0,17,1,152,202,1,0,1,4,15,1,40,206,1,0,17, 
  1,206,174,0,0,1,4,15,1,40,206,1,0,17,1,57,146,0,0,1,4,15,1,40,206,1,0,17,1,181,195,1,0,1,4,15,1,40,206,1,0,17,1,126,114,0,0,1,4,15,1,40,206,1,0,17,1,95,192,1, 
  0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,40,200,206,130,89,184,11, 
  128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129,97,56,136,129,98,200,7,128,100,232,6,128,102,184,5, 
  128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,99,194,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,99,194,1,0,1,4,15,1,99,194,1,0,17, 
  1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,99,194,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,99,194,1,0,1,4,15,1,99,194,1,0,17,1,18,214,0,0,1,4,15, 
  1,99,194,1,0,17,1,159,213,0,0,1,4,15,1,99,194,1,0,17,1,44,213,0,0,1,4,15,1,99,194,1,0,17,1,185,212,0,0,1,4,15,1,99,194,1,0,17,1,70,212,0,0,1,4,15,1,99,194,1, 
  0,17,1,211,211,0,0,1,4,15,1,99,194,1,0,17,1,96,211,0,0,1,4,15,1,99,194,1,0,17,1,237,210,0,0,1,4,15,1,99,194,1,0,17,1,122,210,0,0,1,4,15,1,99,194,1,0,17,1,7, 
  210,0,0,1,4,15,1,99,194,1,0,17,1,148,209,0,0,1,4,15,1,99,194,1,0,17,1,33,209,0,0,1,4,15,1,99,194,1,0,17,1,174,208,0,0,1,4,15,1,99,194,1,0,17,1,59,208,0,0,1, 
  4,15,1,99,194,1,0,17,1,200,207,0,0,1,4,15,1,99,194,1,0,17,1,151,205,0,0,1,4,15,1,99,194,1,0,17,1,206,174,0,0,1,4,15,1,99,194,1,0,17,1,57,146,0,0,1,4,15,1,99, 
  194,1,0,17,1,229,17,0,0,1,4,15,1,99,194,1,0,17,1,47,141,0,0,1,4,15,1,99,194,1,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,64,64,195, 
  130,81,248,4,128,34,168,134,130,68,96,132,130,36,32,202,127,85,40,73,130,86,104,68,130,87,24,6,128,120,152,8,128,9,160,199,129,10,96,4,128,80,136,5,128,82,16,7,128,84,208,3,128,117,176,2,128,118,184,9, 
  128,121,8,8,128,19,80,0,0,0,221,0,0,0,1,0,17,1,99,194,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,99,194,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,99,194,1,0,1,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,99,194,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,99,194,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,99,194,1,0,1,19,64,0,0,0,178, 
  0,0,0,1,0,17,1,99,194,1,0,1,15,1,99,194,1,0,17,1,72,92,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,99,194,1,0,1,15,1,99,194,1,0,17,1,62,114,0,0,1,19,87,0,0, 
  0,7,1,0,0,1,0,17,1,99,194,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,99,194,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,99,194,1,0,1,15,1,99,194,1,0,17,1,231,113, 
  0,0,1,15,1,99,194,1,0,17,1,232,55,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86, 
  232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98, 
  168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,182,200,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,182,200,1, 
  0,1,4,15,1,182,200,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,182,200,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,182,200,1,0,1,4,15,1,182,200,1, 
  0,17,1,239,205,1,0,1,4,15,1,182,200,1,0,17,1,182,205,1,0,1,4,15,1,182,200,1,0,17,1,125,205,1,0,1,4,15,1,182,200,1,0,17,1,125,200,1,0,1,4,15,1,182,200,1,0,17,1,11, 
  205,1,0,1,4,15,1,182,200,1,0,17,1,210,204,1,0,1,4,15,1,182,200,1,0,17,1,153,204,1,0,1,4,15,1,182,200,1,0,17,1,96,204,1,0,1,4,15,1,182,200,1,0,17,1,39,204,1,0,1, 
  4,15,1,182,200,1,0,17,1,68,200,1,0,1,4,15,1,182,200,1,0,17,1,11,200,1,0,1,4,15,1,182,200,1,0,17,1,210,199,1,0,1,4,15,1,182,200,1,0,17,1,153,199,1,0,1,4,15,1,182, 
  200,1,0,17,1,10,203,1,0,1,4,15,1,182,200,1,0,17,1,209,202,1,0,1,4,15,1,182,200,1,0,17,1,152,202,1,0,1,4,15,1,182,200,1,0,17,1,206,174,0,0,1,4,15,1,182,200,1,0,17, 
  1,57,146,0,0,1,4,15,1,182,200,1,0,17,1,167,197,1,0,1,4,15,1,182,200,1,0,17,1,126,114,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3, 
  132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142, 
  128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,182,200,1,0, 
  1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,182,200,1,0,1,4,15,1,182,200,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,182,200,1,0,1,4,19,87,0,0,0,4, 
  1,0,0,1,0,17,1,182,200,1,0,1,4,15,1,182,200,1,0,17,1,239,205,1,0,1,4,15,1,182,200,1,0,17,1,182,205,1,0,1,4,15,1,182,200,1,0,17,1,125,205,1,0,1,4,15,1,182,200,1, 
  0,17,1,125,200,1,0,1,4,15,1,182,200,1,0,17,1,11,205,1,0,1,4,15,1,182,200,1,0,17,1,210,204,1,0,1,4,15,1,182,200,1,0,17,1,153,204,1,0,1,4,15,1,182,200,1,0,17,1,96, 
  204,1,0,1,4,15,1,182,200,1,0,17,1,39,204,1,0,1,4,15,1,182,200,1,0,17,1,68,200,1,0,1,4,15,1,182,200,1,0,17,1,11,200,1,0,1,4,15,1,182,200,1,0,17,1,210,199,1,0,1, 
  4,15,1,182,200,1,0,17,1,153,199,1,0,1,4,15,1,182,200,1,0,17,1,10,203,1,0,1,4,15,1,182,200,1,0,17,1,209,202,1,0,1,4,15,1,182,200,1,0,17,1,152,202,1,0,1,4,15,1,182, 
  200,1,0,17,1,206,174,0,0,1,4,15,1,182,200,1,0,17,1,57,146,0,0,1,4,15,1,182,200,1,0,17,1,167,197,1,0,1,4,15,1,182,200,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130, 
  151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0, 
  3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,108,209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0, 
  0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,223,209,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,247,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0, 
  0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2, 
  240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,4,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,235,0,0,0,1,0,1,21,0,37,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128, 
  81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17, 
  1,182,200,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,182,200,1,0,1,15,1,182,200,1,0,17,1,220,201,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0, 
  178,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0,175,0,0,0,1,0, 
  17,1,182,200,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,182,200,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,182,200,1,0, 
  1,19,34,0,0,0,95,0,0,0,1,0,17,1,182,200,1,0,1,19,34,0,0,0,93,0,0,0,2,0,1,2,21,1,51,0,0,0,72,152,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,16,1,128,2,16, 
  1,128,27,24,1,128,10,6,17,1,27,202,1,0,1,4,17,1,215,91,0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,48,1,129,1,152,129, 
  128,2,152,1,128,41,48,1,128,72,160,1,128,12,19,117,0,0,0,98,1,0,0,1,0,1,10,12,17,1,88,202,1,0,1,2,21,7,36,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,4,15, 
  1,175,91,0,0,17,1,232,56,0,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96, 
  1,128,1,96,65,128,31,240,0,128,4,15,1,160,207,0,0,17,1,226,205,0,0,1,8,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1, 
  96,65,128,31,240,0,128,4,15,1,19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128, 
  31,240,0,128,4,15,1,134,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0, 
  128,8,4,15,1,249,208,0,0,17,1,226,205,0,0,1,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4, 
  15,1,108,209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,223, 
  209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,247,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,82,210,0,0,17, 
  1,226,205,0,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,197,210,0,0,17,1,226,205, 
  0,0,1,8,19,86,0,0,0,1,1,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,56,211,0,0,17,1,226,205,0,0,1, 
  8,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,171,211,0,0,17,1,226,205,0,0,1,8,19,86, 
  0,0,0,239,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,30,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0, 
  253,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0, 
  0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,4,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,235,0,0,0,1,0, 
  1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,119,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,3,1,0,0,1,0,1,21,1, 
  45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,234,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,251,0,0,0,1,0,1,21,1,45,0,0, 
  0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,93,214,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,241,0,0,0,1,0,1,21,0,142,1,0,0,255,255, 
  255,255,19,0,0,0,4,0,0,0,64,88,202,128,81,216,8,128,34,232,74,130,80,104,9,128,68,248,9,130,85,40,135,130,86,152,134,130,87,8,6,128,120,232,3,128,9,224,11,130,10,80,203,128,82,72,8,128,84,184, 
  135,128,90,120,69,129,116,112,5,128,117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,40,206,1,0,17,1,166,238,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,40,206,1,0,1,19,87,0, 
  0,0,6,1,0,0,1,0,17,1,40,206,1,0,1,15,1,40,206,1,0,17,1,236,232,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,40,206,1,0,1,1,19,68,0,0,0,190,0,0,0,1,0,17,1, 
  40,206,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,40,206,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,40,206,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,40,206,1,0,1,19, 
  64,0,0,0,175,0,0,0,1,0,17,1,40,206,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,40,206,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,40,206,1,0,1,19,64,0,0,0,172,0, 
  0,0,1,0,17,1,40,206,1,0,1,19,116,0,0,0,97,1,0,0,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,40,206,1,0,1,15,1,40,206,1,0,17,1,183,207,1,0,1,19,68,0,0,0,189, 
  0,0,0,1,0,17,1,40,206,1,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,40,206,1,0,1,2,21,1,99,0,0,0,14,153,3,0,8,0,0,0,3,0,0,0,25,16,66,129,1,208,194,127,2,208,66, 
  129,35,216,2,128,36,144,1,128,33,80,2,128,30,144,2,128,34,208,1,128,4,17,1,45,229,1,0,1,4,17,1,101,225,1,0,1,4,17,1,49,221,1,0,1,4,17,1,135,217,1,0,1,4,17,1,186,212,1,0, 
  1,8,4,17,1,38,208,1,0,1,19,9,0,0,0,28,0,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132, 
  101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129, 
  97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,252,210,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0, 
  17,1,252,210,1,0,1,4,15,1,252,210,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,252,210,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,252,210,1,0,1,4, 
  15,1,252,210,1,0,17,1,239,205,1,0,1,4,15,1,252,210,1,0,17,1,195,210,1,0,1,4,15,1,252,210,1,0,17,1,125,205,1,0,1,4,15,1,252,210,1,0,17,1,68,205,1,0,1,4,15,1,252,210, 
  1,0,17,1,138,210,1,0,1,4,15,1,252,210,1,0,17,1,210,204,1,0,1,4,15,1,252,210,1,0,17,1,153,204,1,0,1,4,15,1,252,210,1,0,17,1,96,204,1,0,1,4,15,1,252,210,1,0,17,1, 
  39,204,1,0,1,4,15,1,252,210,1,0,17,1,238,203,1,0,1,4,15,1,252,210,1,0,17,1,11,200,1,0,1,4,15,1,252,210,1,0,17,1,81,210,1,0,1,4,15,1,252,210,1,0,17,1,24,210,1,0, 
  1,4,15,1,252,210,1,0,17,1,10,203,1,0,1,4,15,1,252,210,1,0,17,1,209,202,1,0,1,4,15,1,252,210,1,0,17,1,152,202,1,0,1,4,15,1,252,210,1,0,17,1,206,174,0,0,1,4,15,1, 
  252,210,1,0,17,1,57,146,0,0,1,4,15,1,252,210,1,0,17,1,181,195,1,0,1,4,15,1,252,210,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96, 
  1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1, 
  96,65,128,31,240,0,128,4,15,1,108,209,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128, 
  31,240,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0, 
  128,8,4,15,1,234,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,251,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168, 
  7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,252,210,1,0,1,19,87,0,0, 
  0,6,1,0,0,1,0,17,1,252,210,1,0,1,15,1,252,210,1,0,17,1,123,212,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,252,210, 
  1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0, 
  0,0,174,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,252,210,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,252,210,1,0,1,19,34,0,0,0,95,0,0,0, 
  1,0,17,1,252,210,1,0,1,15,1,252,210,1,0,17,1,35,212,1,0,1,2,21,1,75,0,0,0,14,153,3,0,6,0,0,0,2,0,0,0,36,80,1,128,1,80,2,129,2,80,130,128,35,16,2,128,30,144,1, 
  128,33,208,1,128,4,17,1,45,229,1,0,1,4,17,1,186,212,1,0,1,4,17,1,135,217,1,0,1,4,17,1,38,208,1,0,1,8,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,51,0,0,0,72,152,3, 
  0,4,0,0,0,2,0,0,0,80,88,1,128,1,16,1,128,2,16,1,128,27,24,1,128,10,6,17,1,27,202,1,0,1,4,17,1,215,91,0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0, 
  196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128, 
  92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128, 
  8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,201,215,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,201,215,1,0,1,4,15,1,201,215,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5, 
  1,0,0,1,0,17,1,201,215,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,201,215,1,0,1,4,15,1,201,215,1,0,17,1,239,205,1,0,1,4,15,1,201,215,1,0,17,1,182,205,1,0,1,4, 
  15,1,201,215,1,0,17,1,144,215,1,0,1,4,15,1,201,215,1,0,17,1,68,205,1,0,1,4,15,1,201,215,1,0,17,1,138,210,1,0,1,4,15,1,201,215,1,0,17,1,210,204,1,0,1,4,15,1,201,215, 
  1,0,17,1,153,204,1,0,1,4,15,1,201,215,1,0,17,1,96,204,1,0,1,4,15,1,201,215,1,0,17,1,39,204,1,0,1,4,15,1,201,215,1,0,17,1,87,215,1,0,1,4,15,1,201,215,1,0,17,1, 
  11,200,1,0,1,4,15,1,201,215,1,0,17,1,210,199,1,0,1,4,15,1,201,215,1,0,17,1,24,210,1,0,1,4,15,1,201,215,1,0,17,1,30,215,1,0,1,4,15,1,201,215,1,0,17,1,229,214,1,0, 
  1,4,15,1,201,215,1,0,17,1,172,214,1,0,1,4,15,1,201,215,1,0,17,1,206,174,0,0,1,4,15,1,201,215,1,0,17,1,57,146,0,0,1,4,15,1,201,215,1,0,17,1,181,195,1,0,1,4,15,1, 
  201,215,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,160,207,0,0,17,1,226,205,0,0,1,19,84,0, 
  0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231, 
  0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,134,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0, 
  1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,82,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,237,0,0,0,1,0,1, 
  21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,119,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,3,1,0,0,1,0,1,21,0,38, 
  1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120, 
  192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,201,215,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,201,215,1,0,1,15,1,201,215,1,0,17,1,72,217,1,0,1,19,80,0,0, 
  0,221,0,0,0,1,0,17,1,201,215,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,201,215,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,201,215,1,0,1,19,64,0,0,0,176,0,0,0,1, 
  0,17,1,201,215,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,201,215,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,201,215,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,201,215,1, 
  0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,201,215,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,201,215,1,0,1,15,1,201,215,1,0,17,1,240,216,1,0,1,2,21,1,75,0,0,0,14,153, 
  3,0,6,0,0,0,2,0,0,0,36,16,2,128,1,80,2,129,2,80,130,128,35,144,1,128,30,80,1,128,33,208,1,128,4,17,1,186,212,1,0,1,4,17,1,38,208,1,0,1,4,17,1,135,217,1,0,1,4,17, 
  1,45,229,1,0,1,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,51,0,0,0,72,152,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,80,1,128,2,80,1,128,27,16,1,128,6,17,1,27,202,1, 
  0,1,10,4,17,1,215,91,0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141, 
  132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72, 
  129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,178,219,1,0,1,4,19,120,0,0,0,103,1,0,0,1, 
  0,17,1,178,219,1,0,1,4,15,1,178,219,1,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,178,219,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,178,219,1,0,1, 
  4,15,1,178,219,1,0,17,1,239,205,1,0,1,4,15,1,178,219,1,0,17,1,182,205,1,0,1,4,15,1,178,219,1,0,17,1,125,205,1,0,1,4,15,1,178,219,1,0,17,1,125,200,1,0,1,4,15,1,178, 
  219,1,0,17,1,138,210,1,0,1,4,15,1,178,219,1,0,17,1,210,204,1,0,1,4,15,1,178,219,1,0,17,1,153,204,1,0,1,4,15,1,178,219,1,0,17,1,96,204,1,0,1,4,15,1,178,219,1,0,17, 
  1,121,219,1,0,1,4,15,1,178,219,1,0,17,1,68,200,1,0,1,4,15,1,178,219,1,0,17,1,181,203,1,0,1,4,15,1,178,219,1,0,17,1,81,210,1,0,1,4,15,1,178,219,1,0,17,1,24,210,1, 
  0,1,4,15,1,178,219,1,0,17,1,10,203,1,0,1,4,15,1,178,219,1,0,17,1,209,202,1,0,1,4,15,1,178,219,1,0,17,1,152,202,1,0,1,4,15,1,178,219,1,0,17,1,206,174,0,0,1,4,15, 
  1,178,219,1,0,17,1,57,146,0,0,1,4,15,1,178,219,1,0,17,1,181,195,1,0,1,4,15,1,178,219,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2, 
  240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,197,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,1,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128, 
  81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17, 
  1,178,219,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,178,219,1,0,1,15,1,178,219,1,0,17,1,220,201,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0, 
  178,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0,175,0,0,0,1,0, 
  17,1,178,219,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,178,219,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,178,219,1,0, 
  1,19,34,0,0,0,95,0,0,0,1,0,17,1,178,219,1,0,1,15,1,178,219,1,0,17,1,217,220,1,0,1,2,21,1,75,0,0,0,14,153,3,0,6,0,0,0,2,0,0,0,36,144,1,128,1,16,2,129,2, 
  16,130,128,35,208,1,128,30,80,1,128,33,24,2,128,4,17,1,186,212,1,0,1,4,17,1,45,229,1,0,1,4,17,1,38,208,1,0,1,8,4,17,1,135,217,1,0,1,19,34,0,0,0,90,0,0,0,3,0,14, 
  1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90, 
  40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128, 
  144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,206,223,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,206,223,1,0,1,4,15,1,206,223,1,0,17,1,133,214,0,0,1, 
  4,19,87,0,0,0,5,1,0,0,1,0,17,1,206,223,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,206,223,1,0,1,4,15,1,206,223,1,0,17,1,149,223,1,0,1,4,15,1,206,223,1,0,17, 
  1,182,205,1,0,1,4,15,1,206,223,1,0,17,1,125,205,1,0,1,4,15,1,206,223,1,0,17,1,68,205,1,0,1,4,15,1,206,223,1,0,17,1,11,205,1,0,1,4,15,1,206,223,1,0,17,1,210,204,1, 
  0,1,4,15,1,206,223,1,0,17,1,153,204,1,0,1,4,15,1,206,223,1,0,17,1,96,204,1,0,1,4,15,1,206,223,1,0,17,1,39,204,1,0,1,4,15,1,206,223,1,0,17,1,68,200,1,0,1,4,15, 
  1,206,223,1,0,17,1,11,200,1,0,1,4,15,1,206,223,1,0,17,1,124,203,1,0,1,4,15,1,206,223,1,0,17,1,24,210,1,0,1,4,15,1,206,223,1,0,17,1,10,203,1,0,1,4,15,1,206,223,1, 
  0,17,1,92,223,1,0,1,4,15,1,206,223,1,0,17,1,35,223,1,0,1,4,15,1,206,223,1,0,17,1,206,174,0,0,1,4,15,1,206,223,1,0,17,1,57,146,0,0,1,4,15,1,206,223,1,0,17,1,181, 
  195,1,0,1,4,15,1,206,223,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,160,207,0,0,17,1,226,205, 
  0,0,1,8,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,19,208,0,0,17,1,226,205,0,0, 
  1,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,93,214,0,0,17,1,226,205,0,0,1,19,86, 
  0,0,0,241,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128, 
  82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,206,223,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,206,223,1,0,1,15,1,206,223, 
  1,0,17,1,123,212,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,206,223, 
  1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0, 
  0,0,173,0,0,0,1,0,17,1,206,223,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,206,223,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,206,223,1,0,1,15,1,206,223,1,0,17,1,245, 
  224,1,0,1,2,21,1,99,0,0,0,14,153,3,0,8,0,0,0,3,0,0,0,25,144,66,129,1,16,195,127,2,16,67,129,35,144,1,128,36,80,2,128,33,208,1,128,30,16,2,128,34,208,2,128,4,17,1,38,208, 
  1,0,1,4,17,1,135,217,1,0,1,4,17,1,186,212,1,0,1,4,17,1,45,229,1,0,1,4,17,1,49,221,1,0,1,4,17,1,101,225,1,0,1,8,19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,241, 
  1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91, 
  184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129, 
  248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,87,227,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,87,227,1,0,1,4,15,1,87,227,1,0,17,1,133,214,0,0,1,4,19,87,0, 
  0,0,5,1,0,0,1,0,17,1,87,227,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,87,227,1,0,1,4,15,1,87,227,1,0,17,1,239,205,1,0,1,4,15,1,87,227,1,0,17,1,182,205,1, 
  0,1,4,15,1,87,227,1,0,17,1,125,205,1,0,1,4,15,1,87,227,1,0,17,1,68,205,1,0,1,4,15,1,87,227,1,0,17,1,138,210,1,0,1,4,15,1,87,227,1,0,17,1,210,204,1,0,1,4,15, 
  1,87,227,1,0,17,1,153,204,1,0,1,4,15,1,87,227,1,0,17,1,96,204,1,0,1,4,15,1,87,227,1,0,17,1,121,219,1,0,1,4,15,1,87,227,1,0,17,1,68,200,1,0,1,4,15,1,87,227,1, 
  0,17,1,181,203,1,0,1,4,15,1,87,227,1,0,17,1,210,199,1,0,1,4,15,1,87,227,1,0,17,1,153,199,1,0,1,4,15,1,87,227,1,0,17,1,10,203,1,0,1,4,15,1,87,227,1,0,17,1,209, 
  202,1,0,1,4,15,1,87,227,1,0,17,1,152,202,1,0,1,4,15,1,87,227,1,0,17,1,206,174,0,0,1,4,15,1,87,227,1,0,17,1,57,146,0,0,1,4,15,1,87,227,1,0,17,1,181,195,1,0,1, 
  4,15,1,87,227,1,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4, 
  129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,87,227,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,87,227,1,0, 
  1,15,1,87,227,1,0,17,1,238,228,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,87,227,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,87,227,1,0,1,19,64,0,0,0,177,0,0,0,1, 
  0,17,1,87,227,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,87,227,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,87,227,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,87,227,1, 
  0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,87,227,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,87,227,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,87,227,1,0,1,15,1,87,227, 
  1,0,17,1,126,228,1,0,1,2,21,1,99,0,0,0,14,153,3,0,8,0,0,0,3,0,0,0,25,216,66,129,1,144,194,127,2,144,66,129,35,80,2,128,36,208,1,128,33,144,1,128,30,16,2,128,34,152,2,128, 
  4,17,1,135,217,1,0,1,4,17,1,45,229,1,0,1,4,17,1,186,212,1,0,1,4,17,1,38,208,1,0,1,8,4,17,1,101,225,1,0,1,4,17,1,49,221,1,0,1,19,34,0,0,0,88,0,0,0,3,0, 
  14,1,21,1,51,0,0,0,72,152,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,215,91,0,0,1,10,6,17,1,27,202,1,0,1,19,117,0,0,0,98,1, 
  0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89, 
  152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127, 
  40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,145,231,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,145,231,1,0,1,4,15,1,145,231,1,0,17,1,133, 
  214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,145,231,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,145,231,1,0,1,4,15,1,145,231,1,0,17,1,149,223,1,0,1,4,15,1,145, 
  231,1,0,17,1,182,205,1,0,1,4,15,1,145,231,1,0,17,1,125,205,1,0,1,4,15,1,145,231,1,0,17,1,68,205,1,0,1,4,15,1,145,231,1,0,17,1,11,205,1,0,1,4,15,1,145,231,1,0,17, 
  1,210,204,1,0,1,4,15,1,145,231,1,0,17,1,88,231,1,0,1,4,15,1,145,231,1,0,17,1,31,231,1,0,1,4,15,1,145,231,1,0,17,1,121,219,1,0,1,4,15,1,145,231,1,0,17,1,87,215,1, 
  0,1,4,15,1,145,231,1,0,17,1,181,203,1,0,1,4,15,1,145,231,1,0,17,1,124,203,1,0,1,4,15,1,145,231,1,0,17,1,153,199,1,0,1,4,15,1,145,231,1,0,17,1,30,215,1,0,1,4,15, 
  1,145,231,1,0,17,1,229,214,1,0,1,4,15,1,145,231,1,0,17,1,152,202,1,0,1,4,15,1,145,231,1,0,17,1,206,174,0,0,1,4,15,1,145,231,1,0,17,1,57,146,0,0,1,4,15,1,145,231,1, 
  0,17,1,181,195,1,0,1,4,15,1,145,231,1,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,56,211,0, 
  0,17,1,226,205,0,0,1,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,130,151,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,171,211,0,0,17,1, 
  226,205,0,0,1,19,86,0,0,0,239,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86, 
  216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,145,231,1,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,145,231, 
  1,0,1,15,1,145,231,1,0,17,1,238,228,1,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,177,0,0, 
  0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,145, 
  231,1,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,145,231,1,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,145,231,1,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,145,231,1,0,1,15,1, 
  145,231,1,0,17,1,184,232,1,0,1,2,21,1,39,0,0,0,14,153,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,36,240,0,128,4,17,1,45,229,1,0,1,8,19,34,0,0,0,92,0,0,0, 
  3,0,14,1,21,1,51,0,0,0,72,152,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,215,91,0,0,1,10,6,17,1,27,202,1,0,1,19,117,0,0,0, 
  98,1,0,0,1,0,1,21,1,69,0,0,0,116,142,3,0,5,0,0,0,2,0,0,0,120,224,1,128,1,32,2,128,2,32,130,128,123,160,1,128,10,48,1,128,4,15,1,6,234,1,0,17,1,18,186,1,0,1,4, 
  17,1,193,233,1,0,1,4,17,1,124,233,1,0,1,8,19,113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,34,146,3,0,4,0,0,0,2,0,0,0,10,16,1,128,1,192,1,128,2,192,129,127,123,128, 
  1,128,4,15,1,118,185,1,0,17,1,138,184,1,0,1,4,17,1,217,185,1,0,1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,57,0,0,0,110,143,3,0,4,0,0,0,2,0,0,0,120,128,1,128,1, 
  192,1,128,2,192,65,128,10,16,1,128,4,15,1,169,183,1,0,17,1,107,27,0,0,1,4,17,1,12,184,1,0,1,8,19,113,0,0,0,83,1,0,0,2,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,134,208,0,128,113,56,1,128,15,1,6,234,1,0,17,1,47,234,1,0,1,1,2,21,1,51,0,0,0,245,147,3,0,4,0,0,0,2,0,0,0,120,80,1,128,1,144,1,128,2,144,1,128,123,16,1, 
  128,4,17,1,103,187,1,0,1,4,17,1,161,187,1,0,1,8,19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,80,0,0,0,228,148,3,0,6,0,0,0,2,0,0,0,136,64,2,128,1,80,129,128,2,80,1, 
  128,25,0,66,128,33,88,65,128,137,192,1,128,10,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,89,21,0,0,1,6,17,1,203,234,1,0,1,4,17,1,172,22,0,0,1,19,131,0,0,0,124,1,0,0, 
  1,0,1,21,1,44,0,0,0,234,149,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,21,248,0,128,10,12,19,131,0,0,0,124,1,0,0,1,0,1,12,17,1,107,188,1,0,1,21,1,39,0,0, 
  0,54,139,3,0,3,0,0,0,1,0,0,0,2,240,128,128,1,240,0,128,140,248,0,128,8,4,17,1,42,17,0,0,1,19,140,0,0,0,144,1,0,0,1,0,1,21,1,212,0,0,0,114,140,3,0,13,0,0,0, 
  3,0,0,0,112,184,4,128,1,200,2,129,2,200,130,129,31,72,196,129,76,104,3,128,41,216,131,129,6,200,194,128,7,200,2,127,82,48,6,128,110,40,5,128,127,208,130,128,129,152,5,128,135,48,2,128,4,19,130,0, 
  0,0,115,1,0,0,1,0,17,1,95,237,1,0,1,10,4,19,115,0,0,0,96,1,0,0,1,0,17,1,95,237,1,0,1,4,15,1,95,237,1,0,17,1,40,12,0,0,1,6,15,1,95,237,1,0,17,1,18,236, 
  1,0,1,4,15,1,95,237,1,0,17,1,116,10,0,0,1,4,15,1,95,237,1,0,17,1,185,242,0,0,1,4,15,1,95,237,1,0,17,1,143,176,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,95, 
  237,1,0,1,4,15,1,95,237,1,0,17,1,222,175,1,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,1,76,1,0,0,86,141,3,0,29,0,0,0,4,0,0,0,112,176,4,128,1,240,196,131,2,240,4,132, 
  3,248,8,128,4,248,8,128,22,120,7,128,6,240,196,127,7,240,132,132,24,184,72,131,25,184,5,130,10,56,5,128,27,120,198,130,76,248,6,132,45,248,5,128,110,184,7,128,31,56,7,129,33,32,10,130,41,160,137,130, 
  66,96,137,128,79,120,5,129,82,120,8,128,120,184,70,129,123,48,4,128,127,224,9,128,129,248,7,128,135,56,8,128,136,112,4,128,137,56,6,128,140,248,4,128,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1, 
  12,17,1,253,180,1,0,1,10,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1, 
  253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0, 
  1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,19,78,0,0,0,219,0,0,0,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1, 
  0,1,2,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,192,8,129,113,40,5,128,114,200,68,130,115,40,73,131,77,48,132,128,37,96,3,128,109,136,201,130,110,208,2,128,111,160,7,128,121,24,6, 
  128,74,56,4,128,130,136,5,128,140,200,3,128,13,168,198,124,78,48,68,126,79,48,72,126,131,56,7,128,141,24,10,128,19,74,0,0,0,207,0,0,0,1,0,17,1,95,237,1,0,1,15,1,95,237,1,0,17,1,224, 
  182,1,0,1,15,1,95,237,1,0,17,1,219,187,1,0,1,1,19,140,0,0,0,146,1,0,0,1,0,17,1,95,237,1,0,1,19,77,0,0,0,216,0,0,0,2,0,1,19,77,0,0,0,215,0,0,0,2,0,1, 
  19,109,0,0,0,57,1,0,0,1,0,17,1,95,237,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,95,237,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,95,237,1,0,1,15,1,95,237,1,0, 
  17,1,19,183,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,95,237,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,95,237,1,0,1,15,1,95,237,1,0,17,1,157,178,1,0,1,19,78,0,0, 
  0,217,0,0,0,2,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,95,237,1,0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,95,237,1,0,1,2,21,1,53,0,0,0,239,150,3,0,5,0,0,0,2, 
  0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,45,56,1,128,8,4,15,1,63,239,0,0,17,1,65,190,1,0,1,19,75,0,0,0,210,0,0,0,1,0,1,21,1,69,0,0,0,116,142,3,0, 
  5,0,0,0,2,0,0,0,120,48,1,128,1,224,1,128,2,224,129,128,123,232,1,128,10,112,1,128,4,17,1,245,239,1,0,1,4,15,1,140,239,1,0,17,1,18,186,1,0,1,8,4,17,1,71,239,1,0,1,19, 
  113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,110,143,3,0,4,0,0,0,2,0,0,0,120,128,1,128,1,192,1,128,2,192,65,128,10,16,1,128,4,15,1,169,183,1,0,17,1,107,27,0,0,1,4, 
  17,1,12,184,1,0,1,8,19,113,0,0,0,83,1,0,0,2,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,140,239,1,0,17,1,181,239,1,0,1,1, 
  2,21,1,51,0,0,0,245,147,3,0,4,0,0,0,2,0,0,0,120,88,1,128,1,80,1,128,2,80,1,128,123,16,1,128,4,17,1,103,187,1,0,1,8,4,17,1,161,187,1,0,1,19,113,0,0,0,80,1,0, 
  0,2,0,14,1,21,1,57,0,0,0,34,146,3,0,4,0,0,0,2,0,0,0,10,80,1,128,1,192,1,128,2,192,129,127,123,16,1,128,4,17,1,217,185,1,0,1,4,15,1,118,185,1,0,17,1,138,184,1,0, 
  1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,80,0,0,0,228,148,3,0,6,0,0,0,2,0,0,0,136,192,1,128,1,80,129,128,2,80,1,128,25,64,66,128,33,88,65,128,137,0,2,128,10,4,19,131, 
  0,0,0,117,1,0,0,2,0,1,4,17,1,172,22,0,0,1,4,17,1,89,21,0,0,1,6,17,1,203,234,1,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,58,0,0,0,110,15,3,0,5,0,0,0, 
  2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,209,240,1,0,1,2,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,28,128,1,128,13,136,65,128,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,209,240,1,0,1,1,15,1,209,240,1,0,17,1,16,241,1,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0, 
  0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,64,241,1,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48, 
  2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17, 
  1,26,242,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,26,242,1,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,26,242,1,0,1,4,15,1,26,242,1,0,17,1,185,242,0,0,1,4,15, 
  1,26,242,1,0,17,1,251,171,1,0,1,4,15,1,26,242,1,0,17,1,108,169,1,0,1,4,15,1,26,242,1,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,26,242,1,0,1,4, 
  15,1,26,242,1,0,17,1,122,3,0,0,1,2,21,0,189,1,0,0,255,255,255,255,22,0,0,0,4,0,0,0,60,24,12,133,113,240,6,128,114,96,6,132,115,208,5,132,61,176,203,128,37,232,12,128,75,144,10,128, 
  77,40,74,128,109,160,72,131,121,64,5,128,74,32,11,128,59,128,204,126,28,80,13,125,13,88,205,125,78,192,137,128,79,48,137,128,110,16,8,128,111,128,7,128,130,176,4,128,131,72,4,128,140,224,3,128,141,80,3,128, 
  19,140,0,0,0,145,1,0,0,1,0,17,1,26,242,1,0,1,15,1,26,242,1,0,17,1,90,248,1,0,1,15,1,26,242,1,0,17,1,91,247,1,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,26,242,1, 
  0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,26,242,1,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,26,242,1,0,1,19,77,0,0,0,214,0,0,0,1,0,17,1,26,242,1,0,1,19,77,0,0, 
  0,213,0,0,0,1,0,17,1,26,242,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,26,242,1,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,26,242,1,0,1,19,74,0,0,0,206,0,0,0,1, 
  0,17,1,26,242,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,26,242,1,0,1,15,1,26,242,1,0,17,1,0,190,1,0,1,15,1,26,242,1,0,17,1,216,243,1,0,1,19,60,0,0,0,163,0,0, 
  0,1,0,17,1,26,242,1,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,26,242,1,0,1,15,1,26,242,1,0,17,1,255,234,1,0,1,15,1,26,242,1,0,17,1,201,174,1,0,1,19,28,0,0,0,80, 
  0,0,0,4,0,14,1,15,1,26,242,1,0,17,1,224,182,1,0,1,1,19,61,0,0,0,166,0,0,0,1,0,17,1,26,242,1,0,1,2,21,1,212,0,0,0,114,140,3,0,13,0,0,0,3,0,0,0,112,48, 
  2,128,1,16,3,129,2,16,131,129,31,160,194,129,76,32,4,128,41,48,134,129,6,16,195,128,7,16,3,127,82,176,3,128,110,192,5,128,127,24,131,128,129,144,4,128,135,40,5,128,4,15,1,5,246,1,0,17,1,185, 
  242,0,0,1,4,15,1,5,246,1,0,17,1,116,10,0,0,1,10,4,19,115,0,0,0,96,1,0,0,1,0,17,1,5,246,1,0,1,4,15,1,5,246,1,0,17,1,222,175,1,0,1,4,15,1,5,246,1,0,17, 
  1,40,12,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,5,246,1,0,1,4,19,130,0,0,0,115,1,0,0,1,0,17,1,5,246,1,0,1,4,15,1,5,246,1,0,17,1,143,176,1,0,1,6,15, 
  1,5,246,1,0,17,1,184,244,1,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,1,76,1,0,0,86,141,3,0,29,0,0,0,4,0,0,0,112,184,6,128,1,48,196,131,2,48,4,132,3,56,9,128,4,56, 
  9,128,22,120,5,128,6,48,196,127,7,48,132,132,24,184,72,131,25,120,4,130,10,56,4,128,27,248,200,130,76,56,5,132,45,248,6,128,110,56,6,128,31,248,7,129,33,160,9,130,41,120,134,130,66,32,138,128,79,184, 
  5,129,82,120,7,128,120,184,71,129,123,56,7,128,127,248,5,128,129,184,4,128,135,120,8,128,136,56,8,128,137,224,9,128,140,248,4,128,10,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180, 
  1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12, 
  17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180, 
  1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,19,78,0,0,0,219,0,0,0,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,2,21,0,85, 
  1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,32,9,129,113,96,3,128,114,32,68,130,115,192,67,131,77,128,132,128,37,56,6,128,109,24,202,130,110,144,8,128,111,136,9,128,121,24,5,128,74,136,4,128,130, 
  208,2,128,140,192,7,128,13,160,198,124,78,128,68,126,79,48,71,126,131,40,8,128,141,168,5,128,19,109,0,0,0,57,1,0,0,1,0,17,1,5,246,1,0,1,19,77,0,0,0,215,0,0,0,2,0,1,19,78,0, 
  0,0,217,0,0,0,2,0,1,19,77,0,0,0,216,0,0,0,2,0,1,1,19,140,0,0,0,146,1,0,0,1,0,17,1,5,246,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,5,246,1,0,1,19,140, 
  0,0,0,145,1,0,0,1,0,17,1,5,246,1,0,1,15,1,5,246,1,0,17,1,224,182,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,5,246,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1, 
  5,246,1,0,1,15,1,5,246,1,0,17,1,219,187,1,0,1,15,1,5,246,1,0,17,1,19,183,1,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,5,246,1,0,1,15,1,5,246,1,0,17,1,157,178,1, 
  0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,5,246,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,5,246,1,0,1,2,21,1,69,0,0,0,116,142,3,0,5,0,0,0,2,0,0,0,120,160,1, 
  128,1,32,2,128,2,32,130,128,123,224,1,128,10,48,1,128,4,15,1,241,247,1,0,17,1,18,186,1,0,1,4,17,1,172,247,1,0,1,4,17,1,100,183,1,0,1,8,19,113,0,0,0,92,1,0,0,1,0,1, 
  21,1,57,0,0,0,34,146,3,0,4,0,0,0,2,0,0,0,10,16,1,128,1,192,1,128,2,192,129,127,123,128,1,128,4,15,1,118,185,1,0,17,1,138,184,1,0,1,4,17,1,217,185,1,0,1,8,19,113,0, 
  0,0,82,1,0,0,2,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,241,247,1,0,17,1,26,248,1,0,1,1,2,21,1,51,0,0,0,245,147,3,0, 
  4,0,0,0,2,0,0,0,120,16,1,128,1,144,1,128,2,144,1,128,123,80,1,128,4,17,1,161,187,1,0,1,4,17,1,103,187,1,0,1,8,19,113,0,0,0,80,1,0,0,2,0,14,1,21,1,80,0,0,0, 
  228,148,3,0,6,0,0,0,2,0,0,0,136,0,2,128,1,144,129,128,2,144,1,128,25,64,66,128,33,152,65,128,137,80,1,128,4,17,1,89,21,0,0,1,10,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17, 
  1,172,22,0,0,1,6,17,1,182,248,1,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,44,0,0,0,234,149,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,21,248,0,128,10,12,19,131, 
  0,0,0,124,1,0,0,1,0,1,12,17,1,107,188,1,0,1,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1, 
  26,249,1,0,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1, 
  0,17,1,103,249,1,0,1,4,15,1,103,249,1,0,17,1,122,3,0,0,1,2,21,0,101,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,29,144,130,128,13,152,194,127,37,40,130,128,79,48,1,128,61,192,1, 
  128,19,61,0,0,0,167,0,0,0,1,0,17,1,103,249,1,0,1,15,1,103,249,1,0,17,1,0,250,1,0,1,15,1,103,249,1,0,17,1,205,249,1,0,1,1,19,61,0,0,0,166,0,0,0,1,0,17,1,103, 
  249,1,0,1,2,21,1,39,0,0,0,201,153,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,47,0, 
  0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,48,250,1,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0, 
  0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0, 
  0,115,1,0,0,1,0,17,1,10,251,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,10,251,1,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,10,251,1,0,1,4,15,1,10,251,1,0,17, 
  1,185,242,0,0,1,4,15,1,10,251,1,0,17,1,251,171,1,0,1,4,15,1,10,251,1,0,17,1,108,169,1,0,1,4,15,1,10,251,1,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0, 
  17,1,10,251,1,0,1,4,15,1,10,251,1,0,17,1,122,3,0,0,1,2,21,0,189,1,0,0,255,255,255,255,22,0,0,0,4,0,0,0,29,80,13,129,113,240,6,128,114,96,6,132,115,208,5,132,61,176,203,128, 
  37,232,12,128,75,144,10,128,77,40,74,128,109,160,72,131,121,64,5,128,74,32,11,128,59,128,204,126,60,24,12,130,13,88,205,124,78,192,137,128,79,48,137,128,110,16,8,128,111,128,7,128,130,176,4,128,131,72,4,128, 
  140,224,3,128,141,80,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,10,251,1,0,1,15,1,10,251,1,0,17,1,131,1,2,0,1,15,1,10,251,1,0,17,1,75,0,2,0,1,19,109,0,0,0,57,1,0, 
  0,1,0,17,1,10,251,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,10,251,1,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,10,251,1,0,1,19,77,0,0,0,214,0,0,0,1,0,17,1,10, 
  251,1,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,10,251,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,10,251,1,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,10,251,1,0,1,19,74, 
  0,0,0,206,0,0,0,1,0,17,1,10,251,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,10,251,1,0,1,15,1,10,251,1,0,17,1,0,190,1,0,1,15,1,10,251,1,0,17,1,200,252,1,0,1, 
  19,60,0,0,0,163,0,0,0,1,0,17,1,10,251,1,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,10,251,1,0,1,15,1,10,251,1,0,17,1,157,178,1,0,1,15,1,10,251,1,0,17,1,201,174,1, 
  0,1,19,29,0,0,0,81,0,0,0,5,0,14,1,15,1,10,251,1,0,17,1,224,182,1,0,1,1,19,61,0,0,0,166,0,0,0,1,0,17,1,10,251,1,0,1,2,21,1,212,0,0,0,114,140,3,0,13,0, 
  0,0,3,0,0,0,112,72,4,128,1,200,2,129,2,200,130,129,31,48,198,129,76,80,5,128,41,104,131,129,6,200,194,128,7,200,2,127,82,192,5,128,110,216,3,128,127,48,130,128,129,208,2,128,135,184,4,128,4,19, 
  115,0,0,0,96,1,0,0,1,0,17,1,245,254,1,0,1,10,4,19,121,0,0,0,104,1,0,0,1,0,17,1,245,254,1,0,1,6,15,1,245,254,1,0,17,1,168,253,1,0,1,4,15,1,245,254,1,0,17,1, 
  143,176,1,0,1,4,15,1,245,254,1,0,17,1,185,242,0,0,1,4,19,130,0,0,0,115,1,0,0,1,0,17,1,245,254,1,0,1,4,15,1,245,254,1,0,17,1,40,12,0,0,1,4,15,1,245,254,1,0,17, 
  1,222,175,1,0,1,4,15,1,245,254,1,0,17,1,116,10,0,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,1,76,1,0,0,86,141,3,0,29,0,0,0,4,0,0,0,112,48,5,128,1,112,197,131,2,112, 
  5,132,3,56,9,128,4,56,9,128,22,160,9,128,6,112,197,127,7,112,133,132,24,120,70,131,25,248,7,130,10,184,7,128,27,112,196,130,76,224,9,132,45,120,5,128,110,184,6,128,31,248,5,129,33,32,10,130,41,248, 
  136,130,66,120,135,128,79,184,5,129,82,56,7,128,120,176,68,129,123,184,8,128,127,56,6,128,129,248,6,128,135,120,8,128,136,56,8,128,137,240,4,128,140,48,4,128,12,17,1,253,180,1,0,1,12,17,1,253,180,1, 
  0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,10,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12, 
  17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180, 
  1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,19,78,0,0,0,219,0,0,0,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253, 
  180,1,0,1,2,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,208,6,129,113,96,3,128,114,152,72,130,115,56,72,131,77,56,135,128,37,192,3,128,109,248,200,130,110,64,7,128,111,136,9,128,121, 
  24,10,128,74,72,5,128,130,208,2,128,140,216,5,128,13,40,196,124,78,56,71,126,79,184,68,126,131,208,7,128,141,64,6,128,19,109,0,0,0,57,1,0,0,1,0,17,1,245,254,1,0,1,19,77,0,0,0,215,0, 
  0,0,2,0,1,15,1,245,254,1,0,17,1,224,182,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,245,254,1,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,245,254,1,0,1,19,140,0,0,0,146, 
  1,0,0,1,0,17,1,245,254,1,0,1,15,1,245,254,1,0,17,1,219,187,1,0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,245,254,1,0,1,15,1,245,254,1,0,17,1,157,178,1,0,1,1,19,74,0, 
  0,0,207,0,0,0,1,0,17,1,245,254,1,0,1,15,1,245,254,1,0,17,1,19,183,1,0,1,19,78,0,0,0,217,0,0,0,2,0,1,19,77,0,0,0,216,0,0,0,2,0,1,19,74,0,0,0,206,0,0, 
  0,1,0,17,1,245,254,1,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,245,254,1,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,245,254,1,0,1,2,21,1,69,0,0,0,116,142,3,0,5,0,0, 
  0,2,0,0,0,120,224,1,128,1,32,2,128,2,32,130,128,123,160,1,128,10,48,1,128,4,15,1,26,1,2,0,17,1,18,186,1,0,1,4,17,1,100,183,1,0,1,4,17,1,156,0,2,0,1,8,19,113,0,0, 
  0,92,1,0,0,1,0,1,21,1,57,0,0,0,34,146,3,0,4,0,0,0,2,0,0,0,10,80,1,128,1,192,1,128,2,192,129,127,123,16,1,128,4,17,1,225,0,2,0,1,4,15,1,118,185,1,0,17,1,138, 
  184,1,0,1,8,19,113,0,0,0,82,1,0,0,2,0,1,21,1,45,0,0,0,63,145,3,0,3,0,0,0,1,0,0,0,2,96,129,128,1,96,1,128,10,240,0,128,4,15,1,39,32,0,0,17,1,18,186,1,0, 
  1,8,19,113,0,0,0,87,1,0,0,3,0,1,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,134,208,0,128,113,56,1,128,15,1,26,1,2,0,17,1,67,1,2,0,1,1,2,21,1,51,0,0, 
  0,245,147,3,0,4,0,0,0,2,0,0,0,120,88,1,128,1,16,1,128,2,16,1,128,123,24,1,128,8,4,17,1,103,187,1,0,1,4,17,1,161,187,1,0,1,19,113,0,0,0,80,1,0,0,2,0,14,1,21, 
  1,80,0,0,0,228,148,3,0,6,0,0,0,2,0,0,0,136,0,2,128,1,80,129,128,2,80,1,128,25,88,65,128,33,152,65,128,137,64,2,128,10,6,17,1,203,234,1,0,1,4,19,131,0,0,0,117,1,0,0, 
  2,0,1,4,17,1,172,22,0,0,1,4,17,1,89,21,0,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,76,0,0,0,29,154,3,0,6,0,0,0,2,0,0,0,40,240,1,128,1,80,1,129,2,80,129, 
  128,7,80,1,128,6,80,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,44,2,2,0,1,4,15,1,44,2,2,0,17,1,229,17,0,0,1,2,21,0,96,0,0,0,255,255,255,255,5,0, 
  0,0,2,0,0,0,36,40,2,128,37,192,1,128,30,248,130,128,31,144,2,128,62,48,1,128,19,31,0,0,0,83,0,0,0,1,0,17,1,44,2,2,0,1,15,1,44,2,2,0,17,1,187,11,2,0,1,15,1,44, 
  2,2,0,17,1,86,11,2,0,1,15,1,44,2,2,0,17,1,141,2,2,0,1,1,2,21,1,59,0,0,0,142,154,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,193,128,2,80,129,127,7,80,1,128,9, 
  152,65,128,21,88,1,128,8,4,17,1,158,3,2,0,1,4,17,1,201,2,2,0,1,2,21,1,88,0,0,0,29,154,3,0,6,0,0,0,2,0,0,0,40,32,2,128,1,80,1,129,2,80,129,128,7,80,1,128,6, 
  80,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,15,1,146,3,2,0,17,1,34,3,2,0,1,4,15,1,146,3,2,0,15,1,86,11,2,0,17,1,96,2,1,0,1,2,21,1,47,0,0,0, 
  237,154,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,1,128,2,112,129,127,7,112,65,128,39,48,1,128,4,17,1,93,3,2,0,1,8,19,62,0,0,0,169,0,0,0,1,0,1,21,1,52,0,0,0,87, 
  155,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,67,56,1,128,8,4,19,62,0,0,0,168,0,0,0,3,0,1,2,19,31,0,0,0,84,0,0,0,3,0,1,21,1, 
  58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,217,3,2,0,1,2,21,0,62, 
  0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,30,128,1,128,13,136,65,128,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,217,3,2,0,1,1,15,1,217,3,2,0,17,1,24,4,2,0,1,2, 
  21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,72,4,2,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0, 
  0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4, 
  19,130,0,0,0,115,1,0,0,1,0,17,1,34,5,2,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,34,5,2,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,34,5,2,0,1,4,15,1,34, 
  5,2,0,17,1,185,242,0,0,1,4,15,1,34,5,2,0,17,1,251,171,1,0,1,4,15,1,34,5,2,0,17,1,108,169,1,0,1,4,15,1,34,5,2,0,17,1,46,5,0,0,1,4,19,37,0,0,0,101,0, 
  0,0,1,0,17,1,34,5,2,0,1,4,15,1,34,5,2,0,17,1,122,3,0,0,1,2,21,0,190,1,0,0,255,255,255,255,22,0,0,0,4,0,0,0,61,176,139,129,113,240,6,128,114,96,6,132,115,208,5,132, 
  75,144,10,128,37,240,12,128,77,40,138,128,78,192,73,130,109,160,72,131,121,64,5,128,74,32,11,128,59,128,76,126,60,24,12,130,13,96,205,124,30,88,77,126,79,48,137,128,110,16,8,128,111,128,7,128,130,176,4,128, 
  131,72,4,128,140,224,3,128,141,80,3,128,19,140,0,0,0,145,1,0,0,1,0,17,1,34,5,2,0,1,15,1,34,5,2,0,17,1,250,10,2,0,1,15,1,34,5,2,0,17,1,100,10,2,0,1,19,109,0,0, 
  0,57,1,0,0,1,0,17,1,34,5,2,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,34,5,2,0,1,19,78,0,0,0,218,0,0,0,1,0,17,1,34,5,2,0,1,19,77,0,0,0,214,0,0,0,1, 
  0,17,1,34,5,2,0,1,19,77,0,0,0,213,0,0,0,1,0,17,1,34,5,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,34,5,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,34,5,2, 
  0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,34,5,2,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,34,5,2,0,1,15,1,34,5,2,0,17,1,0,190,1,0,1,15,1,34,5,2,0,17,1,225, 
  6,2,0,1,19,60,0,0,0,163,0,0,0,1,0,17,1,34,5,2,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,34,5,2,0,1,15,1,34,5,2,0,17,1,157,178,1,0,1,15,1,34,5,2,0,17, 
  1,201,174,1,0,1,19,30,0,0,0,82,0,0,0,6,0,14,14,1,15,1,34,5,2,0,17,1,106,178,1,0,1,1,19,61,0,0,0,166,0,0,0,1,0,17,1,34,5,2,0,1,2,21,1,212,0,0,0,114, 
  140,3,0,13,0,0,0,3,0,0,0,112,168,2,128,1,160,2,129,2,160,130,129,31,184,196,129,76,192,5,128,41,48,130,129,6,160,194,128,7,160,2,127,82,48,6,128,110,72,4,128,127,176,131,128,129,24,3,128,135, 
  40,5,128,6,15,1,14,9,2,0,17,1,193,7,2,0,1,10,4,15,1,14,9,2,0,17,1,185,242,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,14,9,2,0,1,4,19,115,0,0,0,96,1,0, 
  0,1,0,17,1,14,9,2,0,1,4,15,1,14,9,2,0,17,1,143,176,1,0,1,4,15,1,14,9,2,0,17,1,116,10,0,0,1,4,19,130,0,0,0,115,1,0,0,1,0,17,1,14,9,2,0,1,4,15,1, 
  14,9,2,0,17,1,40,12,0,0,1,4,15,1,14,9,2,0,17,1,222,175,1,0,1,19,78,0,0,0,219,0,0,0,1,0,1,21,1,76,1,0,0,86,141,3,0,29,0,0,0,4,0,0,0,112,48,6,128,1, 
  112,198,131,2,112,6,132,3,184,8,128,4,184,8,128,22,240,5,128,6,112,198,127,7,112,134,132,24,248,70,131,25,176,5,130,10,48,4,128,27,120,199,130,76,224,9,132,45,248,7,128,110,32,10,128,31,184,6,129,33, 
  48,5,130,41,112,132,130,66,56,136,128,79,120,8,129,82,184,7,128,120,56,71,129,123,96,9,128,127,176,4,128,129,112,5,128,135,240,4,128,136,160,9,128,137,120,6,128,140,32,9,128,12,17,1,253,180,1,0,1,12, 
  17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180, 
  1,0,1,10,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1, 
  12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,19,78,0,0,0,219,0,0,0,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0,1,12,17,1,253,180,1,0, 
  1,12,17,1,253,180,1,0,1,2,21,0,85,1,0,0,255,255,255,255,18,0,0,0,4,0,0,0,61,72,5,129,113,64,6,128,114,88,68,130,115,96,67,131,77,80,132,128,37,160,6,128,109,112,199,130,110,0,8,128, 
  111,184,4,128,121,144,8,128,74,24,10,128,130,192,3,128,140,8,7,128,13,176,197,124,78,80,68,126,79,208,66,126,131,176,9,128,141,32,9,128,19,61,0,0,0,167,0,0,0,1,0,17,1,14,9,2,0,1,19,78, 
  0,0,0,217,0,0,0,2,0,1,19,109,0,0,0,57,1,0,0,1,0,17,1,14,9,2,0,1,1,19,77,0,0,0,216,0,0,0,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,14,9,2,0,1,15, 
  1,14,9,2,0,17,1,157,178,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,14,9,2,0,1,19,77,0,0,0,215,0,0,0,2,0,1,15,1,14,9,2,0,17,1,224,182,1,0,1,15,1,14,9,2, 
  0,17,1,219,187,1,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,14,9,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,14,9,2,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,14,9,2, 
  0,1,19,140,0,0,0,145,1,0,0,1,0,17,1,14,9,2,0,1,15,1,14,9,2,0,17,1,19,183,1,0,1,19,140,0,0,0,146,1,0,0,1,0,17,1,14,9,2,0,1,2,21,1,69,0,0,0,116,142, 
  3,0,5,0,0,0,2,0,0,0,120,48,1,128,1,224,1,128,2,224,129,128,123,232,1,128,10,112,1,128,4,17,1,245,239,1,0,1,4,15,1,140,239,1,0,17,1,18,186,1,0,1,8,4,17,1,181,10,2,0, 
  1,19,113,0,0,0,92,1,0,0,1,0,1,21,1,57,0,0,0,110,143,3,0,4,0,0,0,2,0,0,0,120,136,1,128,1,128,1,128,2,128,65,128,10,16,1,128,4,15,1,169,183,1,0,17,1,107,27,0,0, 
  1,8,4,17,1,12,184,1,0,1,19,113,0,0,0,83,1,0,0,2,0,1,21,1,80,0,0,0,228,148,3,0,6,0,0,0,2,0,0,0,136,64,2,128,1,80,129,128,2,80,1,128,25,152,65,128,33,216,65,128, 
  137,88,1,128,10,4,17,1,89,21,0,0,1,6,17,1,203,234,1,0,1,4,19,131,0,0,0,117,1,0,0,2,0,1,4,17,1,172,22,0,0,1,19,131,0,0,0,124,1,0,0,1,0,1,21,1,47,0,0,0, 
  250,112,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,39,56,1,128,8,4,17,1,134,11,2,0,1,2,21,1,52,0,0,0,233,155,3,0,5,0,0,0,2,0,0,0, 
  68,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,62,0,0,0,170,0,0,0,3,0,1,2,21,1,47,0,0,0,237,154,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,1, 
  128,2,112,129,127,7,112,65,128,39,48,1,128,4,17,1,93,3,2,0,1,8,19,62,0,0,0,169,0,0,0,1,0,1,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129, 
  2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,67,12,2,0,1,4,15,1,67,12,2,0,17,1,122,3,0,0,1,2,21,0,101,0,0,0,255,255,255, 
  255,5,0,0,0,2,0,0,0,37,48,130,128,13,152,194,127,49,40,130,128,79,48,1,128,61,192,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,67,12,2,0,1,15,1,67,12,2,0,17,1,220,12,2,0,1, 
  1,15,1,67,12,2,0,17,1,169,12,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,67,12,2,0,1,2,21,1,39,0,0,0,123,156,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79, 
  240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,59,0,0,0,92,157,3,0,6,0,0,0,2,0,0,0,60,80,1,128,1,208,1,129,2,208,129,128,7,208,1,128,6,208, 
  1,128,61,144,1,128,4,17,1,136,13,2,0,1,4,17,1,36,13,2,0,1,8,19,49,0,0,0,139,0,0,0,2,0,14,1,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48, 
  193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,95,13,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,49,208,0,128,37,216,192, 
  127,1,19,49,0,0,0,138,0,0,0,4,0,14,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0, 
  0,101,0,0,0,1,0,17,1,195,13,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,49,208,0,128,37,216,192,127,1,19,49,0,0,0,137,0,0,0,4,0,14,1,2,21,1,104,0, 
  0,0,32,158,3,0,7,0,0,0,2,0,0,0,6,112,65,129,1,112,193,128,2,112,129,127,7,112,193,128,17,168,2,128,18,16,2,128,19,120,1,128,8,4,19,54,0,0,0,150,0,0,0,1,0,17,1,85,14,2, 
  0,1,4,19,54,0,0,0,151,0,0,0,1,0,17,1,85,14,2,0,1,4,19,54,0,0,0,149,0,0,0,1,0,17,1,85,14,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,52, 
  56,65,128,54,208,0,128,15,1,85,14,2,0,17,1,126,14,2,0,1,1,2,21,1,94,0,0,0,32,158,3,0,7,0,0,0,2,0,0,0,6,112,65,129,1,176,194,128,2,112,129,127,7,112,193,128,17,72,2,128, 
  18,224,1,128,19,120,1,128,8,4,19,54,0,0,0,153,0,0,0,2,0,1,4,19,54,0,0,0,154,0,0,0,2,0,1,4,19,54,0,0,0,152,0,0,0,2,0,1,4,17,1,221,14,2,0,1,2,21,1,59, 
  0,0,0,207,158,3,0,6,0,0,0,2,0,0,0,60,152,1,128,1,80,1,129,2,80,129,128,7,80,1,128,6,80,1,128,61,88,1,128,8,4,17,1,125,15,2,0,1,4,17,1,25,15,2,0,1,2,21,1,58, 
  0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,84,15,2,0,1,2,21,0,40,0, 
  0,0,255,255,255,255,2,0,0,0,1,0,0,0,52,208,0,128,37,216,0,128,1,19,52,0,0,0,144,0,0,0,5,0,14,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,184,15,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,52,208,0,128,37,216, 
  0,128,1,19,52,0,0,0,145,0,0,0,5,0,14,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0, 
  0,0,101,0,0,0,1,0,17,1,28,16,2,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,56,208,0,128,37,216,0,128,1,19,56,0,0,0,157,0,0,0,2,0,1,2,21,1,47,0, 
  0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,116,16,2,0,1,2,21,1,152,0,0,0,108,159,3,0,10,0,0,0,3,0, 
  0,0,112,8,3,128,1,208,193,129,2,208,1,128,11,88,4,128,76,232,3,128,110,120,3,128,6,208,193,127,7,208,129,128,129,112,2,128,135,216,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,234,17,2, 
  0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,234,17,2,0,1,4,15,1,234,17,2,0,17,1,185,242,0,0,1,4,15,1,234,17,2,0,17,1,13,17,2,0,1,4,15,1,234,17,2,0,17,1,46,5, 
  0,0,1,4,19,57,0,0,0,159,0,0,0,3,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0, 
  0,0,1,0,17,1,82,17,2,0,1,4,15,1,82,17,2,0,17,1,122,3,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128, 
  61,200,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,82,17,2,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,82,17,2,0,17,1,183,17,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17, 
  1,82,17,2,0,1,2,21,1,39,0,0,0,240,159,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,79,248,0,128,8,4,17,1,206,8,0,0,1,19,13,0,0,0,34,0,0,0,1,0,1,21,0, 
  172,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0,74,96,4,129,57,88,133,128,58,240,132,127,121,32,2,128,130,144,1,128,109,208,3,128,110,64,3,128,111,176,2,128,19,109,0,0,0,57,1,0,0,1,0,17, 
  1,234,17,2,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,234,17,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,234,17,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,234,17,2,0,1, 
  19,74,0,0,0,206,0,0,0,1,0,17,1,234,17,2,0,1,19,58,0,0,0,160,0,0,0,1,0,17,1,234,17,2,0,1,15,1,234,17,2,0,17,1,151,18,2,0,1,1,2,21,1,153,0,0,0,108,159,3, 
  0,10,0,0,0,3,0,0,0,112,8,3,128,1,208,193,129,2,208,1,128,11,88,4,128,76,232,3,128,110,120,3,128,6,208,193,127,7,208,129,128,129,112,2,128,135,216,1,128,8,4,19,130,0,0,0,115,1,0,0, 
  1,0,17,1,118,19,2,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,118,19,2,0,1,4,15,1,118,19,2,0,17,1,185,242,0,0,1,4,15,1,118,19,2,0,17,1,49,19,2,0,1,4,15,1,118, 
  19,2,0,17,1,40,12,0,0,1,4,19,57,0,0,0,158,0,0,0,4,0,14,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8, 
  4,19,37,0,0,0,101,0,0,0,1,0,17,1,82,17,2,0,1,4,15,1,82,17,2,0,17,1,116,10,0,0,1,2,21,0,149,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,74,64,4,129,109,176,3,129, 
  58,160,132,127,111,144,2,128,110,32,131,128,121,0,2,128,130,112,1,128,19,109,0,0,0,57,1,0,0,1,0,17,1,118,19,2,0,1,19,109,0,0,0,56,1,0,0,1,0,17,1,118,19,2,0,1,19,74,0,0, 
  0,208,0,0,0,1,0,17,1,118,19,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,118,19,2,0,1,19,74,0,0,0,206,0,0,0,1,0,17,1,118,19,2,0,1,19,58,0,0,0,161,0,0,0,2, 
  0,1,1,2,21,0,60,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,0,80,73,131,49,32,68,131,26,128,7,128,27,240,6,128,4,72,73,129,5,224,200,128,30,64,5,128,7,120,8,128,13,16,136,128,28,96, 
  198,128,29,208,69,128,37,176,4,128,52,144,3,128,56,0,3,128,57,112,2,128,19,26,0,0,0,78,0,0,0,1,0,17,1,12,20,2,0,1,19,26,0,0,0,77,0,0,0,1,0,17,1,12,20,2,0,1,19,26, 
  0,0,0,76,0,0,0,1,0,17,1,12,20,2,0,1,19,26,0,0,0,75,0,0,0,1,0,17,1,12,20,2,0,1,19,13,0,0,0,34,0,0,0,1,0,17,1,12,20,2,0,1,19,7,0,0,0,20,0,0, 
  0,1,0,17,1,12,20,2,0,1,19,7,0,0,0,18,0,0,0,1,0,17,1,12,20,2,0,1,19,7,0,0,0,17,0,0,0,1,0,17,1,12,20,2,0,1,19,7,0,0,0,16,0,0,0,1,0,17,1,12, 
  20,2,0,1,19,5,0,0,0,9,0,0,0,1,0,17,1,12,20,2,0,1,15,1,12,20,2,0,17,1,17,34,2,0,1,15,1,12,20,2,0,17,1,131,33,2,0,1,15,1,12,20,2,0,17,1,73,21,2,0, 
  1,1,19,7,0,0,0,19,0,0,0,1,0,17,1,12,20,2,0,1,2,21,1,202,0,0,0,190,127,3,0,13,0,0,0,3,0,0,0,24,112,197,130,1,48,2,129,2,48,2,128,27,144,4,128,22,224,69,129,25, 
  0,197,128,6,48,130,127,7,48,194,128,41,248,3,129,62,136,3,128,63,24,3,128,64,168,2,128,65,56,2,128,8,4,15,1,216,23,2,0,17,1,15,23,2,0,1,4,15,1,216,23,2,0,17,1,225,15,2,0,1, 
  4,15,1,216,23,2,0,17,1,236,13,2,0,1,4,15,1,216,23,2,0,17,1,20,22,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,216,23,2,0,1,4,15,1,216,23,2,0,17,1,223,1,2,0, 
  1,4,15,1,216,23,2,0,17,1,234,248,1,0,1,4,15,1,216,23,2,0,17,1,150,240,1,0,1,4,15,1,216,23,2,0,17,1,232,167,1,0,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0, 
  0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,97,22,2,0,1,4,15,1,97,22,2,0,17,1,116,10,0,0,1, 
  2,21,0,101,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,48,130,128,13,152,194,127,49,40,130,128,79,48,1,128,61,192,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,97,22,2,0,1,15,1,97, 
  22,2,0,17,1,199,22,2,0,1,1,15,1,97,22,2,0,17,1,169,12,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,97,22,2,0,1,2,21,1,59,0,0,0,92,157,3,0,6,0,0,0,2,0,0, 
  0,60,144,1,128,1,208,1,129,2,208,129,128,7,208,1,128,6,208,1,128,61,80,1,128,4,17,1,36,13,2,0,1,4,17,1,136,13,2,0,1,8,19,49,0,0,0,139,0,0,0,2,0,14,1,21,1,47,0,0, 
  0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,63,23,2,0,1,2,21,1,152,0,0,0,108,159,3,0,10,0,0,0,3,0,0, 
  0,112,8,3,128,1,208,193,129,2,208,1,128,11,88,4,128,76,232,3,128,110,120,3,128,6,208,193,127,7,208,129,128,129,112,2,128,135,216,1,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,234,17,2,0, 
  1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,234,17,2,0,1,4,15,1,234,17,2,0,17,1,185,242,0,0,1,4,15,1,234,17,2,0,17,1,49,19,2,0,1,4,15,1,234,17,2,0,17,1,40,12,0, 
  0,1,4,19,57,0,0,0,159,0,0,0,3,0,1,2,21,0,41,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,0,176,69,131,49,40,72,131,26,208,6,128,27,184,8,128,4,144,67,129,5,144,195,128,30,0, 
  3,128,7,184,4,128,13,48,135,128,28,152,195,128,29,32,69,128,37,152,7,128,52,112,2,128,56,40,4,128,57,64,6,128,19,26,0,0,0,76,0,0,0,1,0,17,1,216,23,2,0,1,19,7,0,0,0,20,0,0, 
  0,1,0,17,1,216,23,2,0,1,1,19,7,0,0,0,17,0,0,0,1,0,17,1,216,23,2,0,1,19,26,0,0,0,77,0,0,0,1,0,17,1,216,23,2,0,1,15,1,216,23,2,0,17,1,2,25,2,0,1, 
  19,7,0,0,0,18,0,0,0,1,0,17,1,216,23,2,0,1,19,7,0,0,0,19,0,0,0,1,0,17,1,216,23,2,0,1,19,26,0,0,0,78,0,0,0,1,0,17,1,216,23,2,0,1,19,5,0,0,0,10, 
  0,0,0,2,0,1,15,1,216,23,2,0,17,1,17,34,2,0,1,19,13,0,0,0,34,0,0,0,1,0,17,1,216,23,2,0,1,19,26,0,0,0,75,0,0,0,1,0,17,1,216,23,2,0,1,19,7,0,0,0, 
  16,0,0,0,1,0,17,1,216,23,2,0,1,2,21,1,130,0,0,0,116,160,3,0,9,0,0,0,3,0,0,0,24,48,3,128,1,176,1,129,2,176,1,128,27,80,2,128,22,160,3,128,25,192,194,128,6,176,129,127, 
  7,176,1,128,41,184,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,244,32,2,0,1,4,15,1,244,32,2,0,17,1,134,30,2,0,1,4,15,1,244,32,2,0,17,1,153,28,2,0,1,4,15,1,244, 
  32,2,0,17,1,21,27,2,0,1,4,15,1,244,32,2,0,17,1,145,25,2,0,1,19,4,0,0,0,7,0,0,0,2,0,14,1,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,204,25,2,0,1,2,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,27,128,129,128,13,136, 
  193,127,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,204,25,2,0,1,1,15,1,204,25,2,0,17,1,11,26,2,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1, 
  128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,59,26,2,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198, 
  129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,216,172,1,0,1,4,19,121, 
  0,0,0,104,1,0,0,1,0,17,1,216,172,1,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,216,172,1,0,1,4,15,1,216,172,1,0,17,1,185,242,0,0,1,4,15,1,216,172,1,0,17,1,143,176, 
  1,0,1,4,15,1,216,172,1,0,17,1,222,175,1,0,1,4,15,1,216,172,1,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,216,172,1,0,1,4,15,1,216,172,1,0,17,1,116, 
  10,0,0,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,80,27, 
  2,0,1,2,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,28,128,1,128,13,136,65,128,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,80,27,2,0,1,1,15,1,80,27,2,0,17, 
  1,143,27,2,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,191,27,2,0,1,2,21,1,217,0,0, 
  0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2, 
  128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,26,242,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,26,242,1,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,26,242, 
  1,0,1,4,15,1,26,242,1,0,17,1,185,242,0,0,1,4,15,1,26,242,1,0,17,1,143,176,1,0,1,4,15,1,26,242,1,0,17,1,222,175,1,0,1,4,15,1,26,242,1,0,17,1,40,12,0,0,1,4, 
  19,37,0,0,0,101,0,0,0,1,0,17,1,26,242,1,0,1,4,15,1,26,242,1,0,17,1,116,10,0,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2, 
  48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,201,28,2,0,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41, 
  88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,22,29,2,0,1,4,15,1,22,29,2,0,17,1,116,10,0,0,1,2,21,0,101,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,29,144,130,128, 
  13,152,194,127,37,40,130,128,79,48,1,128,61,192,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,22,29,2,0,1,15,1,22,29,2,0,17,1,124,29,2,0,1,15,1,22,29,2,0,17,1,205,249,1,0,1, 
  1,19,61,0,0,0,166,0,0,0,1,0,17,1,22,29,2,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4, 
  17,1,172,29,2,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129,31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224, 
  4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,10,251,1,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,10,251,1,0,1,4,19,115, 
  0,0,0,96,1,0,0,1,0,17,1,10,251,1,0,1,4,15,1,10,251,1,0,17,1,185,242,0,0,1,4,15,1,10,251,1,0,17,1,143,176,1,0,1,4,15,1,10,251,1,0,17,1,222,175,1,0,1,4,15, 
  1,10,251,1,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,10,251,1,0,1,4,15,1,10,251,1,0,17,1,116,10,0,0,1,2,21,1,76,0,0,0,29,154,3,0,6,0,0,0, 
  2,0,0,0,40,240,1,128,1,80,1,129,2,80,129,128,7,80,1,128,6,80,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,211,30,2,0,1,4,15,1,211,30,2,0,17,1,229,17,0, 
  0,1,2,21,0,96,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,36,40,2,128,37,192,1,128,30,248,130,128,31,144,2,128,62,48,1,128,19,31,0,0,0,83,0,0,0,1,0,17,1,211,30,2,0,1,15, 
  1,211,30,2,0,17,1,187,11,2,0,1,15,1,211,30,2,0,17,1,86,11,2,0,1,15,1,211,30,2,0,17,1,52,31,2,0,1,1,2,21,1,59,0,0,0,142,154,3,0,6,0,0,0,2,0,0,0,6,80, 
  1,128,1,80,193,128,2,80,129,127,7,80,1,128,9,152,65,128,21,88,1,128,8,4,17,1,112,31,2,0,1,4,17,1,201,2,2,0,1,2,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48, 
  1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,171,31,2,0,1,2,21,0,62,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,30,128,1, 
  128,13,136,65,128,37,240,0,128,19,13,0,0,0,34,0,0,0,1,0,17,1,171,31,2,0,1,1,15,1,171,31,2,0,17,1,234,31,2,0,1,2,21,1,47,0,0,0,84,135,3,0,5,0,0,0,2,0,0,0, 
  6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,21,56,1,128,8,4,17,1,26,32,2,0,1,2,21,1,217,0,0,0,86,28,3,0,13,0,0,0,3,0,0,0,112,0,4,128,1,48,2,129,2,48,130,129, 
  31,88,198,129,76,80,5,128,41,192,133,129,6,48,194,128,7,48,2,127,82,224,4,128,110,112,4,128,127,104,131,128,129,208,2,128,135,56,2,128,8,4,19,130,0,0,0,115,1,0,0,1,0,17,1,34,5,2,0,1, 
  4,19,121,0,0,0,104,1,0,0,1,0,17,1,34,5,2,0,1,4,19,115,0,0,0,96,1,0,0,1,0,17,1,34,5,2,0,1,4,15,1,34,5,2,0,17,1,185,242,0,0,1,4,15,1,34,5,2,0,17, 
  1,143,176,1,0,1,4,15,1,34,5,2,0,17,1,222,175,1,0,1,4,15,1,34,5,2,0,17,1,40,12,0,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,34,5,2,0,1,4,15,1,34,5,2,0, 
  17,1,116,10,0,0,1,2,21,0,142,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0,0,16,4,128,29,128,66,128,37,144,1,128,27,64,3,128,28,224,2,128,13,160,3,127,30,32,2,128,7,8,4,128,19,13, 
  0,0,0,34,0,0,0,1,0,17,1,244,32,2,0,1,19,7,0,0,0,25,0,0,0,2,0,1,19,7,0,0,0,23,0,0,0,2,0,1,19,7,0,0,0,22,0,0,0,2,0,1,19,7,0,0,0,21,0,0, 
  0,2,0,1,15,1,244,32,2,0,17,1,17,34,2,0,1,1,19,7,0,0,0,24,0,0,0,2,0,1,2,21,1,130,0,0,0,116,160,3,0,9,0,0,0,3,0,0,0,24,48,3,128,1,176,1,129,2,176,1, 
  128,27,80,2,128,22,160,3,128,25,192,194,128,6,176,129,127,7,176,1,128,41,184,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,244,32,2,0,1,4,15,1,244,32,2,0,17,1,134,30,2,0,1,4, 
  15,1,244,32,2,0,17,1,153,28,2,0,1,4,15,1,244,32,2,0,17,1,21,27,2,0,1,4,15,1,244,32,2,0,17,1,145,25,2,0,1,19,4,0,0,0,8,0,0,0,1,0,1,21,1,59,0,0,0,178, 
  17,3,0,6,0,0,0,2,0,0,0,4,88,1,128,1,80,1,128,2,80,129,128,3,152,129,128,6,80,1,128,7,80,1,128,8,4,17,1,140,0,3,0,1,4,17,1,77,34,2,0,1,2,21,1,69,1,0,0,79, 
  18,3,0,19,0,0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80,5,128,73,232,5,128,58,240,134,127,59,128,70,129,108, 
  104,3,128,109,248,2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,104,233,2,0,17,1,76,231,2,0,1,4,15,1,104,233,2,0,17,1,103,230,2,0,1,4,15,1,104, 
  233,2,0,17,1,130,229,2,0,1,4,15,1,104,233,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,104,233,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,104,233,2, 
  0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,104,233,2,0,1,4,15,1,104,233,2,0,17,1,151,127,1,0,1,4,15,1,104,233,2,0,17,1,81,127,1,0,1,4,15,1,104,233,2,0,17,1,185,126, 
  1,0,1,4,15,1,104,233,2,0,17,1,124,92,2,0,1,4,15,1,104,233,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,104,233,2,0,1,4,15,1,104,233,2,0,17,1,182, 
  91,2,0,1,4,15,1,104,233,2,0,17,1,147,35,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19, 
  69,0,0,0,193,0,0,0,1,0,17,1,206,35,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208,0,128,15,1,206,35,2,0,17,1,247,35,2,0,1,1,2,21, 
  1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0, 
  1,0,17,1,16,82,2,0,1,4,17,1,103,36,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,16,82,2,0,1,4,15,1,16,82,2,0,17,1,116,10,0,0,1,2,21,1,47,0,0,0,10,105,3, 
  0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17,1,151,36,2,0,1,2,21,1,99,0,0,0,125,105,3,0,7,0,0,0,2,0,0,0,72,120,1, 
  128,1,112,65,129,2,112,129,128,7,112,129,128,6,112,1,128,31,168,2,128,41,16,2,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,251,36,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,251, 
  36,2,0,1,4,15,1,251,36,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1, 
  128,19,61,0,0,0,167,0,0,0,1,0,17,1,251,36,2,0,1,15,1,251,36,2,0,17,1,10,81,2,0,1,15,1,251,36,2,0,17,1,165,37,2,0,1,1,15,1,251,36,2,0,17,1,114,37,2,0,1,19, 
  61,0,0,0,166,0,0,0,1,0,17,1,251,36,2,0,1,2,21,1,39,0,0,0,252,160,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0, 
  0,0,34,0,0,0,1,0,1,21,1,47,0,0,0,132,161,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,226,37,2,0,1,8,19,38,0,0, 
  0,108,0,0,0,5,0,14,14,1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,120,9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112,68,131,7,112,68,131, 
  88,248,12,128,89,136,12,128,10,120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88,10,128,31,8,208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24,12,128,95,232,73,129, 
  97,8,137,129,98,152,136,129,100,184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232,4,128,130,120,4,128,8,4,15,1,166,54,2,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17, 
  1,166,54,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,166,54,2,0,1,4,15,1,166,54,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,166,54,2,0,1,4,19, 
  87,0,0,0,4,1,0,0,1,0,17,1,166,54,2,0,1,4,15,1,166,54,2,0,17,1,109,54,2,0,1,4,15,1,166,54,2,0,17,1,52,54,2,0,1,4,15,1,166,54,2,0,17,1,251,53,2,0,1,4, 
  15,1,166,54,2,0,17,1,194,53,2,0,1,4,15,1,166,54,2,0,17,1,137,53,2,0,1,4,15,1,166,54,2,0,17,1,80,53,2,0,1,4,15,1,166,54,2,0,17,1,23,53,2,0,1,4,15,1,166,54, 
  2,0,17,1,222,52,2,0,1,4,15,1,166,54,2,0,17,1,165,52,2,0,1,4,15,1,166,54,2,0,17,1,108,52,2,0,1,4,15,1,166,54,2,0,17,1,51,52,2,0,1,4,15,1,166,54,2,0,17,1, 
  250,51,2,0,1,4,15,1,166,54,2,0,17,1,193,51,2,0,1,4,15,1,166,54,2,0,17,1,136,51,2,0,1,4,15,1,166,54,2,0,17,1,79,51,2,0,1,4,15,1,166,54,2,0,17,1,22,51,2,0, 
  1,4,15,1,166,54,2,0,17,1,206,174,0,0,1,4,15,1,166,54,2,0,17,1,57,146,0,0,1,4,15,1,166,54,2,0,17,1,86,43,2,0,1,4,15,1,166,54,2,0,17,1,126,114,0,0,1,4,15,1, 
  166,54,2,0,17,1,0,40,2,0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8,141,132,87,152, 
  12,128,40,200,206,130,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129,97,56,136,129,98,200, 
  7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,4,42,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,4,42,2,0, 
  1,4,15,1,4,42,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,4,42,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,4,42,2,0,1,4,15,1,4,42,2,0, 
  17,1,18,214,0,0,1,4,15,1,4,42,2,0,17,1,159,213,0,0,1,4,15,1,4,42,2,0,17,1,44,213,0,0,1,4,15,1,4,42,2,0,17,1,185,212,0,0,1,4,15,1,4,42,2,0,17,1,70,212, 
  0,0,1,4,15,1,4,42,2,0,17,1,211,211,0,0,1,4,15,1,4,42,2,0,17,1,96,211,0,0,1,4,15,1,4,42,2,0,17,1,237,210,0,0,1,4,15,1,4,42,2,0,17,1,122,210,0,0,1,4, 
  15,1,4,42,2,0,17,1,7,210,0,0,1,4,15,1,4,42,2,0,17,1,148,209,0,0,1,4,15,1,4,42,2,0,17,1,33,209,0,0,1,4,15,1,4,42,2,0,17,1,174,208,0,0,1,4,15,1,4,42, 
  2,0,17,1,59,208,0,0,1,4,15,1,4,42,2,0,17,1,200,207,0,0,1,4,15,1,4,42,2,0,17,1,151,205,0,0,1,4,15,1,4,42,2,0,17,1,206,174,0,0,1,4,15,1,4,42,2,0,17,1, 
  57,146,0,0,1,4,15,1,4,42,2,0,17,1,229,17,0,0,1,4,15,1,4,42,2,0,17,1,47,141,0,0,1,4,15,1,4,42,2,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0,255,255,255,255,17,0, 
  0,0,4,0,0,0,64,216,200,130,81,248,9,128,34,88,134,130,68,208,131,130,36,112,200,127,85,56,69,130,86,176,66,130,87,224,7,128,120,168,4,128,9,64,196,129,10,208,3,128,80,80,7,128,82,192,6,128,84,200, 
  5,128,117,104,9,128,118,216,3,128,121,64,3,128,19,64,0,0,0,177,0,0,0,1,0,17,1,4,42,2,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,4,42,2,0,1,1,15,1,4,42,2,0,17,1,231, 
  113,0,0,1,15,1,4,42,2,0,17,1,62,114,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,4,42,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,4,42,2,0,1,19,64,0,0,0,175,0, 
  0,0,1,0,17,1,4,42,2,0,1,15,1,4,42,2,0,17,1,72,92,0,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,4,42,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,4,42,2,0,1, 
  19,64,0,0,0,178,0,0,0,1,0,17,1,4,42,2,0,1,15,1,4,42,2,0,17,1,232,55,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,4,42,2,0,1,19,80,0,0,0,221,0,0,0,1,0, 
  17,1,4,42,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,4,42,2,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128, 
  84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128, 
  95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,116,49,2,0,1,4,19,120,0,0,0,103,1, 
  0,0,1,0,17,1,116,49,2,0,1,4,15,1,116,49,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,116,49,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,116,49, 
  2,0,1,4,15,1,116,49,2,0,17,1,59,49,2,0,1,4,15,1,116,49,2,0,17,1,52,54,2,0,1,4,15,1,116,49,2,0,17,1,251,53,2,0,1,4,15,1,116,49,2,0,17,1,194,53,2,0,1,4, 
  15,1,116,49,2,0,17,1,2,49,2,0,1,4,15,1,116,49,2,0,17,1,80,53,2,0,1,4,15,1,116,49,2,0,17,1,23,53,2,0,1,4,15,1,116,49,2,0,17,1,201,48,2,0,1,4,15,1,116,49, 
  2,0,17,1,144,48,2,0,1,4,15,1,116,49,2,0,17,1,87,48,2,0,1,4,15,1,116,49,2,0,17,1,30,48,2,0,1,4,15,1,116,49,2,0,17,1,250,51,2,0,1,4,15,1,116,49,2,0,17,1, 
  229,47,2,0,1,4,15,1,116,49,2,0,17,1,172,47,2,0,1,4,15,1,116,49,2,0,17,1,115,47,2,0,1,4,15,1,116,49,2,0,17,1,58,47,2,0,1,4,15,1,116,49,2,0,17,1,206,174,0,0, 
  1,4,15,1,116,49,2,0,17,1,57,146,0,0,1,4,15,1,116,49,2,0,17,1,72,45,2,0,1,4,15,1,116,49,2,0,17,1,126,114,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0, 
  0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104, 
  9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0, 
  0,1,0,17,1,116,49,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,116,49,2,0,1,4,15,1,116,49,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,116,49,2, 
  0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,116,49,2,0,1,4,15,1,116,49,2,0,17,1,59,49,2,0,1,4,15,1,116,49,2,0,17,1,52,54,2,0,1,4,15,1,116,49,2,0,17,1,251,53, 
  2,0,1,4,15,1,116,49,2,0,17,1,194,53,2,0,1,4,15,1,116,49,2,0,17,1,2,49,2,0,1,4,15,1,116,49,2,0,17,1,80,53,2,0,1,4,15,1,116,49,2,0,17,1,23,53,2,0,1,4, 
  15,1,116,49,2,0,17,1,201,48,2,0,1,4,15,1,116,49,2,0,17,1,144,48,2,0,1,4,15,1,116,49,2,0,17,1,87,48,2,0,1,4,15,1,116,49,2,0,17,1,30,48,2,0,1,4,15,1,116,49, 
  2,0,17,1,250,51,2,0,1,4,15,1,116,49,2,0,17,1,229,47,2,0,1,4,15,1,116,49,2,0,17,1,172,47,2,0,1,4,15,1,116,49,2,0,17,1,115,47,2,0,1,4,15,1,116,49,2,0,17,1, 
  58,47,2,0,1,4,15,1,116,49,2,0,17,1,206,174,0,0,1,4,15,1,116,49,2,0,17,1,57,146,0,0,1,4,15,1,116,49,2,0,17,1,72,45,2,0,1,4,15,1,116,49,2,0,17,1,126,114,0,0, 
  1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,160,207,0,0,17,1,226,205,0,0,1,8,19,84,0,0,0,229,0,0,0,1,0,1,21, 
  1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0, 
  0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,134,208,0,0,17,1,226,205,0,0,1,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,24, 
  162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0, 
  3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,223,209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,247,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0, 
  0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,82,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0, 
  0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,197,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,1,1,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2, 
  240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,56,211,0,0,17,1,226,205,0,0,1,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128, 
  1,240,64,128,31,248,0,128,8,4,15,1,145,212,0,0,17,1,226,205,0,0,1,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65, 
  128,31,240,0,128,4,15,1,93,214,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,241,0,0,0,1,0,1,21,0,37,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200, 
  136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,116,49,2,0,1, 
  19,87,0,0,0,6,1,0,0,1,0,17,1,116,49,2,0,1,15,1,116,49,2,0,17,1,154,50,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,116,49,2,0,1,19,64,0,0,0,178,0,0,0,1,0, 
  17,1,116,49,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,116,49,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,116,49,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,116,49,2,0, 
  1,19,64,0,0,0,174,0,0,0,1,0,17,1,116,49,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,116,49,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,116,49,2,0,1,19,34,0,0,0, 
  95,0,0,0,1,0,17,1,116,49,2,0,1,19,34,0,0,0,93,0,0,0,2,0,1,2,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1,128, 
  10,4,17,1,215,91,0,0,1,6,17,1,217,50,2,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,56,1,129,1,48,129,128,2,48,1,128,41, 
  56,1,128,72,160,1,128,10,12,19,117,0,0,0,98,1,0,0,1,0,1,12,17,1,88,202,1,0,1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128, 
  8,4,15,1,160,207,0,0,17,1,226,205,0,0,1,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1, 
  19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,134,208,0, 
  0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1, 
  226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,108,209,0,0,17,1,226,205,0, 
  0,1,8,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,223,209,0,0,17,1,226,205,0,0,1,8, 
  19,86,0,0,0,247,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,8,19,86,0, 
  0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,197,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,1, 
  1,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,56,211,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,249,0,0,0, 
  1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,171,211,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,239,0,0,0,1,0,1, 
  21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,30,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,253,0,0,0,1,0,1,21,1,45, 
  0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0, 
  24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,4,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,235,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3, 
  0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,119,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,3,1,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0, 
  0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,234,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,251,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1, 
  0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,93,214,0,0,17,1,226,205,0,0,1,19,86,0,0,0,241,0,0,0,1,0,1,21,0,144,1,0,0,255,255,255,255,19,0,0,0,4,0,0,0, 
  64,96,202,128,81,208,8,128,34,248,74,130,80,96,9,128,68,240,9,130,85,32,135,130,38,240,202,129,87,0,6,128,120,232,3,128,9,240,11,130,10,96,11,129,82,64,8,128,84,176,7,128,86,144,198,128,90,112,5,129, 
  117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,166,54,2,0,17,1,166,238,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,166,54,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1, 
  166,54,2,0,1,15,1,166,54,2,0,17,1,203,80,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,166,54,2,0,1,19,68,0,0,0,190,0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,178, 
  0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17, 
  1,166,54,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,166,54,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,166,54,2,0,1, 
  19,38,0,0,0,106,0,0,0,7,0,14,14,1,19,34,0,0,0,95,0,0,0,1,0,17,1,166,54,2,0,1,1,15,1,166,54,2,0,17,1,55,56,2,0,1,19,68,0,0,0,189,0,0,0,1,0,17,1,166, 
  54,2,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,166,54,2,0,1,2,21,1,99,0,0,0,166,163,3,0,8,0,0,0,3,0,0,0,25,208,65,129,1,144,194,127,2,144,66,129,35,80,2,128,36,144,1, 
  128,33,16,2,128,30,152,2,128,34,216,2,128,4,17,1,205,76,2,0,1,4,17,1,210,72,2,0,1,4,17,1,34,69,2,0,1,4,17,1,53,65,2,0,1,8,4,17,1,139,61,2,0,1,4,17,1,166,56,2, 
  0,1,19,9,0,0,0,28,0,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132, 
  87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128, 
  100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,181,59,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,181,59,2,0,1,4, 
  15,1,181,59,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,181,59,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,181,59,2,0,1,4,15,1,181,59,2,0,17,1, 
  59,49,2,0,1,4,15,1,181,59,2,0,17,1,52,54,2,0,1,4,15,1,181,59,2,0,17,1,251,53,2,0,1,4,15,1,181,59,2,0,17,1,124,59,2,0,1,4,15,1,181,59,2,0,17,1,67,59,2,0, 
  1,4,15,1,181,59,2,0,17,1,80,53,2,0,1,4,15,1,181,59,2,0,17,1,23,53,2,0,1,4,15,1,181,59,2,0,17,1,222,52,2,0,1,4,15,1,181,59,2,0,17,1,165,52,2,0,1,4,15,1, 
  181,59,2,0,17,1,87,48,2,0,1,4,15,1,181,59,2,0,17,1,51,52,2,0,1,4,15,1,181,59,2,0,17,1,10,59,2,0,1,4,15,1,181,59,2,0,17,1,209,58,2,0,1,4,15,1,181,59,2,0, 
  17,1,152,58,2,0,1,4,15,1,181,59,2,0,17,1,79,51,2,0,1,4,15,1,181,59,2,0,17,1,58,47,2,0,1,4,15,1,181,59,2,0,17,1,206,174,0,0,1,4,15,1,181,59,2,0,17,1,57,146, 
  0,0,1,4,15,1,181,59,2,0,17,1,86,43,2,0,1,4,15,1,181,59,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240, 
  0,128,4,15,1,134,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8, 
  4,15,1,249,208,0,0,17,1,226,205,0,0,1,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1, 
  108,209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,145,212,0,0, 
  17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,4,213,0,0,17,1, 
  226,205,0,0,1,19,86,0,0,0,235,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86, 
  216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,181,59,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,181,59, 
  2,0,1,15,1,181,59,2,0,17,1,76,61,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,177,0,0, 
  0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,181, 
  59,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,181,59,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,181,59,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,181,59,2,0,1,15,1, 
  181,59,2,0,17,1,220,60,2,0,1,2,21,1,99,0,0,0,166,163,3,0,8,0,0,0,3,0,0,0,25,144,66,129,1,208,194,127,2,208,66,129,35,16,2,128,36,216,2,128,33,208,1,128,30,80,2,128,34,144, 
  1,128,4,17,1,166,56,2,0,1,4,17,1,34,69,2,0,1,4,17,1,53,65,2,0,1,4,17,1,139,61,2,0,1,4,17,1,210,72,2,0,1,8,4,17,1,205,76,2,0,1,19,34,0,0,0,88,0,0,0, 
  3,0,14,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,16,1,128,2,16,1,128,27,24,1,128,10,6,17,1,217,50,2,0,1,4,17,1,215,91,0,0,1,19,117,0,0,0, 
  98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12, 
  128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5, 
  128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,182,63,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,182,63,2,0,1,4,15,1,182,63,2,0,17, 
  1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,182,63,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,182,63,2,0,1,4,15,1,182,63,2,0,17,1,109,54,2,0,1,4,15, 
  1,182,63,2,0,17,1,52,54,2,0,1,4,15,1,182,63,2,0,17,1,251,53,2,0,1,4,15,1,182,63,2,0,17,1,194,53,2,0,1,4,15,1,182,63,2,0,17,1,67,59,2,0,1,4,15,1,182,63,2, 
  0,17,1,80,53,2,0,1,4,15,1,182,63,2,0,17,1,23,53,2,0,1,4,15,1,182,63,2,0,17,1,125,63,2,0,1,4,15,1,182,63,2,0,17,1,144,48,2,0,1,4,15,1,182,63,2,0,17,1,108, 
  52,2,0,1,4,15,1,182,63,2,0,17,1,51,52,2,0,1,4,15,1,182,63,2,0,17,1,250,51,2,0,1,4,15,1,182,63,2,0,17,1,209,58,2,0,1,4,15,1,182,63,2,0,17,1,136,51,2,0,1, 
  4,15,1,182,63,2,0,17,1,79,51,2,0,1,4,15,1,182,63,2,0,17,1,58,47,2,0,1,4,15,1,182,63,2,0,17,1,206,174,0,0,1,4,15,1,182,63,2,0,17,1,57,146,0,0,1,4,15,1,182, 
  63,2,0,17,1,86,43,2,0,1,4,15,1,182,63,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,56,211, 
  0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,249,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128, 
  85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,182,63,2,0,1,19,87,0,0,0,6,1,0,0,1, 
  0,17,1,182,63,2,0,1,15,1,182,63,2,0,17,1,76,61,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0, 
  0,0,177,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0,0,0,174,0,0,0, 
  1,0,17,1,182,63,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,182,63,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,182,63,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,182,63, 
  2,0,1,15,1,182,63,2,0,17,1,221,64,2,0,1,2,21,1,75,0,0,0,166,163,3,0,6,0,0,0,2,0,0,0,36,144,1,128,1,80,2,129,2,80,130,128,35,80,1,128,30,16,2,128,33,208,1,128,4, 
  17,1,53,65,2,0,1,4,17,1,205,76,2,0,1,4,17,1,34,69,2,0,1,4,17,1,139,61,2,0,1,8,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4, 
  0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94, 
  104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1, 
  0,0,1,0,17,1,39,67,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,39,67,2,0,1,4,15,1,39,67,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,39,67, 
  2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,39,67,2,0,1,4,15,1,39,67,2,0,17,1,59,49,2,0,1,4,15,1,39,67,2,0,17,1,52,54,2,0,1,4,15,1,39,67,2,0,17,1,251, 
  53,2,0,1,4,15,1,39,67,2,0,17,1,194,53,2,0,1,4,15,1,39,67,2,0,17,1,137,53,2,0,1,4,15,1,39,67,2,0,17,1,80,53,2,0,1,4,15,1,39,67,2,0,17,1,23,53,2,0,1, 
  4,15,1,39,67,2,0,17,1,222,52,2,0,1,4,15,1,39,67,2,0,17,1,165,52,2,0,1,4,15,1,39,67,2,0,17,1,87,48,2,0,1,4,15,1,39,67,2,0,17,1,30,48,2,0,1,4,15,1,39, 
  67,2,0,17,1,10,59,2,0,1,4,15,1,39,67,2,0,17,1,229,47,2,0,1,4,15,1,39,67,2,0,17,1,172,47,2,0,1,4,15,1,39,67,2,0,17,1,79,51,2,0,1,4,15,1,39,67,2,0,17, 
  1,58,47,2,0,1,4,15,1,39,67,2,0,17,1,206,174,0,0,1,4,15,1,39,67,2,0,17,1,57,146,0,0,1,4,15,1,39,67,2,0,17,1,86,43,2,0,1,4,15,1,39,67,2,0,17,1,126,114,0, 
  0,1,2,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3, 
  128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,39,67,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,39,67,2,0,1,15,1,39,67,2,0,17,1,166,68,2, 
  0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0, 
  0,176,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,39,67,2,0,1,19,64,0,0,0,173,0,0,0,1, 
  0,17,1,39,67,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,39,67,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,39,67,2,0,1,15,1,39,67,2,0,17,1,78,68,2,0,1,2,21,1, 
  75,0,0,0,166,163,3,0,6,0,0,0,2,0,0,0,36,24,2,128,1,16,2,129,2,16,130,128,35,208,1,128,30,144,1,128,33,80,1,128,4,17,1,34,69,2,0,1,4,17,1,139,61,2,0,1,4,17,1,53, 
  65,2,0,1,8,4,17,1,205,76,2,0,1,19,34,0,0,0,89,0,0,0,3,0,14,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,144,1,128,2,144,1,128,27,80,1,128, 
  4,17,1,215,91,0,0,1,6,17,1,229,68,2,0,1,10,19,117,0,0,0,98,1,0,0,1,0,1,21,1,60,0,0,0,76,102,3,0,5,0,0,0,2,0,0,0,40,120,1,129,1,112,129,128,2,112,1,128,41, 
  120,1,128,72,48,1,128,12,17,1,88,202,1,0,1,10,12,19,117,0,0,0,98,1,0,0,1,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131, 
  99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128, 
  82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,20,71,2,0,1,4,19,120,0, 
  0,0,103,1,0,0,1,0,17,1,20,71,2,0,1,4,15,1,20,71,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,20,71,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0, 
  17,1,20,71,2,0,1,4,15,1,20,71,2,0,17,1,59,49,2,0,1,4,15,1,20,71,2,0,17,1,52,54,2,0,1,4,15,1,20,71,2,0,17,1,251,53,2,0,1,4,15,1,20,71,2,0,17,1,194,53, 
  2,0,1,4,15,1,20,71,2,0,17,1,67,59,2,0,1,4,15,1,20,71,2,0,17,1,80,53,2,0,1,4,15,1,20,71,2,0,17,1,23,53,2,0,1,4,15,1,20,71,2,0,17,1,125,63,2,0,1,4, 
  15,1,20,71,2,0,17,1,165,52,2,0,1,4,15,1,20,71,2,0,17,1,87,48,2,0,1,4,15,1,20,71,2,0,17,1,30,48,2,0,1,4,15,1,20,71,2,0,17,1,250,51,2,0,1,4,15,1,20,71, 
  2,0,17,1,193,51,2,0,1,4,15,1,20,71,2,0,17,1,136,51,2,0,1,4,15,1,20,71,2,0,17,1,79,51,2,0,1,4,15,1,20,71,2,0,17,1,58,47,2,0,1,4,15,1,20,71,2,0,17,1, 
  206,174,0,0,1,4,15,1,20,71,2,0,17,1,57,146,0,0,1,4,15,1,20,71,2,0,17,1,86,43,2,0,1,4,15,1,20,71,2,0,17,1,126,114,0,0,1,2,21,0,38,1,0,0,255,255,255,255,13,0, 
  0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87, 
  0,0,0,7,1,0,0,1,0,17,1,20,71,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,20,71,2,0,1,15,1,20,71,2,0,17,1,147,72,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1, 
  20,71,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,20,71,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,20,71,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,20,71,2,0,1,19, 
  64,0,0,0,175,0,0,0,1,0,17,1,20,71,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,20,71,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,20,71,2,0,1,19,64,0,0,0,172,0, 
  0,0,1,0,17,1,20,71,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,20,71,2,0,1,15,1,20,71,2,0,17,1,59,72,2,0,1,2,21,1,75,0,0,0,166,163,3,0,6,0,0,0,2,0,0, 
  0,36,80,1,128,1,80,2,129,2,80,130,128,35,144,1,128,30,16,2,128,33,208,1,128,4,17,1,205,76,2,0,1,4,17,1,53,65,2,0,1,4,17,1,34,69,2,0,1,4,17,1,139,61,2,0,1,8,19,34, 
  0,0,0,90,0,0,0,3,0,14,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1,128,10,4,17,1,215,91,0,0,1,6,17,1,217,50,2, 
  0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132, 
  87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128, 
  100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,54,75,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,54,75,2,0,1,4, 
  15,1,54,75,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,54,75,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,54,75,2,0,1,4,15,1,54,75,2,0,17,1, 
  59,49,2,0,1,4,15,1,54,75,2,0,17,1,52,54,2,0,1,4,15,1,54,75,2,0,17,1,253,74,2,0,1,4,15,1,54,75,2,0,17,1,194,53,2,0,1,4,15,1,54,75,2,0,17,1,67,59,2,0, 
  1,4,15,1,54,75,2,0,17,1,80,53,2,0,1,4,15,1,54,75,2,0,17,1,23,53,2,0,1,4,15,1,54,75,2,0,17,1,222,52,2,0,1,4,15,1,54,75,2,0,17,1,144,48,2,0,1,4,15,1, 
  54,75,2,0,17,1,196,74,2,0,1,4,15,1,54,75,2,0,17,1,51,52,2,0,1,4,15,1,54,75,2,0,17,1,250,51,2,0,1,4,15,1,54,75,2,0,17,1,229,47,2,0,1,4,15,1,54,75,2,0, 
  17,1,152,58,2,0,1,4,15,1,54,75,2,0,17,1,115,47,2,0,1,4,15,1,54,75,2,0,17,1,58,47,2,0,1,4,15,1,54,75,2,0,17,1,206,174,0,0,1,4,15,1,54,75,2,0,17,1,57,146, 
  0,0,1,4,15,1,54,75,2,0,17,1,86,43,2,0,1,4,15,1,54,75,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240, 
  0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8, 
  4,15,1,119,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,3,1,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130, 
  84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,54,75,2,0,1,19,87,0,0,0,6, 
  1,0,0,1,0,17,1,54,75,2,0,1,15,1,54,75,2,0,17,1,76,61,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,54,75,2,0, 
  1,19,64,0,0,0,177,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0, 
  174,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,54,75,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,54,75,2,0,1,19,34,0,0,0,95,0,0,0,1,0, 
  17,1,54,75,2,0,1,15,1,54,75,2,0,17,1,93,76,2,0,1,2,21,1,99,0,0,0,166,163,3,0,8,0,0,0,3,0,0,0,25,216,66,129,1,144,194,127,2,144,66,129,35,80,2,128,36,152,2,128,33, 
  144,1,128,30,208,1,128,34,16,2,128,4,17,1,34,69,2,0,1,4,17,1,139,61,2,0,1,4,17,1,166,56,2,0,1,4,17,1,53,65,2,0,1,8,4,17,1,205,76,2,0,1,4,17,1,210,72,2,0,1, 
  19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87, 
  120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100, 
  200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,49,79,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,49,79,2,0,1,4,15, 
  1,49,79,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,49,79,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,49,79,2,0,1,4,15,1,49,79,2,0,17,1,109, 
  54,2,0,1,4,15,1,49,79,2,0,17,1,52,54,2,0,1,4,15,1,49,79,2,0,17,1,251,53,2,0,1,4,15,1,49,79,2,0,17,1,194,53,2,0,1,4,15,1,49,79,2,0,17,1,67,59,2,0,1, 
  4,15,1,49,79,2,0,17,1,248,78,2,0,1,4,15,1,49,79,2,0,17,1,191,78,2,0,1,4,15,1,49,79,2,0,17,1,222,52,2,0,1,4,15,1,49,79,2,0,17,1,165,52,2,0,1,4,15,1,49, 
  79,2,0,17,1,108,52,2,0,1,4,15,1,49,79,2,0,17,1,51,52,2,0,1,4,15,1,49,79,2,0,17,1,250,51,2,0,1,4,15,1,49,79,2,0,17,1,209,58,2,0,1,4,15,1,49,79,2,0,17, 
  1,136,51,2,0,1,4,15,1,49,79,2,0,17,1,79,51,2,0,1,4,15,1,49,79,2,0,17,1,22,51,2,0,1,4,15,1,49,79,2,0,17,1,206,174,0,0,1,4,15,1,49,79,2,0,17,1,57,146,0, 
  0,1,4,15,1,49,79,2,0,17,1,86,43,2,0,1,4,15,1,49,79,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0, 
  128,8,4,15,1,171,211,0,0,17,1,226,205,0,0,1,19,86,0,0,0,239,0,0,0,1,0,1,21,1,45,0,0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4, 
  15,1,30,212,0,0,17,1,226,205,0,0,1,19,86,0,0,0,253,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84, 
  248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,49,79,2,0,1,19,87,0,0,0,6,1, 
  0,0,1,0,17,1,49,79,2,0,1,15,1,49,79,2,0,17,1,140,80,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,49,79,2,0,1, 
  19,64,0,0,0,177,0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,174, 
  0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,49,79,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,49,79,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17, 
  1,49,79,2,0,1,15,1,49,79,2,0,17,1,88,80,2,0,1,2,21,1,39,0,0,0,166,163,3,0,3,0,0,0,1,0,0,0,2,48,129,128,1,48,1,128,36,240,0,128,4,17,1,205,76,2,0,1,8,19, 
  34,0,0,0,92,0,0,0,3,0,14,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,88,1,128,1,80,1,128,2,80,1,128,27,16,1,128,6,17,1,229,68,2,0,1,10,4,17,1,215,91, 
  0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,24,1,128,1,16,1,128,2,16,1,128,27,88,1,128,10,4,17,1,215,91,0,0,1,6,17, 
  1,229,68,2,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,70,0,0,0,249,105,3,0,6,0,0,0,2,0,0,0,44,240,65,129,1,80,1,128,2,80,129,128,7,80,1,128,6,80,1,128,72,88,1,128, 
  8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,230,81,2,0,1,4,17,1,81,81,2,0,1,2,21,1,47,0,0,0,182,106,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7, 
  48,65,128,43,56,1,128,8,4,17,1,129,81,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0, 
  0,0,193,0,0,0,1,0,17,1,188,81,2,0,1,2,21,0,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,64,1,128,69,208,0,128,19,38,0,0,0,102,0,0,0,8,0,14,14,1,1,2,21,0, 
  41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,64,1,128,69,208,0,128,19,38,0,0,0,104,0,0,0,6,0,14,14,1,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,37,184, 
  2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,16,82,2,0,1,15,1,16,82,2,0,17,1,176,90,2,0,1,15,1,16,82,2,0,17, 
  1,135,82,2,0,1,1,15,1,16,82,2,0,17,1,114,37,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,16,82,2,0,1,2,21,1,47,0,0,0,132,161,3,0,5,0,0,0,2,0,0,0,6,112,1, 
  128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,196,82,2,0,1,8,19,38,0,0,0,109,0,0,0,3,0,14,14,1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,120, 
  9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112,68,131,7,112,68,131,88,248,12,128,89,136,12,128,10,120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88,10,128,31,8, 
  208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24,12,128,95,232,73,129,97,8,137,129,98,152,136,129,100,184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232,4,128,130,120, 
  4,128,8,4,15,1,113,88,2,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,113,88,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,113,88,2,0,1,4,15,1,113,88, 
  2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,113,88,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,113,88,2,0,1,4,15,1,113,88,2,0,17,1,109,54,2,0, 
  1,4,15,1,113,88,2,0,17,1,56,88,2,0,1,4,15,1,113,88,2,0,17,1,253,74,2,0,1,4,15,1,113,88,2,0,17,1,194,53,2,0,1,4,15,1,113,88,2,0,17,1,137,53,2,0,1,4,15,1, 
  113,88,2,0,17,1,80,53,2,0,1,4,15,1,113,88,2,0,17,1,23,53,2,0,1,4,15,1,113,88,2,0,17,1,222,52,2,0,1,4,15,1,113,88,2,0,17,1,144,48,2,0,1,4,15,1,113,88,2,0, 
  17,1,108,52,2,0,1,4,15,1,113,88,2,0,17,1,51,52,2,0,1,4,15,1,113,88,2,0,17,1,250,51,2,0,1,4,15,1,113,88,2,0,17,1,193,51,2,0,1,4,15,1,113,88,2,0,17,1,172,47, 
  2,0,1,4,15,1,113,88,2,0,17,1,115,47,2,0,1,4,15,1,113,88,2,0,17,1,58,47,2,0,1,4,15,1,113,88,2,0,17,1,206,174,0,0,1,4,15,1,113,88,2,0,17,1,57,146,0,0,1,4, 
  15,1,113,88,2,0,17,1,86,43,2,0,1,4,15,1,113,88,2,0,17,1,126,114,0,0,1,4,15,1,113,88,2,0,17,1,226,84,2,0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0,4,0,0,0, 
  96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,40,200,206,130,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128, 
  31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129,97,56,136,129,98,200,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104, 
  1,0,0,1,0,17,1,230,86,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,230,86,2,0,1,4,15,1,230,86,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,230, 
  86,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,230,86,2,0,1,4,15,1,230,86,2,0,17,1,18,214,0,0,1,4,15,1,230,86,2,0,17,1,159,213,0,0,1,4,15,1,230,86,2,0,17,1, 
  44,213,0,0,1,4,15,1,230,86,2,0,17,1,185,212,0,0,1,4,15,1,230,86,2,0,17,1,70,212,0,0,1,4,15,1,230,86,2,0,17,1,211,211,0,0,1,4,15,1,230,86,2,0,17,1,96,211,0,0, 
  1,4,15,1,230,86,2,0,17,1,237,210,0,0,1,4,15,1,230,86,2,0,17,1,122,210,0,0,1,4,15,1,230,86,2,0,17,1,7,210,0,0,1,4,15,1,230,86,2,0,17,1,148,209,0,0,1,4,15,1, 
  230,86,2,0,17,1,33,209,0,0,1,4,15,1,230,86,2,0,17,1,174,208,0,0,1,4,15,1,230,86,2,0,17,1,59,208,0,0,1,4,15,1,230,86,2,0,17,1,200,207,0,0,1,4,15,1,230,86,2,0, 
  17,1,151,205,0,0,1,4,15,1,230,86,2,0,17,1,206,174,0,0,1,4,15,1,230,86,2,0,17,1,57,146,0,0,1,4,15,1,230,86,2,0,17,1,229,17,0,0,1,4,15,1,230,86,2,0,17,1,47,141, 
  0,0,1,4,15,1,230,86,2,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,64,224,199,130,81,16,4,128,34,0,137,130,68,160,132,130,36,168,195,127,85,200,69,130, 
  86,24,67,130,87,80,7,128,120,104,9,128,9,88,198,129,10,160,4,128,80,168,4,128,82,112,8,128,84,248,9,128,117,56,5,128,118,176,2,128,121,192,6,128,15,1,230,86,2,0,17,1,231,113,0,0,1,19,64,0, 
  0,0,177,0,0,0,1,0,17,1,230,86,2,0,1,15,1,230,86,2,0,17,1,232,55,0,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,230,86,2,0,1,1,19,64,0,0,0,172,0,0,0,1,0,17,1, 
  230,86,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,230,86,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,230,86,2,0,1,15,1,230,86,2,0,17,1,62,114,0,0,1,19,87,0,0,0,7, 
  1,0,0,1,0,17,1,230,86,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,230,86,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,230,86,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17, 
  1,230,86,2,0,1,15,1,230,86,2,0,17,1,72,92,0,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,230,86,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,230,86,2,0,1,2,21,1,45,0, 
  0,0,24,162,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,234,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,251,0,0,0,1,0,1,21,0,144,1,0,0,255, 
  255,255,255,19,0,0,0,4,0,0,0,64,96,202,128,81,208,8,128,34,248,74,130,80,96,9,128,68,240,9,130,85,32,135,130,38,240,202,129,87,0,6,128,120,232,3,128,9,240,11,130,10,96,11,129,82,64,8,128,84, 
  176,7,128,86,144,198,128,90,112,5,129,117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,113,88,2,0,17,1,166,238,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,113,88,2,0,1,19,87, 
  0,0,0,6,1,0,0,1,0,17,1,113,88,2,0,1,15,1,113,88,2,0,17,1,113,90,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,113,88,2,0,1,19,68,0,0,0,190,0,0,0,1,0,17,1, 
  113,88,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,113,88,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,113,88,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,113,88,2,0,1,19, 
  64,0,0,0,175,0,0,0,1,0,17,1,113,88,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,113,88,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,113,88,2,0,1,19,64,0,0,0,172,0, 
  0,0,1,0,17,1,113,88,2,0,1,19,38,0,0,0,107,0,0,0,5,0,14,14,1,19,34,0,0,0,95,0,0,0,1,0,17,1,113,88,2,0,1,1,15,1,113,88,2,0,17,1,2,90,2,0,1,19,68,0, 
  0,0,189,0,0,0,1,0,17,1,113,88,2,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,113,88,2,0,1,2,21,1,99,0,0,0,166,163,3,0,8,0,0,0,3,0,0,0,25,16,66,129,1,16,195,127, 
  2,16,67,129,35,144,1,128,36,208,1,128,33,144,2,128,30,80,2,128,34,208,2,128,4,17,1,53,65,2,0,1,4,17,1,205,76,2,0,1,4,17,1,210,72,2,0,1,4,17,1,139,61,2,0,1,4,17,1,34, 
  69,2,0,1,4,17,1,166,56,2,0,1,8,19,9,0,0,0,28,0,0,0,1,0,1,21,1,51,0,0,0,223,162,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4, 
  17,1,215,91,0,0,1,10,6,17,1,217,50,2,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,70,0,0,0,249,105,3,0,6,0,0,0,2,0,0,0,44,240,65,129,1,80,1,128,2,80,129,128,7,80, 
  1,128,6,80,1,128,72,88,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,140,91,2,0,1,4,17,1,247,90,2,0,1,2,21,1,47,0,0,0,182,106,3,0,5,0,0,0,2,0,0,0,6,48,1, 
  128,1,48,1,128,2,48,129,127,7,48,65,128,43,56,1,128,8,4,17,1,39,91,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1, 
  128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,98,91,2,0,1,2,21,0,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,64,1,128,69,208,0,128,19,38,0,0,0,103,0,0, 
  0,6,0,14,14,1,1,2,21,0,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,64,1,128,69,208,0,128,19,38,0,0,0,105,0,0,0,4,0,14,14,1,1,2,21,1,58,0,0,0,7,25,3,0, 
  5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,241,91,2,0,1,2,21,0,39,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,38,48,1,128,69,208,0,128,19,38,0,0,0,110,0,0,0,2,0,1,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7, 
  48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,84,92,2,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,48,1,128,69,208,0,128,19,38,0,0,0,111, 
  0,0,0,2,0,1,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17, 
  1,183,92,2,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,69,208,0,128,43,48,193,127,19,43,0,0,0,117,0,0,0,2,0,1,1,2,21,1,47,0,0,0,250,112,3,0,5,0,0, 
  0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,39,56,1,128,8,4,17,1,15,93,2,0,1,2,21,1,82,0,0,0,78,113,3,0,7,0,0,0,2,0,0,0,6,112,129,129,1,112,193, 
  128,2,112,129,127,7,112,1,128,41,248,65,128,105,184,1,128,106,120,1,128,8,4,17,1,197,214,2,0,1,4,17,1,30,201,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,98,93,2,0,1,2,21,0, 
  40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,91,208,0,128,37,216,192,127,1,15,1,98,93,2,0,17,1,139,93,2,0,1,2,21,1,89,0,0,0,191,119,3,0,7,0,0,0,2,0,0,0,6,112,1, 
  129,1,112,1,128,2,112,129,127,7,112,129,128,10,88,2,128,31,232,65,128,39,120,1,128,8,4,15,1,70,200,2,0,17,1,227,199,2,0,1,4,15,1,70,200,2,0,17,1,49,188,2,0,1,4,15,1,70,200,2, 
  0,17,1,229,93,2,0,1,2,21,1,107,0,0,0,41,120,3,0,8,0,0,0,3,0,0,0,10,232,2,128,1,144,1,128,2,144,129,127,131,8,2,128,132,152,1,128,31,120,2,128,6,144,1,128,7,144,129,127,8, 
  4,15,1,0,187,2,0,17,1,54,186,2,0,1,4,15,1,0,187,2,0,17,1,216,172,2,0,1,4,15,1,0,187,2,0,17,1,49,188,2,0,1,4,15,1,0,187,2,0,17,1,81,94,2,0,1,2,21,1,69, 
  1,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80,5,128,73,232,5,128,58,240,134,127,59, 
  128,70,129,108,104,3,128,109,248,2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,185,149,2,0,17,1,76,231,2,0,1,4,15,1,185,149,2,0,17,1,212,148,2,0,1, 
  4,15,1,185,149,2,0,17,1,130,229,2,0,1,4,15,1,185,149,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,185,149,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17, 
  1,185,149,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,185,149,2,0,1,4,15,1,185,149,2,0,17,1,151,127,1,0,1,4,15,1,185,149,2,0,17,1,81,127,1,0,1,4,15,1,185,149,2,0, 
  17,1,185,126,1,0,1,4,15,1,185,149,2,0,17,1,124,92,2,0,1,4,15,1,185,149,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,185,149,2,0,1,4,15,1,185,149,2, 
  0,17,1,182,91,2,0,1,4,15,1,185,149,2,0,17,1,151,95,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1, 
  128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,210,95,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208,0,128,15,1,210,95,2,0,17,1,251,95,2,0, 
  1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0, 
  193,0,0,0,1,0,17,1,172,140,2,0,1,4,17,1,107,96,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,172,140,2,0,1,4,15,1,172,140,2,0,17,1,116,10,0,0,1,2,21,1,47,0,0, 
  0,10,105,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17,1,155,96,2,0,1,2,21,1,99,0,0,0,125,105,3,0,7,0,0,0,2,0,0, 
  0,72,120,1,128,1,112,65,129,2,112,129,128,7,112,129,128,6,112,1,128,31,168,2,128,41,16,2,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,255,96,2,0,1,4,19,37,0,0,0,101,0,0,0,1, 
  0,17,1,255,96,2,0,1,4,15,1,255,96,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66, 
  128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,255,96,2,0,1,15,1,255,96,2,0,17,1,10,81,2,0,1,15,1,255,96,2,0,17,1,169,97,2,0,1,1,15,1,255,96,2,0,17,1,118,97, 
  2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,255,96,2,0,1,2,21,1,39,0,0,0,98,164,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1, 
  8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,47,0,0,0,194,164,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,45,56,1,128,8,4,17,1,230,97,2,0,1, 
  19,38,0,0,0,108,0,0,0,5,0,14,14,1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0,0,0,96,120,9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112,68,131, 
  7,112,68,131,88,248,12,128,89,136,12,128,10,120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88,10,128,31,8,208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24,12,128, 
  95,232,73,129,97,8,137,129,98,152,136,129,100,184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232,4,128,130,120,4,128,8,4,15,1,86,113,2,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104,1,0, 
  0,1,0,17,1,86,113,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,86,113,2,0,1,4,15,1,86,113,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,86,113,2, 
  0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,86,113,2,0,1,4,15,1,86,113,2,0,17,1,29,113,2,0,1,4,15,1,86,113,2,0,17,1,228,112,2,0,1,4,15,1,86,113,2,0,17,1,171,112, 
  2,0,1,4,15,1,86,113,2,0,17,1,114,112,2,0,1,4,15,1,86,113,2,0,17,1,57,112,2,0,1,4,15,1,86,113,2,0,17,1,0,112,2,0,1,4,15,1,86,113,2,0,17,1,199,111,2,0,1,4, 
  15,1,86,113,2,0,17,1,142,111,2,0,1,4,15,1,86,113,2,0,17,1,85,111,2,0,1,4,15,1,86,113,2,0,17,1,28,111,2,0,1,4,15,1,86,113,2,0,17,1,227,110,2,0,1,4,15,1,86,113, 
  2,0,17,1,170,110,2,0,1,4,15,1,86,113,2,0,17,1,113,110,2,0,1,4,15,1,86,113,2,0,17,1,56,110,2,0,1,4,15,1,86,113,2,0,17,1,255,109,2,0,1,4,15,1,86,113,2,0,17,1, 
  198,109,2,0,1,4,15,1,86,113,2,0,17,1,206,174,0,0,1,4,15,1,86,113,2,0,17,1,57,146,0,0,1,4,15,1,86,113,2,0,17,1,90,103,2,0,1,4,15,1,86,113,2,0,17,1,126,114,0,0, 
  1,4,15,1,86,113,2,0,17,1,4,100,2,0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0,4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8, 
  141,132,87,152,12,128,40,200,206,130,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128,94,136,9,128,31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129,97,56, 
  136,129,98,200,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,8,102,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1, 
  8,102,2,0,1,4,15,1,8,102,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,8,102,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,8,102,2,0,1,4,15,1, 
  8,102,2,0,17,1,18,214,0,0,1,4,15,1,8,102,2,0,17,1,159,213,0,0,1,4,15,1,8,102,2,0,17,1,44,213,0,0,1,4,15,1,8,102,2,0,17,1,185,212,0,0,1,4,15,1,8,102,2,0, 
  17,1,70,212,0,0,1,4,15,1,8,102,2,0,17,1,211,211,0,0,1,4,15,1,8,102,2,0,17,1,96,211,0,0,1,4,15,1,8,102,2,0,17,1,237,210,0,0,1,4,15,1,8,102,2,0,17,1,122,210, 
  0,0,1,4,15,1,8,102,2,0,17,1,7,210,0,0,1,4,15,1,8,102,2,0,17,1,148,209,0,0,1,4,15,1,8,102,2,0,17,1,33,209,0,0,1,4,15,1,8,102,2,0,17,1,174,208,0,0,1,4, 
  15,1,8,102,2,0,17,1,59,208,0,0,1,4,15,1,8,102,2,0,17,1,200,207,0,0,1,4,15,1,8,102,2,0,17,1,151,205,0,0,1,4,15,1,8,102,2,0,17,1,206,174,0,0,1,4,15,1,8,102, 
  2,0,17,1,57,146,0,0,1,4,15,1,8,102,2,0,17,1,229,17,0,0,1,4,15,1,8,102,2,0,17,1,47,141,0,0,1,4,15,1,8,102,2,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0,255,255, 
  255,255,17,0,0,0,4,0,0,0,64,248,201,130,81,184,7,128,34,80,135,130,68,128,133,130,36,128,198,127,85,208,67,130,86,240,68,130,87,176,2,128,120,240,5,128,9,136,197,129,10,128,5,128,80,96,4,128,82,216, 
  8,128,84,72,8,128,117,104,9,128,118,232,6,128,121,64,3,128,19,64,0,0,0,178,0,0,0,1,0,17,1,8,102,2,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,8,102,2,0,1,19,64,0,0,0,176, 
  0,0,0,1,0,17,1,8,102,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,8,102,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,8,102,2,0,1,1,15,1,8,102,2,0,17,1,62,114,0, 
  0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,8,102,2,0,1,15,1,8,102,2,0,17,1,232,55,0,0,1,15,1,8,102,2,0,17,1,231,113,0,0,1,15,1,8,102,2,0,17,1,72,92,0,0,1,19, 
  64,0,0,0,173,0,0,0,1,0,17,1,8,102,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,8,102,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,8,102,2,0,1,19,80,0,0,0,221,0, 
  0,0,1,0,17,1,8,102,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,8,102,2,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131, 
  99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128, 
  82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,91,108,2,0,1,4,19,120,0, 
  0,0,103,1,0,0,1,0,17,1,91,108,2,0,1,4,15,1,91,108,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,91,108,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0, 
  17,1,91,108,2,0,1,4,15,1,91,108,2,0,17,1,29,113,2,0,1,4,15,1,91,108,2,0,17,1,228,112,2,0,1,4,15,1,91,108,2,0,17,1,171,112,2,0,1,4,15,1,91,108,2,0,17,1,114,112, 
  2,0,1,4,15,1,91,108,2,0,17,1,34,108,2,0,1,4,15,1,91,108,2,0,17,1,0,112,2,0,1,4,15,1,91,108,2,0,17,1,199,111,2,0,1,4,15,1,91,108,2,0,17,1,142,111,2,0,1,4, 
  15,1,91,108,2,0,17,1,85,111,2,0,1,4,15,1,91,108,2,0,17,1,233,107,2,0,1,4,15,1,91,108,2,0,17,1,176,107,2,0,1,4,15,1,91,108,2,0,17,1,170,110,2,0,1,4,15,1,91,108, 
  2,0,17,1,119,107,2,0,1,4,15,1,91,108,2,0,17,1,62,107,2,0,1,4,15,1,91,108,2,0,17,1,255,109,2,0,1,4,15,1,91,108,2,0,17,1,198,109,2,0,1,4,15,1,91,108,2,0,17,1, 
  206,174,0,0,1,4,15,1,91,108,2,0,17,1,57,146,0,0,1,4,15,1,91,108,2,0,17,1,76,105,2,0,1,4,15,1,91,108,2,0,17,1,126,114,0,0,1,2,21,1,241,1,0,0,196,78,3,0,27,0, 
  0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216, 
  9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0, 
  0,104,1,0,0,1,0,17,1,91,108,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,91,108,2,0,1,4,15,1,91,108,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17, 
  1,91,108,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,91,108,2,0,1,4,15,1,91,108,2,0,17,1,29,113,2,0,1,4,15,1,91,108,2,0,17,1,228,112,2,0,1,4,15,1,91,108,2,0, 
  17,1,171,112,2,0,1,4,15,1,91,108,2,0,17,1,114,112,2,0,1,4,15,1,91,108,2,0,17,1,34,108,2,0,1,4,15,1,91,108,2,0,17,1,0,112,2,0,1,4,15,1,91,108,2,0,17,1,199,111, 
  2,0,1,4,15,1,91,108,2,0,17,1,142,111,2,0,1,4,15,1,91,108,2,0,17,1,85,111,2,0,1,4,15,1,91,108,2,0,17,1,233,107,2,0,1,4,15,1,91,108,2,0,17,1,176,107,2,0,1,4, 
  15,1,91,108,2,0,17,1,170,110,2,0,1,4,15,1,91,108,2,0,17,1,119,107,2,0,1,4,15,1,91,108,2,0,17,1,62,107,2,0,1,4,15,1,91,108,2,0,17,1,255,109,2,0,1,4,15,1,91,108, 
  2,0,17,1,198,109,2,0,1,4,15,1,91,108,2,0,17,1,206,174,0,0,1,4,15,1,91,108,2,0,17,1,57,146,0,0,1,4,15,1,91,108,2,0,17,1,76,105,2,0,1,4,15,1,91,108,2,0,17,1, 
  126,114,0,0,1,2,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,134,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0, 
  1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,249,208,0,0,17,1,226,205,0,0,1,19,86,0,0,0,233,0,0,0,1,0,1, 
  21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,223,209,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,247,0,0,0,1,0,1,21,1,45, 
  0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0, 
  46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,21,0,37,1,0,0,255,255,255, 
  255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2, 
  128,19,87,0,0,0,7,1,0,0,1,0,17,1,91,108,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,91,108,2,0,1,15,1,91,108,2,0,17,1,129,109,2,0,1,19,80,0,0,0,221,0,0,0,1, 
  0,17,1,91,108,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,91,108,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,91,108,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,91,108,2, 
  0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,91,108,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,91,108,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,91,108,2,0,1,19,64,0,0, 
  0,172,0,0,0,1,0,17,1,91,108,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,91,108,2,0,1,19,34,0,0,0,93,0,0,0,2,0,1,2,21,1,57,0,0,0,207,165,3,0,4,0,0,0,2, 
  0,0,0,80,16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,215,91,0,0,1,8,4,15,1,175,91,0,0,17,1,232,56,0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,45,0,0,0, 
  46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,160,207,0,0,17,1,226,205,0,0,1,8,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3, 
  0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0, 
  0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,134,208,0,0,17,1,226,205,0,0,1,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1, 
  0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0, 
  2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,108,209,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,255,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0, 
  128,1,240,64,128,31,248,0,128,8,4,15,1,223,209,0,0,17,1,226,205,0,0,1,19,86,0,0,0,247,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96, 
  65,128,31,240,0,128,4,15,1,82,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,237,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31, 
  240,0,128,4,15,1,197,210,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,1,1,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128, 
  4,15,1,56,211,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1, 
  171,211,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,239,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,30,212,0, 
  0,17,1,226,205,0,0,1,8,19,86,0,0,0,253,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,145,212,0,0,17, 
  1,226,205,0,0,1,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,4,213,0,0,17,1,226,205,0, 
  0,1,8,19,86,0,0,0,235,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,119,213,0,0,17,1,226,205,0,0,1,8, 
  19,86,0,0,0,3,1,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,234,213,0,0,17,1,226,205,0,0,1,19,86,0, 
  0,0,251,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,93,214,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,241, 
  0,0,0,1,0,1,21,0,144,1,0,0,255,255,255,255,19,0,0,0,4,0,0,0,64,96,202,128,81,208,8,128,34,248,74,130,80,96,9,128,68,240,9,130,85,32,135,130,38,240,202,129,87,0,6,128,120,232,3,128, 
  9,240,11,130,10,96,11,129,82,64,8,128,84,176,7,128,86,144,198,128,90,112,5,129,117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,86,113,2,0,17,1,166,238,0,0,1,19,87,0,0,0,7,1, 
  0,0,1,0,17,1,86,113,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,86,113,2,0,1,15,1,86,113,2,0,17,1,103,140,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,86,113,2,0,1, 
  19,68,0,0,0,190,0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,176, 
  0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,86,113,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17, 
  1,86,113,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,86,113,2,0,1,19,38,0,0,0,106,0,0,0,7,0,14,14,1,19,34,0,0,0,95,0,0,0,1,0,17,1,86,113,2,0,1,1,15,1,86, 
  113,2,0,17,1,231,114,2,0,1,19,68,0,0,0,189,0,0,0,1,0,17,1,86,113,2,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,86,113,2,0,1,2,21,1,99,0,0,0,123,166,3,0,8,0,0, 
  0,3,0,0,0,25,216,66,129,1,144,194,127,2,144,66,129,35,152,2,128,36,144,1,128,33,16,2,128,30,80,2,128,34,208,1,128,4,17,1,225,136,2,0,1,4,17,1,104,132,2,0,1,4,17,1,190,128,2,0, 
  1,4,17,1,150,124,2,0,1,8,4,17,1,8,120,2,0,1,4,17,1,86,115,2,0,1,19,9,0,0,0,28,0,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134, 
  1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129, 
  34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,44, 
  118,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,44,118,2,0,1,4,15,1,44,118,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,44,118,2,0,1,4,19,87,0, 
  0,0,4,1,0,0,1,0,17,1,44,118,2,0,1,4,15,1,44,118,2,0,17,1,29,113,2,0,1,4,15,1,44,118,2,0,17,1,228,112,2,0,1,4,15,1,44,118,2,0,17,1,171,112,2,0,1,4,15,1, 
  44,118,2,0,17,1,243,117,2,0,1,4,15,1,44,118,2,0,17,1,34,108,2,0,1,4,15,1,44,118,2,0,17,1,0,112,2,0,1,4,15,1,44,118,2,0,17,1,199,111,2,0,1,4,15,1,44,118,2,0, 
  17,1,186,117,2,0,1,4,15,1,44,118,2,0,17,1,129,117,2,0,1,4,15,1,44,118,2,0,17,1,28,111,2,0,1,4,15,1,44,118,2,0,17,1,176,107,2,0,1,4,15,1,44,118,2,0,17,1,170,110, 
  2,0,1,4,15,1,44,118,2,0,17,1,119,107,2,0,1,4,15,1,44,118,2,0,17,1,56,110,2,0,1,4,15,1,44,118,2,0,17,1,72,117,2,0,1,4,15,1,44,118,2,0,17,1,198,109,2,0,1,4, 
  15,1,44,118,2,0,17,1,206,174,0,0,1,4,15,1,44,118,2,0,17,1,57,146,0,0,1,4,15,1,44,118,2,0,17,1,90,103,2,0,1,4,15,1,44,118,2,0,17,1,126,114,0,0,1,2,21,1,45,0, 
  0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,19,208,0,0,17,1,226,205,0,0,1,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0,0,46, 
  165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,197,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,1,1,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0, 
  3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,56,211,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0, 
  0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,4,213,0,0,17,1,226,205,0,0,1,19,86,0,0,0,235,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0, 
  0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7, 
  1,0,0,1,0,17,1,44,118,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,44,118,2,0,1,15,1,44,118,2,0,17,1,195,119,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,44,118,2,0, 
  1,19,64,0,0,0,178,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0, 
  175,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,44,118,2,0,1,19,64,0,0,0,172,0,0,0,1,0, 
  17,1,44,118,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,44,118,2,0,1,15,1,44,118,2,0,17,1,83,119,2,0,1,2,21,1,99,0,0,0,123,166,3,0,8,0,0,0,3,0,0,0,25,208,65, 
  129,1,208,194,127,2,208,66,129,35,16,2,128,36,144,1,128,33,216,2,128,30,144,2,128,34,80,2,128,4,17,1,225,136,2,0,1,4,17,1,86,115,2,0,1,4,17,1,8,120,2,0,1,4,17,1,104,132,2,0, 
  1,4,17,1,150,124,2,0,1,8,4,17,1,190,128,2,0,1,19,34,0,0,0,87,0,0,0,3,0,14,1,21,1,57,0,0,0,207,165,3,0,4,0,0,0,2,0,0,0,80,128,1,128,1,192,1,128,2,192,1, 
  128,27,16,1,128,4,15,1,175,91,0,0,17,1,232,56,0,0,1,4,17,1,215,91,0,0,1,8,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136, 
  72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24, 
  15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17, 
  1,23,123,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,23,123,2,0,1,4,15,1,23,123,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,23,123,2,0,1,4,19, 
  87,0,0,0,4,1,0,0,1,0,17,1,23,123,2,0,1,4,15,1,23,123,2,0,17,1,29,113,2,0,1,4,15,1,23,123,2,0,17,1,222,122,2,0,1,4,15,1,23,123,2,0,17,1,171,112,2,0,1,4, 
  15,1,23,123,2,0,17,1,114,112,2,0,1,4,15,1,23,123,2,0,17,1,165,122,2,0,1,4,15,1,23,123,2,0,17,1,0,112,2,0,1,4,15,1,23,123,2,0,17,1,199,111,2,0,1,4,15,1,23,123, 
  2,0,17,1,142,111,2,0,1,4,15,1,23,123,2,0,17,1,85,111,2,0,1,4,15,1,23,123,2,0,17,1,28,111,2,0,1,4,15,1,23,123,2,0,17,1,176,107,2,0,1,4,15,1,23,123,2,0,17,1, 
  170,110,2,0,1,4,15,1,23,123,2,0,17,1,108,122,2,0,1,4,15,1,23,123,2,0,17,1,51,122,2,0,1,4,15,1,23,123,2,0,17,1,250,121,2,0,1,4,15,1,23,123,2,0,17,1,198,109,2,0, 
  1,4,15,1,23,123,2,0,17,1,206,174,0,0,1,4,15,1,23,123,2,0,17,1,57,146,0,0,1,4,15,1,23,123,2,0,17,1,90,103,2,0,1,4,15,1,23,123,2,0,17,1,126,114,0,0,1,2,21,1, 
  45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,19,208,0,0,17,1,226,205,0,0,1,8,19,85,0,0,0,231,0,0,0,1,0,1,21,1,45,0,0, 
  0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,134,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,243,0,0,0,1,0,1,21,1,45,0,0,0,46,165, 
  3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,249,208,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,233,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3, 
  0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,145,212,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,245,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0, 
  1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,234,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,251,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0, 
  0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1, 
  0,0,1,0,17,1,23,123,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,23,123,2,0,1,15,1,23,123,2,0,17,1,129,109,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,23,123,2,0,1, 
  19,64,0,0,0,178,0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,175, 
  0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,23,123,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17, 
  1,23,123,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,23,123,2,0,1,15,1,23,123,2,0,17,1,62,124,2,0,1,2,21,1,75,0,0,0,123,166,3,0,6,0,0,0,2,0,0,0,36,80,1,128, 
  1,80,2,129,2,80,130,128,35,208,1,128,30,16,2,128,33,144,1,128,4,17,1,225,136,2,0,1,4,17,1,190,128,2,0,1,4,17,1,8,120,2,0,1,4,17,1,150,124,2,0,1,8,19,34,0,0,0,89,0, 
  0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128, 
  89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128, 
  127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,250,126,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,250,126,2,0,1,4,15,1,250,126,2,0,17,1, 
  133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,250,126,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,250,126,2,0,1,4,15,1,250,126,2,0,17,1,29,113,2,0,1,4,15,1, 
  250,126,2,0,17,1,222,122,2,0,1,4,15,1,250,126,2,0,17,1,171,112,2,0,1,4,15,1,250,126,2,0,17,1,114,112,2,0,1,4,15,1,250,126,2,0,17,1,34,108,2,0,1,4,15,1,250,126,2,0, 
  17,1,0,112,2,0,1,4,15,1,250,126,2,0,17,1,199,111,2,0,1,4,15,1,250,126,2,0,17,1,142,111,2,0,1,4,15,1,250,126,2,0,17,1,85,111,2,0,1,4,15,1,250,126,2,0,17,1,28,111, 
  2,0,1,4,15,1,250,126,2,0,17,1,193,126,2,0,1,4,15,1,250,126,2,0,17,1,170,110,2,0,1,4,15,1,250,126,2,0,17,1,108,122,2,0,1,4,15,1,250,126,2,0,17,1,62,107,2,0,1,4, 
  15,1,250,126,2,0,17,1,255,109,2,0,1,4,15,1,250,126,2,0,17,1,136,126,2,0,1,4,15,1,250,126,2,0,17,1,206,174,0,0,1,4,15,1,250,126,2,0,17,1,57,146,0,0,1,4,15,1,250,126, 
  2,0,17,1,90,103,2,0,1,4,15,1,250,126,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,160,207,0, 
  0,17,1,226,205,0,0,1,8,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,223,209,0,0,17,1, 
  226,205,0,0,1,8,19,86,0,0,0,247,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129, 
  86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,250,126,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,250, 
  126,2,0,1,15,1,250,126,2,0,17,1,121,128,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,177,0, 
  0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1, 
  250,126,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,250,126,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,250,126,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,250,126,2,0,1,15, 
  1,250,126,2,0,17,1,33,128,2,0,1,2,21,1,75,0,0,0,123,166,3,0,6,0,0,0,2,0,0,0,36,208,1,128,1,16,2,129,2,16,130,128,35,80,1,128,30,24,2,128,33,144,1,128,4,17,1,8,120, 
  2,0,1,4,17,1,190,128,2,0,1,4,17,1,225,136,2,0,1,8,4,17,1,150,124,2,0,1,19,34,0,0,0,91,0,0,0,3,0,14,1,21,1,57,0,0,0,207,165,3,0,4,0,0,0,2,0,0,0,80, 
  16,1,128,1,80,1,128,2,80,1,128,27,88,1,128,4,17,1,215,91,0,0,1,8,4,15,1,175,91,0,0,17,1,232,56,0,0,1,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0, 
  27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128, 
  93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121, 
  0,0,0,104,1,0,0,1,0,17,1,233,130,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,233,130,2,0,1,4,15,1,233,130,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1, 
  0,17,1,233,130,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,233,130,2,0,1,4,15,1,233,130,2,0,17,1,29,113,2,0,1,4,15,1,233,130,2,0,17,1,228,112,2,0,1,4,15,1,233,130, 
  2,0,17,1,171,112,2,0,1,4,15,1,233,130,2,0,17,1,114,112,2,0,1,4,15,1,233,130,2,0,17,1,34,108,2,0,1,4,15,1,233,130,2,0,17,1,0,112,2,0,1,4,15,1,233,130,2,0,17,1, 
  199,111,2,0,1,4,15,1,233,130,2,0,17,1,186,117,2,0,1,4,15,1,233,130,2,0,17,1,129,117,2,0,1,4,15,1,233,130,2,0,17,1,176,130,2,0,1,4,15,1,233,130,2,0,17,1,227,110,2,0, 
  1,4,15,1,233,130,2,0,17,1,170,110,2,0,1,4,15,1,233,130,2,0,17,1,113,110,2,0,1,4,15,1,233,130,2,0,17,1,62,107,2,0,1,4,15,1,233,130,2,0,17,1,250,121,2,0,1,4,15,1, 
  233,130,2,0,17,1,198,109,2,0,1,4,15,1,233,130,2,0,17,1,206,174,0,0,1,4,15,1,233,130,2,0,17,1,57,146,0,0,1,4,15,1,233,130,2,0,17,1,90,103,2,0,1,4,15,1,233,130,2,0, 
  17,1,126,114,0,0,1,2,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,82,210,0,0,17,1,226,205,0,0,1,19,86,0,0,0,237,0, 
  0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117, 
  184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1,233,130,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,233,130,2,0,1,15,1,233,130,2,0,17,1,103, 
  140,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,233,130,2,0,1,19,64, 
  0,0,0,176,0,0,0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,173,0,0, 
  0,1,0,17,1,233,130,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,233,130,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,233,130,2,0,1,15,1,233,130,2,0,17,1,16,132,2,0,1,2, 
  21,1,75,0,0,0,123,166,3,0,6,0,0,0,2,0,0,0,36,16,2,128,1,80,2,129,2,80,130,128,35,80,1,128,30,208,1,128,33,144,1,128,4,17,1,8,120,2,0,1,4,17,1,190,128,2,0,1,4,17, 
  1,150,124,2,0,1,4,17,1,225,136,2,0,1,8,19,34,0,0,0,90,0,0,0,3,0,14,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2,240,131,131,99,56, 
  7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81,56,206,128,82,200, 
  205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,5,135,2,0,1,4,19,120,0,0,0, 
  103,1,0,0,1,0,17,1,5,135,2,0,1,4,15,1,5,135,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,5,135,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1, 
  5,135,2,0,1,4,15,1,5,135,2,0,17,1,29,113,2,0,1,4,15,1,5,135,2,0,17,1,228,112,2,0,1,4,15,1,5,135,2,0,17,1,171,112,2,0,1,4,15,1,5,135,2,0,17,1,114,112,2,0, 
  1,4,15,1,5,135,2,0,17,1,57,112,2,0,1,4,15,1,5,135,2,0,17,1,0,112,2,0,1,4,15,1,5,135,2,0,17,1,204,134,2,0,1,4,15,1,5,135,2,0,17,1,147,134,2,0,1,4,15,1, 
  5,135,2,0,17,1,85,111,2,0,1,4,15,1,5,135,2,0,17,1,233,107,2,0,1,4,15,1,5,135,2,0,17,1,193,126,2,0,1,4,15,1,5,135,2,0,17,1,170,110,2,0,1,4,15,1,5,135,2,0, 
  17,1,113,110,2,0,1,4,15,1,5,135,2,0,17,1,62,107,2,0,1,4,15,1,5,135,2,0,17,1,250,121,2,0,1,4,15,1,5,135,2,0,17,1,90,134,2,0,1,4,15,1,5,135,2,0,17,1,206,174, 
  0,0,1,4,15,1,5,135,2,0,17,1,57,146,0,0,1,4,15,1,5,135,2,0,17,1,90,103,2,0,1,4,15,1,5,135,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,46,165,3,0,3,0,0,0, 
  1,0,0,0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,160,207,0,0,17,1,226,205,0,0,1,19,84,0,0,0,229,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0, 
  0,2,240,0,128,1,240,64,128,31,248,0,128,8,4,15,1,56,211,0,0,17,1,226,205,0,0,1,19,86,0,0,0,249,0,0,0,1,0,1,21,1,45,0,0,0,46,165,3,0,3,0,0,0,1,0,0,0,2,240, 
  0,128,1,240,64,128,31,248,0,128,8,4,15,1,171,211,0,0,17,1,226,205,0,0,1,19,86,0,0,0,239,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0,0,0,3,0,0,0,64,56,200,128,81, 
  24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87,0,0,0,7,1,0,0,1,0,17,1, 
  5,135,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,5,135,2,0,1,15,1,5,135,2,0,17,1,156,136,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,178, 
  0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17, 
  1,5,135,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,5,135,2,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,5,135,2,0,1, 
  19,34,0,0,0,95,0,0,0,1,0,17,1,5,135,2,0,1,15,1,5,135,2,0,17,1,44,136,2,0,1,2,21,1,99,0,0,0,123,166,3,0,8,0,0,0,3,0,0,0,25,144,65,129,1,16,195,127,2,16, 
  67,129,35,144,2,128,36,80,2,128,33,208,1,128,30,16,2,128,34,208,2,128,4,17,1,86,115,2,0,1,4,17,1,190,128,2,0,1,4,17,1,150,124,2,0,1,4,17,1,225,136,2,0,1,4,17,1,8,120,2, 
  0,1,4,17,1,104,132,2,0,1,8,19,34,0,0,0,88,0,0,0,3,0,14,1,21,1,57,0,0,0,207,165,3,0,4,0,0,0,2,0,0,0,80,128,1,128,1,192,1,128,2,192,1,128,27,16,1,128,4,15, 
  1,175,91,0,0,17,1,232,56,0,0,1,4,17,1,215,91,0,0,1,8,19,117,0,0,0,98,1,0,0,1,0,1,21,1,241,1,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,136,72,134,1,240,3,132,2, 
  240,131,131,99,56,7,128,84,88,141,132,101,48,6,128,86,232,76,132,87,120,12,128,88,8,12,128,89,152,11,128,90,40,11,128,91,184,10,128,92,72,10,128,93,216,9,128,94,104,9,128,31,24,15,129,34,168,142,128,81, 
  56,206,128,82,200,205,128,95,248,72,129,97,24,136,129,98,168,7,128,100,200,6,128,102,152,5,128,127,40,5,128,128,144,4,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,12,139,2,0,1,4, 
  19,120,0,0,0,103,1,0,0,1,0,17,1,12,139,2,0,1,4,15,1,12,139,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,12,139,2,0,1,4,19,87,0,0,0,4,1,0, 
  0,1,0,17,1,12,139,2,0,1,4,15,1,12,139,2,0,17,1,29,113,2,0,1,4,15,1,12,139,2,0,17,1,211,138,2,0,1,4,15,1,12,139,2,0,17,1,171,112,2,0,1,4,15,1,12,139,2,0,17, 
  1,114,112,2,0,1,4,15,1,12,139,2,0,17,1,34,108,2,0,1,4,15,1,12,139,2,0,17,1,0,112,2,0,1,4,15,1,12,139,2,0,17,1,204,134,2,0,1,4,15,1,12,139,2,0,17,1,142,111,2, 
  0,1,4,15,1,12,139,2,0,17,1,129,117,2,0,1,4,15,1,12,139,2,0,17,1,28,111,2,0,1,4,15,1,12,139,2,0,17,1,227,110,2,0,1,4,15,1,12,139,2,0,17,1,170,110,2,0,1,4,15, 
  1,12,139,2,0,17,1,113,110,2,0,1,4,15,1,12,139,2,0,17,1,56,110,2,0,1,4,15,1,12,139,2,0,17,1,250,121,2,0,1,4,15,1,12,139,2,0,17,1,198,109,2,0,1,4,15,1,12,139,2, 
  0,17,1,206,174,0,0,1,4,15,1,12,139,2,0,17,1,57,146,0,0,1,4,15,1,12,139,2,0,17,1,90,103,2,0,1,4,15,1,12,139,2,0,17,1,126,114,0,0,1,2,21,1,45,0,0,0,46,165,3, 
  0,3,0,0,0,1,0,0,0,2,96,1,128,1,96,65,128,31,240,0,128,4,15,1,234,213,0,0,17,1,226,205,0,0,1,8,19,86,0,0,0,251,0,0,0,1,0,1,21,0,38,1,0,0,255,255,255,255,13,0, 
  0,0,3,0,0,0,64,56,200,128,81,24,199,130,34,200,136,129,80,168,7,130,84,248,5,128,85,104,5,129,86,216,4,129,87,72,4,128,82,136,6,128,117,184,3,128,118,80,3,128,120,192,2,128,121,48,2,128,19,87, 
  0,0,0,7,1,0,0,1,0,17,1,12,139,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,12,139,2,0,1,15,1,12,139,2,0,17,1,103,140,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1, 
  12,139,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,12,139,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,12,139,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,12,139,2,0,1,19, 
  64,0,0,0,175,0,0,0,1,0,17,1,12,139,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,12,139,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,12,139,2,0,1,19,64,0,0,0,172,0, 
  0,0,1,0,17,1,12,139,2,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,12,139,2,0,1,15,1,12,139,2,0,17,1,51,140,2,0,1,2,21,1,39,0,0,0,123,166,3,0,3,0,0,0,1,0,0, 
  0,2,48,129,128,1,48,1,128,36,240,0,128,4,17,1,225,136,2,0,1,8,19,34,0,0,0,92,0,0,0,3,0,14,1,21,1,57,0,0,0,207,165,3,0,4,0,0,0,2,0,0,0,80,16,1,128,1,192,1, 
  128,2,192,1,128,27,80,1,128,4,17,1,215,91,0,0,1,4,15,1,175,91,0,0,17,1,232,56,0,0,1,8,19,117,0,0,0,98,1,0,0,1,0,1,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2,0, 
  0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,172,140,2,0,1,15,1,172,140,2,0,17,1,176,90,2,0,1,15,1,172, 
  140,2,0,17,1,35,141,2,0,1,1,15,1,172,140,2,0,17,1,118,97,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,172,140,2,0,1,2,21,1,47,0,0,0,194,164,3,0,5,0,0,0,2,0,0, 
  0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,96,141,2,0,1,8,19,38,0,0,0,109,0,0,0,3,0,14,14,1,21,1,29,2,0,0,240,65,3,0,31,0,0,0,4,0, 
  0,0,96,120,9,135,1,112,4,132,2,112,132,131,99,40,8,128,84,72,78,133,101,32,7,128,6,112,68,131,7,112,68,131,88,248,12,128,89,136,12,128,10,120,208,130,91,168,11,128,92,56,11,128,93,200,10,128,94,88, 
  10,128,31,8,208,129,34,152,143,128,81,40,143,129,82,184,142,129,86,216,205,129,87,104,13,128,90,24,12,128,95,232,73,129,97,8,137,129,98,152,136,129,100,184,7,128,102,136,6,128,127,24,6,128,128,128,5,128,129,232, 
  4,128,130,120,4,128,8,4,15,1,212,146,2,0,17,1,7,215,0,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,212,146,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,212,146,2,0,1,4, 
  15,1,212,146,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1,0,17,1,212,146,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,212,146,2,0,1,4,15,1,212,146,2,0,17,1, 
  29,113,2,0,1,4,15,1,212,146,2,0,17,1,222,122,2,0,1,4,15,1,212,146,2,0,17,1,171,112,2,0,1,4,15,1,212,146,2,0,17,1,114,112,2,0,1,4,15,1,212,146,2,0,17,1,165,122,2,0, 
  1,4,15,1,212,146,2,0,17,1,0,112,2,0,1,4,15,1,212,146,2,0,17,1,199,111,2,0,1,4,15,1,212,146,2,0,17,1,186,117,2,0,1,4,15,1,212,146,2,0,17,1,85,111,2,0,1,4,15,1, 
  212,146,2,0,17,1,28,111,2,0,1,4,15,1,212,146,2,0,17,1,176,107,2,0,1,4,15,1,212,146,2,0,17,1,170,110,2,0,1,4,15,1,212,146,2,0,17,1,108,122,2,0,1,4,15,1,212,146,2,0, 
  17,1,62,107,2,0,1,4,15,1,212,146,2,0,17,1,250,121,2,0,1,4,15,1,212,146,2,0,17,1,198,109,2,0,1,4,15,1,212,146,2,0,17,1,206,174,0,0,1,4,15,1,212,146,2,0,17,1,57,146, 
  0,0,1,4,15,1,212,146,2,0,17,1,90,103,2,0,1,4,15,1,212,146,2,0,17,1,126,114,0,0,1,4,15,1,212,146,2,0,17,1,126,143,2,0,1,2,21,1,3,2,0,0,143,73,3,0,28,0,0,0, 
  4,0,0,0,96,168,136,134,1,16,4,132,2,16,132,131,99,88,7,128,84,120,205,132,101,80,6,128,86,8,141,132,87,152,12,128,40,200,206,130,89,184,11,128,90,72,11,128,91,216,10,128,92,104,10,128,93,248,9,128, 
  94,136,9,128,31,168,79,129,34,56,143,128,81,88,14,129,82,232,13,129,88,40,12,128,95,24,73,129,97,56,136,129,98,200,7,128,100,232,6,128,102,184,5,128,127,72,5,128,128,176,4,128,129,24,4,128,8,4,19,121, 
  0,0,0,104,1,0,0,1,0,17,1,130,145,2,0,1,4,19,120,0,0,0,103,1,0,0,1,0,17,1,130,145,2,0,1,4,15,1,130,145,2,0,17,1,133,214,0,0,1,4,19,87,0,0,0,5,1,0,0,1, 
  0,17,1,130,145,2,0,1,4,19,87,0,0,0,4,1,0,0,1,0,17,1,130,145,2,0,1,4,15,1,130,145,2,0,17,1,18,214,0,0,1,4,15,1,130,145,2,0,17,1,159,213,0,0,1,4,15,1,130,145, 
  2,0,17,1,44,213,0,0,1,4,15,1,130,145,2,0,17,1,185,212,0,0,1,4,15,1,130,145,2,0,17,1,70,212,0,0,1,4,15,1,130,145,2,0,17,1,211,211,0,0,1,4,15,1,130,145,2,0,17,1, 
  96,211,0,0,1,4,15,1,130,145,2,0,17,1,237,210,0,0,1,4,15,1,130,145,2,0,17,1,122,210,0,0,1,4,15,1,130,145,2,0,17,1,7,210,0,0,1,4,15,1,130,145,2,0,17,1,148,209,0,0, 
  1,4,15,1,130,145,2,0,17,1,33,209,0,0,1,4,15,1,130,145,2,0,17,1,174,208,0,0,1,4,15,1,130,145,2,0,17,1,59,208,0,0,1,4,15,1,130,145,2,0,17,1,200,207,0,0,1,4,15,1, 
  130,145,2,0,17,1,151,205,0,0,1,4,15,1,130,145,2,0,17,1,206,174,0,0,1,4,15,1,130,145,2,0,17,1,57,146,0,0,1,4,15,1,130,145,2,0,17,1,229,17,0,0,1,4,15,1,130,145,2,0, 
  17,1,47,141,0,0,1,4,15,1,130,145,2,0,17,1,126,114,0,0,1,2,21,0,81,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,64,104,201,130,81,208,4,128,34,152,136,130,68,24,131,130,36,16,199,127, 
  85,8,72,130,86,128,70,130,87,248,9,128,120,32,3,128,9,0,201,129,10,24,3,128,80,120,7,128,82,64,4,128,84,96,5,128,117,176,3,128,118,176,2,128,121,240,5,128,15,1,130,145,2,0,17,1,231,113,0,0, 
  1,1,19,87,0,0,0,6,1,0,0,1,0,17,1,130,145,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0, 
  0,173,0,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,130,145,2,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0,0,177,0,0,0,1, 
  0,17,1,130,145,2,0,1,15,1,130,145,2,0,17,1,232,55,0,0,1,19,64,0,0,0,172,0,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17,1,130,145,2,0,1,15,1,130, 
  145,2,0,17,1,72,92,0,0,1,15,1,130,145,2,0,17,1,62,114,0,0,1,19,34,0,0,0,95,0,0,0,1,0,17,1,130,145,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,130,145,2,0,1,2, 
  21,0,144,1,0,0,255,255,255,255,19,0,0,0,4,0,0,0,64,96,202,128,81,208,8,128,34,248,74,130,80,96,9,128,68,240,9,130,85,32,135,130,38,240,202,129,87,0,6,128,120,232,3,128,9,240,11,130,10,96, 
  11,129,82,64,8,128,84,176,7,128,86,144,198,128,90,112,5,129,117,224,4,128,118,120,4,128,121,88,3,128,122,240,2,128,15,1,212,146,2,0,17,1,166,238,0,0,1,19,87,0,0,0,7,1,0,0,1,0,17,1, 
  212,146,2,0,1,19,87,0,0,0,6,1,0,0,1,0,17,1,212,146,2,0,1,15,1,212,146,2,0,17,1,129,109,2,0,1,19,80,0,0,0,221,0,0,0,1,0,17,1,212,146,2,0,1,19,68,0,0,0,190, 
  0,0,0,1,0,17,1,212,146,2,0,1,19,64,0,0,0,178,0,0,0,1,0,17,1,212,146,2,0,1,19,64,0,0,0,177,0,0,0,1,0,17,1,212,146,2,0,1,19,64,0,0,0,176,0,0,0,1,0,17, 
  1,212,146,2,0,1,19,64,0,0,0,175,0,0,0,1,0,17,1,212,146,2,0,1,19,64,0,0,0,174,0,0,0,1,0,17,1,212,146,2,0,1,19,64,0,0,0,173,0,0,0,1,0,17,1,212,146,2,0,1, 
  19,64,0,0,0,172,0,0,0,1,0,17,1,212,146,2,0,1,19,38,0,0,0,107,0,0,0,5,0,14,14,1,19,34,0,0,0,95,0,0,0,1,0,17,1,212,146,2,0,1,1,15,1,212,146,2,0,17,1,101, 
  148,2,0,1,19,68,0,0,0,189,0,0,0,1,0,17,1,212,146,2,0,1,19,68,0,0,0,191,0,0,0,1,0,17,1,212,146,2,0,1,2,21,1,99,0,0,0,123,166,3,0,8,0,0,0,3,0,0,0,25, 
  144,66,129,1,16,195,127,2,16,67,129,35,208,2,128,36,16,2,128,33,208,1,128,30,80,2,128,34,144,1,128,4,17,1,104,132,2,0,1,4,17,1,190,128,2,0,1,4,17,1,225,136,2,0,1,4,17,1,150,124, 
  2,0,1,4,17,1,86,115,2,0,1,4,17,1,8,120,2,0,1,8,19,9,0,0,0,28,0,0,0,1,0,1,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80, 
  129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,33,149,2,0,1,4,15,1,33,149,2,0,17,1,116,10,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5, 
  0,0,0,2,0,0,0,37,40,130,128,13,144,194,127,61,200,129,128,79,56,1,128,105,48,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,33,149,2,0,1,19,105,0,0,0,51,1,0,0,2,0,1,15,1, 
  33,149,2,0,17,1,134,149,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,33,149,2,0,1,2,21,1,39,0,0,0,17,167,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128, 
  4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,94,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,96,248,4,128,70,160,7,128,91,136,5,128,19,32,10,128,100,104,4,128,104, 
  216,3,128,38,144,201,126,71,16,7,128,72,168,70,127,73,24,134,129,106,184,2,128,43,40,201,125,44,152,8,128,45,48,8,128,14,136,138,128,105,72,3,128,126,176,2,128,1,19,71,0,0,0,199,0,0,0,1,0,17, 
  1,185,149,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,185,149,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,185,149,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,185,149,2,0,1, 
  19,70,0,0,0,195,0,0,0,1,0,17,1,185,149,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,185,149,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,185,149,2,0,1,15,1,185,149,2,0, 
  17,1,36,172,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,185,149,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,185,149,2,0,1,15,1,185,149,2,0,17,1,25,161,2,0,1,19,14,0,0, 
  0,48,0,0,0,1,0,17,1,185,149,2,0,1,15,1,185,149,2,0,17,1,46,159,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,185,149,2,0,1,15,1,185,149,2,0,17,1,78,151,2,0,1,15,1, 
  185,149,2,0,17,1,24,151,2,0,1,2,21,1,53,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19,126,0,0,0,111,1,0, 
  0,3,0,14,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,137,151,2,0,1,8,19,14,0,0,0,46,0, 
  0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73, 
  136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,181,154,2,0,17,1,76,231,2,0,1,4,15,1,181,154,2,0,17,1,212,148,2,0,1,4,15,1,181, 
  154,2,0,17,1,130,229,2,0,1,4,15,1,181,154,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,181,154,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,181,154,2, 
  0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,181,154,2,0,1,4,15,1,181,154,2,0,17,1,124,92,2,0,1,4,15,1,181,154,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1, 
  0,17,1,181,154,2,0,1,4,15,1,181,154,2,0,17,1,182,91,2,0,1,4,15,1,181,154,2,0,17,1,153,152,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1, 
  48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,212,152,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208, 
  0,128,15,1,212,152,2,0,17,1,253,152,2,0,1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6, 
  144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,172,140,2,0,1,4,17,1,109,153,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,172,140,2,0,1,4,15,1,172,140,2, 
  0,17,1,116,10,0,0,1,2,21,1,47,0,0,0,10,105,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17,1,157,153,2,0,1,2,21,1,99, 
  0,0,0,125,105,3,0,7,0,0,0,2,0,0,0,72,120,1,128,1,112,65,129,2,112,129,128,7,112,129,128,6,112,1,128,31,168,2,128,41,16,2,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,1,154, 
  2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,1,154,2,0,1,4,15,1,1,154,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,37,184,2,129,13, 
  32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,1,154,2,0,1,15,1,1,154,2,0,17,1,10,81,2,0,1,15,1,1,154,2,0,17,1,120,154, 
  2,0,1,1,15,1,1,154,2,0,17,1,118,97,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,1,154,2,0,1,2,21,1,47,0,0,0,194,164,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112, 
  193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,230,97,2,0,1,8,19,38,0,0,0,108,0,0,0,5,0,14,14,1,21,0,35,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,192,199,130,73, 
  184,68,131,106,152,3,128,19,112,66,129,44,40,8,130,38,72,5,129,14,112,194,127,71,120,2,128,43,200,134,128,70,168,5,128,91,48,7,128,96,56,134,128,100,136,8,128,104,40,4,128,105,8,3,128,1,19,44,0,0, 
  0,119,0,0,0,1,0,17,1,181,154,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,181,154,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,181,154,2,0,1,19,72,0,0,0,200,0,0,0,1, 
  0,17,1,181,154,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,181,154,2,0,1,19,19,0,0,0,56,0,0,0,3,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,181,154,2,0,1,19,70,0,0, 
  0,195,0,0,0,1,0,17,1,181,154,2,0,1,15,1,181,154,2,0,17,1,141,156,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,181,154,2,0,1,15,1,181,154,2,0,17,1,217,155,2,0,1,19,14, 
  0,0,0,44,0,0,0,3,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,181,154,2,0,1,2,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7, 
  48,1,128,13,56,1,128,8,4,17,1,9,156,2,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8, 
  4,15,1,81,156,2,0,17,1,212,148,2,0,1,4,15,1,81,156,2,0,17,1,130,229,2,0,1,2,21,0,59,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,72,112,129,128,105,120,1,128,104,16,1,128,71, 
  112,1,128,19,72,0,0,0,201,0,0,0,3,0,1,1,19,71,0,0,0,197,0,0,0,3,0,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7, 
  112,1,128,13,48,1,128,4,17,1,201,156,2,0,1,8,19,14,0,0,0,45,0,0,0,3,0,14,1,21,1,176,0,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,232,4,128,1,240,193,127,2,240,129,129,75, 
  184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,122,157,2,0,17,1,76,231,2,0,1,4,15,1,122,157,2,0,17,1,212,148,2,0,1, 
  4,15,1,122,157,2,0,17,1,130,229,2,0,1,4,15,1,122,157,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,122,157,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17, 
  1,122,157,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,122,157,2,0,1,2,21,0,255,0,0,0,255,255,255,255,12,0,0,0,3,0,0,0,72,0,6,130,73,112,133,130,106,16,2,128,91,224,4,128, 
  44,136,71,129,70,248,6,128,14,240,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1,0,17,1,122,157,2,0,1,19,71,0,0,0,198,0,0,0,1, 
  0,17,1,122,157,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,122,157,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,122,157,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,122,157,2, 
  0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,122,157,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,122,157,2,0,1,15,1,122,157,2,0,17,1,122,158,2,0,1,19,44,0,0,0,119,0,0,0, 
  1,0,17,1,122,157,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,122,157,2,0,1,19,14,0,0,0,43,0,0,0,5,0,14,1,1,2,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0, 
  6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,170,158,2,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128, 
  7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,242,158,2,0,17,1,212,148,2,0,1,4,15,1,242,158,2,0,17,1,130,229,2,0,1,2,21,0,59,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0, 
  72,208,129,128,105,16,1,128,104,112,1,128,71,208,1,128,19,71,0,0,0,197,0,0,0,3,0,1,19,72,0,0,0,201,0,0,0,3,0,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0, 
  6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,105,159,2,0,1,8,19,14,0,0,0,49,0,0,0,1,0,1,21,1,176,0,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73, 
  232,4,128,1,240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,26,160,2,0,17,1,76,231,2,0,1,4,15, 
  1,26,160,2,0,17,1,212,148,2,0,1,4,15,1,26,160,2,0,17,1,130,229,2,0,1,4,15,1,26,160,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,26,160,2,0,1,4, 
  19,73,0,0,0,203,0,0,0,1,0,17,1,26,160,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,26,160,2,0,1,2,21,0,254,0,0,0,255,255,255,255,12,0,0,0,3,0,0,0,72,0,6,130, 
  73,112,133,130,106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,232,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1,0,17,1,26,160,2, 
  0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,26,160,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,26,160,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,26,160,2,0,1,19,70,0,0, 
  0,195,0,0,0,1,0,17,1,26,160,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,26,160,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,26,160,2,0,1,15,1,26,160,2,0,17,1,36,172, 
  2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,26,160,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,26,160,2,0,1,19,14,0,0,0,47,0,0,0,3,0,1,1,2,21,1,47,0,0,0,101, 
  167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,84,161,2,0,1,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6,108, 
  3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8, 
  3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,236,163,2,0,17,1,76,231,2,0,1,4,15,1,236,163,2,0,17,1,212,148,2,0,1,4,15,1,236,163,2,0,17,1,130,229,2,0,1,4,15,1, 
  236,163,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,236,163,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,236,163,2,0,1,4,19,73,0,0,0,202,0,0,0,1, 
  0,17,1,236,163,2,0,1,4,15,1,236,163,2,0,17,1,124,92,2,0,1,4,15,1,236,163,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,236,163,2,0,1,4,15,1,236,163, 
  2,0,17,1,182,91,2,0,1,4,15,1,236,163,2,0,17,1,100,162,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48, 
  1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,159,162,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208,0,128,15,1,159,162,2,0,17,1,200,162,2, 
  0,1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0, 
  0,193,0,0,0,1,0,17,1,56,163,2,0,1,4,17,1,109,153,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,56,163,2,0,1,4,15,1,56,163,2,0,17,1,116,10,0,0,1,2,21,0,118,0, 
  0,0,255,255,255,255,6,0,0,0,2,0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,56,163,2,0,1,15,1,56,163, 
  2,0,17,1,176,90,2,0,1,15,1,56,163,2,0,17,1,175,163,2,0,1,1,15,1,56,163,2,0,17,1,118,97,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,56,163,2,0,1,2,21,1,47,0,0, 
  0,194,164,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,96,141,2,0,1,8,19,38,0,0,0,109,0,0,0,3,0,14,14,1,21,0,54,1, 
  0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176, 
  132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,236,163,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,236,163,2,0,1,19,72,0,0,0,200,0,0,0,1, 
  0,17,1,236,163,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,236,163,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,236,163,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,236,163,2, 
  0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,236,163,2,0,1,15,1,236,163,2,0,17,1,112,171,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,236,163,2,0,1,19,44,0,0,0,118,0,0,0, 
  1,0,17,1,236,163,2,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,236,163,2,0,17,1,131,169,2,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,236,163,2,0,1,15,1,236,163,2,0,17,1, 
  35,165,2,0,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,95,165,2,0,1,8,19,14,0,0,0,41, 
  0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3, 
  128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,111,166,2,0,17,1,76,231,2,0,1,4,15,1,111,166,2,0,17,1,212,148,2,0,1,4,15, 
  1,111,166,2,0,17,1,130,229,2,0,1,4,15,1,111,166,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,111,166,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,111, 
  166,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,111,166,2,0,1,4,15,1,111,166,2,0,17,1,124,92,2,0,1,4,15,1,111,166,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0, 
  0,1,0,17,1,111,166,2,0,1,4,15,1,111,166,2,0,17,1,182,91,2,0,1,4,15,1,111,166,2,0,17,1,151,95,2,0,1,2,21,0,36,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,160,198, 
  130,73,152,71,131,106,112,2,128,43,40,200,129,44,216,5,130,38,64,198,128,14,176,196,127,15,176,132,128,70,8,7,128,71,184,4,128,91,144,8,128,96,32,132,128,100,0,3,128,104,144,3,128,105,72,5,128,19,71,0, 
  0,0,199,0,0,0,1,0,17,1,111,166,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,111,166,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,111,166,2,0,1,19,70,0,0,0,195,0,0,0, 
  1,0,17,1,111,166,2,0,1,1,19,44,0,0,0,119,0,0,0,1,0,17,1,111,166,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,111,166,2,0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,19, 
  15,0,0,0,51,0,0,0,3,0,1,15,1,111,166,2,0,17,1,217,155,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,111,166,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,111,166,2,0,1, 
  15,1,111,166,2,0,17,1,148,167,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,111,166,2,0,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48, 
  129,127,7,48,1,128,13,56,1,128,8,4,17,1,209,167,2,0,1,19,14,0,0,0,39,0,0,0,5,0,14,14,1,21,1,176,0,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,232,4,128,1,240,193,127,2, 
  240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,130,168,2,0,17,1,76,231,2,0,1,4,15,1,130,168,2,0,17,1,212, 
  148,2,0,1,4,15,1,130,168,2,0,17,1,130,229,2,0,1,4,15,1,130,168,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,130,168,2,0,1,4,19,73,0,0,0,203,0,0, 
  0,1,0,17,1,130,168,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,130,168,2,0,1,2,21,0,0,1,0,0,255,255,255,255,12,0,0,0,3,0,0,0,72,0,6,130,73,112,133,130,106,16,2,128, 
  91,224,4,128,44,136,71,129,70,248,6,128,14,248,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1,0,17,1,130,168,2,0,1,19,71,0,0,0,198, 
  0,0,0,1,0,17,1,130,168,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,130,168,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,130,168,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17, 
  1,130,168,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,130,168,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,130,168,2,0,1,15,1,130,168,2,0,17,1,36,172,2,0,1,19,44,0,0,0, 
  119,0,0,0,1,0,17,1,130,168,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,130,168,2,0,1,19,14,0,0,0,35,0,0,0,7,0,14,14,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0, 
  0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,191,169,2,0,1,8,19,14,0,0,0,40,0,0,0,3,0,14,1,21,1,176,0,0,0,55,109,3,0,11,0,0, 
  0,3,0,0,0,73,232,4,128,1,240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,112,170,2,0,17,1,76, 
  231,2,0,1,4,15,1,112,170,2,0,17,1,212,148,2,0,1,4,15,1,112,170,2,0,17,1,130,229,2,0,1,4,15,1,112,170,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1, 
  112,170,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,112,170,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,112,170,2,0,1,2,21,0,255,0,0,0,255,255,255,255,12,0,0,0,3,0, 
  0,0,72,0,6,130,73,112,133,130,106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,240,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1, 
  0,17,1,112,170,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,112,170,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,112,170,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,112,170,2, 
  0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,112,170,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,112,170,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,112,170,2,0,1,15,1,112,170, 
  2,0,17,1,36,172,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,112,170,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,112,170,2,0,1,19,14,0,0,0,36,0,0,0,5,0,14,1,1,2, 
  21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,160,171,2,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0, 
  0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,232,171,2,0,17,1,212,148,2,0,1,4,15,1,232,171,2,0,17,1,130,229,2,0,1,2, 
  21,0,59,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,72,112,129,128,105,16,1,128,104,120,1,128,71,112,1,128,19,71,0,0,0,197,0,0,0,3,0,1,1,19,72,0,0,0,201,0,0,0,3,0,1,2, 
  21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,84,172,2,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0, 
  0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,156,172,2,0,17,1,212,148,2,0,1,4,15,1,156,172,2,0,17,1,130,229,2,0,1,2, 
  21,0,59,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,72,16,129,128,105,120,1,128,104,24,1,128,71,16,1,128,1,19,72,0,0,0,201,0,0,0,3,0,1,19,71,0,0,0,197,0,0,0,3,0,1,2, 
  21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,8,173,2,0,1,2,21,1,69,1,0,0,79,18,3,0,19,0, 
  0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80,5,128,73,232,5,128,58,240,134,127,59,128,70,129,108,104,3,128,109,248, 
  2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,214,175,2,0,17,1,76,231,2,0,1,4,15,1,214,175,2,0,17,1,212,148,2,0,1,4,15,1,214,175,2,0,17,1, 
  130,229,2,0,1,4,15,1,214,175,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,214,175,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,214,175,2,0,1,4,19,73, 
  0,0,0,202,0,0,0,1,0,17,1,214,175,2,0,1,4,15,1,214,175,2,0,17,1,151,127,1,0,1,4,15,1,214,175,2,0,17,1,81,127,1,0,1,4,15,1,214,175,2,0,17,1,185,126,1,0,1,4,15, 
  1,214,175,2,0,17,1,124,92,2,0,1,4,15,1,214,175,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,214,175,2,0,1,4,15,1,214,175,2,0,17,1,182,91,2,0,1,4, 
  15,1,214,175,2,0,17,1,78,174,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193, 
  0,0,0,1,0,17,1,137,174,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208,0,128,15,1,137,174,2,0,17,1,178,174,2,0,1,1,2,21,1,111,0,0,0, 
  128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,34, 
  175,2,0,1,4,17,1,109,153,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,34,175,2,0,1,4,15,1,34,175,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0, 
  2,0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,34,175,2,0,1,15,1,34,175,2,0,17,1,176,90,2,0,1,15, 
  1,34,175,2,0,17,1,153,175,2,0,1,1,15,1,34,175,2,0,17,1,118,97,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,34,175,2,0,1,2,21,1,47,0,0,0,194,164,3,0,5,0,0,0,2, 
  0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,45,56,1,128,8,4,17,1,96,141,2,0,1,19,38,0,0,0,109,0,0,0,3,0,14,14,1,21,0,94,1,0,0,255,255,255,255,17,0,0,0, 
  4,0,0,0,96,248,4,128,70,160,7,128,91,136,5,128,19,32,10,128,100,104,4,128,104,216,3,128,38,144,201,126,71,16,7,128,72,168,70,127,73,24,134,129,106,184,2,128,43,40,201,125,44,152,8,128,45,48,8,128, 
  14,136,138,128,105,72,3,128,126,176,2,128,1,19,71,0,0,0,199,0,0,0,1,0,17,1,214,175,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,214,175,2,0,1,19,72,0,0,0,200,0,0,0,1,0, 
  17,1,214,175,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,214,175,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,214,175,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,214,175,2,0, 
  1,19,44,0,0,0,120,0,0,0,1,0,17,1,214,175,2,0,1,15,1,214,175,2,0,17,1,130,185,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,214,175,2,0,1,19,44,0,0,0,118,0,0,0,1, 
  0,17,1,214,175,2,0,1,15,1,214,175,2,0,17,1,22,180,2,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,214,175,2,0,1,15,1,214,175,2,0,17,1,46,159,2,0,1,19,19,0,0,0,55,0,0, 
  0,1,0,17,1,214,175,2,0,1,15,1,214,175,2,0,17,1,107,177,2,0,1,15,1,214,175,2,0,17,1,53,177,2,0,1,2,21,1,53,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19,126,0,0,0,110,1,0,0,4,0,14,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129, 
  127,7,48,1,128,13,56,1,128,8,4,17,1,166,177,2,0,1,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128, 
  50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,182,178,2,0, 
  17,1,76,231,2,0,1,4,15,1,182,178,2,0,17,1,212,148,2,0,1,4,15,1,182,178,2,0,17,1,130,229,2,0,1,4,15,1,182,178,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1, 
  0,17,1,182,178,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,182,178,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,182,178,2,0,1,4,15,1,182,178,2,0,17,1,124,92,2,0,1, 
  4,15,1,182,178,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,182,178,2,0,1,4,15,1,182,178,2,0,17,1,182,91,2,0,1,4,15,1,182,178,2,0,17,1,153,152,2,0, 
  1,2,21,0,35,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,24,197,130,73,8,71,131,106,8,3,128,19,0,67,129,44,152,7,130,38,40,4,129,14,0,195,127,71,16,6,128,43,160,134,128,70,136,8,128, 
  91,136,4,128,96,128,133,128,100,152,3,128,104,112,2,128,105,248,7,128,19,72,0,0,0,200,0,0,0,1,0,17,1,182,178,2,0,1,1,19,71,0,0,0,199,0,0,0,1,0,17,1,182,178,2,0,1,19,70,0, 
  0,0,196,0,0,0,1,0,17,1,182,178,2,0,1,19,19,0,0,0,56,0,0,0,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,182,178,2,0,1,15,1,182,178,2,0,17,1,217,155,2,0,1,19,70, 
  0,0,0,195,0,0,0,1,0,17,1,182,178,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,182,178,2,0,1,15,1,182,178,2,0,17,1,218,179,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1, 
  182,178,2,0,1,19,14,0,0,0,44,0,0,0,3,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,182,178,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,182,178,2,0,1,2,21,1,47,0,0,0, 
  101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,201,156,2,0,1,8,19,14,0,0,0,45,0,0,0,3,0,14,1,21,1,47,0,0,0, 
  101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,81,180,2,0,1,8,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6, 
  108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108, 
  8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,97,181,2,0,17,1,76,231,2,0,1,4,15,1,97,181,2,0,17,1,212,148,2,0,1,4,15,1,97,181,2,0,17,1,130,229,2,0,1,4,15, 
  1,97,181,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,97,181,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,97,181,2,0,1,4,19,73,0,0,0,202,0,0,0, 
  1,0,17,1,97,181,2,0,1,4,15,1,97,181,2,0,17,1,124,92,2,0,1,4,15,1,97,181,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,97,181,2,0,1,4,15,1,97, 
  181,2,0,17,1,182,91,2,0,1,4,15,1,97,181,2,0,17,1,100,162,2,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44, 
  232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,97,181,2,0, 
  1,19,71,0,0,0,198,0,0,0,1,0,17,1,97,181,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,97,181,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,97,181,2,0,1,19,70,0,0,0, 
  195,0,0,0,1,0,17,1,97,181,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,97,181,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,97,181,2,0,1,15,1,97,181,2,0,17,1,112,171,2, 
  0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,97,181,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,97,181,2,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,97,181,2,0,17,1,70,185, 
  2,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,97,181,2,0,1,15,1,97,181,2,0,17,1,152,182,2,0,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112, 
  193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,212,182,2,0,1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144, 
  194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4, 
  15,1,228,183,2,0,17,1,76,231,2,0,1,4,15,1,228,183,2,0,17,1,212,148,2,0,1,4,15,1,228,183,2,0,17,1,130,229,2,0,1,4,15,1,228,183,2,0,17,1,223,92,2,0,1,4,19,73,0,0, 
  0,204,0,0,0,1,0,17,1,228,183,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,228,183,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,228,183,2,0,1,4,15,1,228,183,2,0,17, 
  1,124,92,2,0,1,4,15,1,228,183,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,228,183,2,0,1,4,15,1,228,183,2,0,17,1,182,91,2,0,1,4,15,1,228,183,2,0, 
  17,1,151,95,2,0,1,2,21,0,36,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,152,199,130,73,128,69,131,106,248,3,128,43,160,198,129,44,144,3,130,38,136,196,128,14,120,197,127,15,120,133,128,70,16, 
  6,128,71,232,4,128,91,0,3,128,96,8,135,128,100,144,8,128,104,0,8,128,105,112,2,128,19,71,0,0,0,198,0,0,0,1,0,17,1,228,183,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,228,183,2, 
  0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,19,71,0,0,0,199,0,0,0,1,0,17,1,228,183,2,0,1,19,15,0,0,0,51,0,0,0,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,228,183, 
  2,0,1,1,19,44,0,0,0,120,0,0,0,1,0,17,1,228,183,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,228,183,2,0,1,15,1,228,183,2,0,17,1,9,185,2,0,1,19,70,0,0,0,195,0, 
  0,0,1,0,17,1,228,183,2,0,1,15,1,228,183,2,0,17,1,217,155,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,228,183,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,228,183,2,0,1, 
  2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,209,167,2,0,1,19,14,0,0,0,39,0,0,0,5,0,14, 
  14,1,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,191,169,2,0,1,8,19,14,0,0,0,40,0,0,0,3,0, 
  14,1,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,178,185,2,0,1,2,21,1,71,0,0,0,152,110,3,0, 
  6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,250,185,2,0,17,1,212,148,2,0,1,4,15,1,250,185,2,0,17,1,130,229,2,0, 
  1,2,21,0,59,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,72,16,129,128,105,24,1,128,104,120,1,128,71,16,1,128,1,19,71,0,0,0,197,0,0,0,3,0,1,19,72,0,0,0,201,0,0,0,3,0, 
  1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,102,186,2,0,1,2,21,1,58,0,0,0,248,122,3,0, 
  5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,129,56,1,128,8,4,19,121,0,0,0,104,1,0,0,1,0,17,1,161,186,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,127,208,0,128,121,216,192,127,1,15,1,161,186,2,0,17,1,202,186,2,0,1,2,21,1,53,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127, 
  7,48,65,128,11,56,1,128,8,4,19,127,0,0,0,112,1,0,0,4,0,14,1,2,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,123,80,2,129,126,192,1,128,94,232,194,127,95,224,66,127,127,48, 
  1,128,19,94,0,0,0,20,1,0,0,1,0,17,1,0,187,2,0,1,19,94,0,0,0,19,1,0,0,1,0,17,1,0,187,2,0,1,19,94,0,0,0,18,1,0,0,1,0,17,1,0,187,2,0,1,1,15,1,0, 
  187,2,0,17,1,107,187,2,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120,3,128,1,176,1,128,2,176,129,127,11,8,67,129,132,184,1,128,31,152,2,128,6,176,1,128,7,176,129, 
  127,131,40,2,128,8,4,15,1,233,187,2,0,17,1,54,186,2,0,1,4,15,1,233,187,2,0,17,1,216,172,2,0,1,4,15,1,233,187,2,0,17,1,49,188,2,0,1,4,19,95,0,0,0,25,1,0,0,3,0, 
  14,1,4,15,1,233,187,2,0,17,1,81,94,2,0,1,2,21,0,71,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,126,112,1,128,127,16,1,128,94,48,130,127,123,208,129,127,19,94,0,0,0,23,1,0,0, 
  2,0,1,19,94,0,0,0,22,1,0,0,2,0,1,19,94,0,0,0,21,1,0,0,2,0,1,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7, 
  48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,108,188,2,0,1,2,21,0,84,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,124,120,1,128,69,16,66,128,125,16,1,128,123,8, 
  2,128,15,1,108,188,2,0,17,1,193,188,2,0,1,19,125,0,0,0,108,1,0,0,1,0,17,1,108,188,2,0,1,1,19,124,0,0,0,107,1,0,0,1,0,17,1,108,188,2,0,1,2,21,1,59,0,0,0,93, 
  37,3,0,6,0,0,0,2,0,0,0,32,152,1,128,1,80,1,128,2,80,129,128,7,80,1,128,6,80,65,128,66,88,1,128,8,4,17,1,173,144,1,0,1,4,17,1,253,188,2,0,1,2,21,1,47,0,0,0,164, 
  122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,45,189,2,0,1,2,21,1,69,1,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49, 
  176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80,5,128,73,232,5,128,58,240,134,127,59,128,70,129,108,104,3,128,109,248,2,128,46,184,9,128,47, 
  72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,115,190,2,0,17,1,76,231,2,0,1,4,15,1,115,190,2,0,17,1,212,148,2,0,1,4,15,1,115,190,2,0,17,1,130,229,2,0,1,4,15, 
  1,115,190,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,115,190,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,115,190,2,0,1,4,19,73,0,0,0,202,0,0,0, 
  1,0,17,1,115,190,2,0,1,4,15,1,115,190,2,0,17,1,151,127,1,0,1,4,15,1,115,190,2,0,17,1,81,127,1,0,1,4,15,1,115,190,2,0,17,1,185,126,1,0,1,4,15,1,115,190,2,0,17,1, 
  124,92,2,0,1,4,15,1,115,190,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,115,190,2,0,1,4,15,1,115,190,2,0,17,1,182,91,2,0,1,4,15,1,115,190,2,0,17, 
  1,153,152,2,0,1,2,21,0,94,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,96,248,4,128,70,160,7,128,91,136,133,131,19,32,10,128,100,104,4,128,104,216,3,128,38,144,201,126,71,16,7,128,72,168,70, 
  127,73,24,134,129,106,184,2,128,43,40,201,125,44,152,8,128,45,48,8,128,14,136,10,128,105,72,3,128,123,176,2,128,1,19,71,0,0,0,199,0,0,0,1,0,17,1,115,190,2,0,1,19,71,0,0,0,198,0,0, 
  0,1,0,17,1,115,190,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,115,190,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,115,190,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,115, 
  190,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,115,190,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,115,190,2,0,1,15,1,115,190,2,0,17,1,36,172,2,0,1,19,44,0,0,0,119,0, 
  0,0,1,0,17,1,115,190,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,115,190,2,0,1,15,1,115,190,2,0,17,1,179,194,2,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,115,190,2,0,1, 
  15,1,115,190,2,0,17,1,120,194,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,115,190,2,0,1,15,1,115,190,2,0,17,1,9,192,2,0,1,15,1,115,190,2,0,17,1,210,191,2,0,1,2,21,1, 
  54,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19,123,0,0,0,106,1,0,0,6,0,14,14,1,2,21,1,47,0,0,0,101, 
  167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,68,192,2,0,1,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108, 
  3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8, 
  3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,84,193,2,0,17,1,76,231,2,0,1,4,15,1,84,193,2,0,17,1,212,148,2,0,1,4,15,1,84,193,2,0,17,1,130,229,2,0,1,4,15,1, 
  84,193,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,84,193,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,84,193,2,0,1,4,19,73,0,0,0,202,0,0,0,1, 
  0,17,1,84,193,2,0,1,4,15,1,84,193,2,0,17,1,124,92,2,0,1,4,15,1,84,193,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,84,193,2,0,1,4,15,1,84,193, 
  2,0,17,1,182,91,2,0,1,4,15,1,84,193,2,0,17,1,153,152,2,0,1,2,21,0,35,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,112,198,130,73,216,70,131,106,96,4,128,19,200,67,129,44,16, 
  6,130,38,104,3,129,14,200,195,127,71,104,7,128,43,112,130,128,70,248,7,128,91,216,2,128,96,136,136,128,100,208,3,128,104,128,5,128,105,240,4,128,15,1,84,193,2,0,17,1,218,179,2,0,1,19,70,0,0,0, 
  194,0,0,0,1,0,17,1,84,193,2,0,1,19,19,0,0,0,56,0,0,0,3,0,1,1,19,70,0,0,0,196,0,0,0,1,0,17,1,84,193,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,84,193,2, 
  0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,84,193,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,84,193,2,0,1,19,14,0,0,0,44,0,0,0,3,0,1,15,1,84,193,2,0,17,1,217,155, 
  2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,84,193,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,84,193,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,84,193,2,0,1,19,70,0, 
  0,0,195,0,0,0,1,0,17,1,84,193,2,0,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,105,159, 
  2,0,1,19,14,0,0,0,49,0,0,0,1,0,1,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,238,194,2,0, 
  1,8,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128, 
  7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,254,195,2,0,17,1,76,231,2,0,1,4,15,1,254,195,2,0,17,1, 
  212,148,2,0,1,4,15,1,254,195,2,0,17,1,130,229,2,0,1,4,15,1,254,195,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,254,195,2,0,1,4,19,73,0,0,0,203,0, 
  0,0,1,0,17,1,254,195,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,254,195,2,0,1,4,15,1,254,195,2,0,17,1,124,92,2,0,1,4,15,1,254,195,2,0,17,1,25,92,2,0,1,4,19, 
  38,0,0,0,112,0,0,0,1,0,17,1,254,195,2,0,1,4,15,1,254,195,2,0,17,1,182,91,2,0,1,4,15,1,254,195,2,0,17,1,100,162,2,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0, 
  3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128, 
  105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,254,195,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,254,195,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,254,195,2,0,1,19,70, 
  0,0,0,196,0,0,0,1,0,17,1,254,195,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,254,195,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,254,195,2,0,1,19,44,0,0,0,120,0,0, 
  0,1,0,17,1,254,195,2,0,1,15,1,254,195,2,0,17,1,112,171,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,254,195,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,254,195,2,0,1,19, 
  14,0,0,0,38,0,0,0,3,0,1,15,1,254,195,2,0,17,1,70,185,2,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,254,195,2,0,1,15,1,254,195,2,0,17,1,53,197,2,0,1,1,2,21,1,47, 
  0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,113,197,2,0,1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15, 
  1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75, 
  88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,129,198,2,0,17,1,76,231,2,0,1,4,15,1,129,198,2,0,17,1,212,148,2,0,1,4,15,1,129,198,2,0,17,1,130,229,2, 
  0,1,4,15,1,129,198,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,129,198,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,129,198,2,0,1,4,19,73,0,0,0, 
  202,0,0,0,1,0,17,1,129,198,2,0,1,4,15,1,129,198,2,0,17,1,124,92,2,0,1,4,15,1,129,198,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,129,198,2,0,1, 
  4,15,1,129,198,2,0,17,1,182,91,2,0,1,4,15,1,129,198,2,0,17,1,151,95,2,0,1,2,21,0,36,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,184,196,130,73,64,70,131,106,40,4,128,43, 
  80,200,129,44,184,8,130,38,240,199,128,14,144,195,127,15,144,131,128,70,0,3,128,71,112,2,128,91,96,7,128,96,176,133,128,100,208,6,128,104,32,5,128,105,152,3,128,19,44,0,0,0,119,0,0,0,1,0,17,1, 
  129,198,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,129,198,2,0,1,1,19,71,0,0,0,198,0,0,0,1,0,17,1,129,198,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,129,198,2,0,1, 
  15,1,129,198,2,0,17,1,217,155,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,129,198,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,129,198,2,0,1,19,44,0,0,0,120,0,0,0,1,0, 
  17,1,129,198,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,129,198,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,129,198,2,0,1,19,15,0,0,0,51,0,0,0,3,0,1,15,1,129,198,2, 
  0,17,1,166,199,2,0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128, 
  4,17,1,209,167,2,0,1,8,19,14,0,0,0,39,0,0,0,5,0,14,14,1,21,1,58,0,0,0,110,15,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,41,56,1, 
  128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,30,200,2,0,1,2,21,0,39,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,92,208,0,128,37,216,0,128,1,19,92,0,0,0,14,1,0,0,2,0, 
  1,2,21,0,79,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,92,8,2,128,95,160,65,128,123,16,1,128,91,112,130,127,19,95,0,0,0,24,1,0,0,1,0,17,1,70,200,2,0,1,19,91,0,0,0,13, 
  1,0,0,4,0,14,1,15,1,70,200,2,0,17,1,150,200,2,0,1,1,2,21,1,71,0,0,0,207,123,3,0,6,0,0,0,2,0,0,0,6,80,1,129,1,80,1,128,2,80,129,127,7,80,129,128,10,200,1,128, 
  31,88,1,128,8,4,15,1,222,200,2,0,17,1,49,188,2,0,1,4,15,1,222,200,2,0,17,1,229,93,2,0,1,2,21,0,63,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,128,129,128,91,240,193,127, 
  123,240,0,128,19,95,0,0,0,24,1,0,0,1,0,17,1,222,200,2,0,1,19,91,0,0,0,12,1,0,0,5,0,14,14,1,1,2,21,1,71,0,0,0,207,123,3,0,6,0,0,0,2,0,0,0,6,80,1,129, 
  1,80,1,128,2,80,129,127,7,80,129,128,10,200,1,128,31,88,1,128,8,4,15,1,135,214,2,0,17,1,3,203,2,0,1,4,15,1,135,214,2,0,17,1,102,201,2,0,1,2,21,1,107,0,0,0,41,120,3,0, 
  8,0,0,0,3,0,0,0,10,232,2,128,1,144,1,128,2,144,129,127,131,8,2,128,132,152,1,128,31,120,2,128,6,144,1,128,7,144,129,127,8,4,15,1,210,201,2,0,17,1,54,186,2,0,1,4,15,1,210,201, 
  2,0,17,1,216,172,2,0,1,4,15,1,210,201,2,0,17,1,3,203,2,0,1,4,15,1,210,201,2,0,17,1,81,94,2,0,1,2,21,0,106,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,128,48,1,128, 
  126,80,2,128,98,232,194,127,99,224,66,128,127,192,1,128,19,98,0,0,0,30,1,0,0,1,0,17,1,210,201,2,0,1,19,98,0,0,0,31,1,0,0,1,0,17,1,210,201,2,0,1,19,98,0,0,0,32,1,0, 
  0,1,0,17,1,210,201,2,0,1,1,15,1,210,201,2,0,17,1,61,202,2,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120,3,128,1,176,1,128,2,176,129,127,11,8,67,129,132, 
  184,1,128,31,152,2,128,6,176,1,128,7,176,129,127,131,40,2,128,8,4,15,1,187,202,2,0,17,1,54,186,2,0,1,4,15,1,187,202,2,0,17,1,216,172,2,0,1,4,15,1,187,202,2,0,17,1,3,203,2, 
  0,1,4,19,99,0,0,0,37,1,0,0,3,0,14,1,4,15,1,187,202,2,0,17,1,81,94,2,0,1,2,21,0,71,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,128,16,1,128,126,208,1,128,98,48,194, 
  127,127,112,1,128,19,98,0,0,0,33,1,0,0,2,0,1,19,98,0,0,0,34,1,0,0,2,0,1,19,98,0,0,0,35,1,0,0,2,0,1,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0, 
  0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,80,203,2,0,1,4,15,1,80,203,2,0,17,1,116,10,0,0,1,2, 
  21,0,101,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,128,48,1,128,13,152,66,128,37,48,130,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,80,203,2,0,1,15,1,80, 
  203,2,0,17,1,233,203,2,0,1,15,1,80,203,2,0,17,1,182,203,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,80,203,2,0,1,2,21,1,39,0,0,0,197,167,3,0,3,0,0,0,1,0,0,0, 
  2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,47,0,0,0,9,37,3,0,5,0,0,0,2,0,0,0,32,56,1,128,1,48,1,128,2, 
  48,129,128,7,48,1,128,6,48,1,128,8,4,17,1,25,204,2,0,1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8, 
  4,17,1,73,204,2,0,1,2,21,1,69,1,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74, 
  80,5,128,73,232,5,128,58,240,134,127,59,128,70,129,108,104,3,128,109,248,2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,143,205,2,0,17,1,76,231,2,0,1,4,15, 
  1,143,205,2,0,17,1,212,148,2,0,1,4,15,1,143,205,2,0,17,1,130,229,2,0,1,4,15,1,143,205,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,143,205,2,0,1,4, 
  19,73,0,0,0,203,0,0,0,1,0,17,1,143,205,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,143,205,2,0,1,4,15,1,143,205,2,0,17,1,151,127,1,0,1,4,15,1,143,205,2,0,17,1, 
  81,127,1,0,1,4,15,1,143,205,2,0,17,1,185,126,1,0,1,4,15,1,143,205,2,0,17,1,124,92,2,0,1,4,15,1,143,205,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17, 
  1,143,205,2,0,1,4,15,1,143,205,2,0,17,1,182,91,2,0,1,4,15,1,143,205,2,0,17,1,153,152,2,0,1,2,21,0,94,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,96,248,4,132,70,160,7, 
  128,91,136,5,128,19,32,10,128,100,104,4,128,104,216,3,128,38,144,201,126,71,16,7,128,72,168,70,127,73,24,134,129,106,184,2,128,43,40,201,125,44,152,8,128,45,48,8,128,14,136,10,128,105,72,3,128,128,176,2, 
  128,1,19,71,0,0,0,199,0,0,0,1,0,17,1,143,205,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,143,205,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,143,205,2,0,1,19,70,0,0, 
  0,196,0,0,0,1,0,17,1,143,205,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,143,205,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,143,205,2,0,1,19,44,0,0,0,120,0,0,0,1, 
  0,17,1,143,205,2,0,1,15,1,143,205,2,0,17,1,36,172,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,143,205,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,143,205,2,0,1,15,1,143, 
  205,2,0,17,1,148,209,2,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,143,205,2,0,1,15,1,143,205,2,0,17,1,120,194,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,143,205,2,0,1,15, 
  1,143,205,2,0,17,1,37,207,2,0,1,15,1,143,205,2,0,17,1,238,206,2,0,1,2,21,1,54,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128, 
  11,56,1,128,8,4,19,128,0,0,0,113,1,0,0,6,0,14,14,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8, 
  4,17,1,96,207,2,0,1,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32, 
  6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,112,208,2,0,17,1,76,231,2,0,1,4,15,1, 
  112,208,2,0,17,1,212,148,2,0,1,4,15,1,112,208,2,0,17,1,130,229,2,0,1,4,15,1,112,208,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,112,208,2,0,1,4,19, 
  73,0,0,0,203,0,0,0,1,0,17,1,112,208,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,112,208,2,0,1,4,15,1,112,208,2,0,17,1,124,92,2,0,1,4,15,1,112,208,2,0,17,1,25, 
  92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,112,208,2,0,1,4,15,1,112,208,2,0,17,1,182,91,2,0,1,4,15,1,112,208,2,0,17,1,153,152,2,0,1,2,21,0,35,1,0,0,255,255, 
  255,255,15,0,0,0,3,0,0,0,72,16,198,130,73,136,72,131,106,104,7,128,19,248,67,129,44,144,4,130,38,8,7,129,14,248,195,127,71,240,4,128,43,0,131,128,70,0,4,128,91,128,5,128,96,120,134,128,100,248, 
  7,128,104,112,2,128,105,104,3,128,19,72,0,0,0,200,0,0,0,1,0,17,1,112,208,2,0,1,15,1,112,208,2,0,17,1,218,179,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,112,208,2,0,1,1, 
  19,44,0,0,0,118,0,0,0,1,0,17,1,112,208,2,0,1,19,14,0,0,0,44,0,0,0,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,112,208,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17, 
  1,112,208,2,0,1,15,1,112,208,2,0,17,1,217,155,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,112,208,2,0,1,19,19,0,0,0,56,0,0,0,3,0,1,19,71,0,0,0,199,0,0,0,1,0, 
  17,1,112,208,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,112,208,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,112,208,2,0,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0, 
  0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,207,209,2,0,1,8,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0, 
  0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8, 
  128,47,152,7,128,8,4,15,1,223,210,2,0,17,1,76,231,2,0,1,4,15,1,223,210,2,0,17,1,212,148,2,0,1,4,15,1,223,210,2,0,17,1,130,229,2,0,1,4,15,1,223,210,2,0,17,1,223,92,2, 
  0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,223,210,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,223,210,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,223,210,2,0,1,4, 
  15,1,223,210,2,0,17,1,124,92,2,0,1,4,15,1,223,210,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,223,210,2,0,1,4,15,1,223,210,2,0,17,1,182,91,2,0,1, 
  4,15,1,223,210,2,0,17,1,100,162,2,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201, 
  127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,223,210,2,0,1,19,71,0,0,0,198,0,0,0, 
  1,0,17,1,223,210,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,223,210,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,223,210,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,223,210, 
  2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,223,210,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,223,210,2,0,1,15,1,223,210,2,0,17,1,112,171,2,0,1,19,44,0,0,0,119,0,0, 
  0,1,0,17,1,223,210,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,223,210,2,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,223,210,2,0,17,1,70,185,2,0,1,19,15,0,0,0,50,0, 
  0,0,1,0,17,1,223,210,2,0,1,15,1,223,210,2,0,17,1,22,212,2,0,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128, 
  13,48,1,128,4,17,1,82,212,2,0,1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128, 
  103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,98,213,2,0,17,1,76,231, 
  2,0,1,4,15,1,98,213,2,0,17,1,212,148,2,0,1,4,15,1,98,213,2,0,17,1,130,229,2,0,1,4,15,1,98,213,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,98, 
  213,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,98,213,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,98,213,2,0,1,4,15,1,98,213,2,0,17,1,124,92,2,0,1,4,15,1,98, 
  213,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,98,213,2,0,1,4,15,1,98,213,2,0,17,1,182,91,2,0,1,4,15,1,98,213,2,0,17,1,151,95,2,0,1,2,21,0, 
  36,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,112,194,130,73,144,68,131,106,40,8,128,43,184,200,129,44,192,7,130,38,32,197,128,14,104,195,127,15,104,131,128,70,112,3,128,71,0,4,128,91,216,2,128, 
  96,48,135,128,100,16,6,128,104,128,5,128,105,160,6,128,15,1,98,213,2,0,17,1,217,155,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,98,213,2,0,1,1,19,44,0,0,0,118,0,0,0,1,0,17, 
  1,98,213,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,98,213,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,98,213,2,0,1,19,15,0,0,0,51,0,0,0,3,0,1,19,72,0,0,0,200, 
  0,0,0,1,0,17,1,98,213,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,98,213,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,98,213,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17, 
  1,98,213,2,0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,19,71,0,0,0,199,0,0,0,1,0,17,1,98,213,2,0,1,15,1,98,213,2,0,17,1,166,199,2,0,1,2,21,0,61,0,0,0,255,255,255, 
  255,3,0,0,0,1,0,0,0,96,224,129,128,99,128,1,128,128,240,0,128,19,99,0,0,0,36,1,0,0,1,0,17,1,135,214,2,0,1,19,96,0,0,0,26,1,0,0,4,0,1,1,2,21,1,71,0,0,0,207, 
  123,3,0,6,0,0,0,2,0,0,0,6,80,1,129,1,80,1,128,2,80,129,127,7,80,129,128,10,200,1,128,31,88,1,128,8,4,15,1,68,229,2,0,17,1,170,216,2,0,1,4,15,1,68,229,2,0,17,1,13, 
  215,2,0,1,2,21,1,107,0,0,0,41,120,3,0,8,0,0,0,3,0,0,0,10,232,2,128,1,144,1,128,2,144,129,127,131,8,2,128,132,152,1,128,31,120,2,128,6,144,1,128,7,144,129,127,8,4,15,1,121, 
  215,2,0,17,1,54,186,2,0,1,4,15,1,121,215,2,0,17,1,216,172,2,0,1,4,15,1,121,215,2,0,17,1,170,216,2,0,1,4,15,1,121,215,2,0,17,1,81,94,2,0,1,2,21,0,106,0,0,0,255, 
  255,255,255,5,0,0,0,2,0,0,0,126,80,2,128,129,48,1,128,102,232,130,127,103,224,66,128,127,192,1,128,19,102,0,0,0,42,1,0,0,1,0,17,1,121,215,2,0,1,19,102,0,0,0,43,1,0,0,1,0, 
  17,1,121,215,2,0,1,19,102,0,0,0,44,1,0,0,1,0,17,1,121,215,2,0,1,1,15,1,121,215,2,0,17,1,228,215,2,0,1,2,21,1,125,0,0,0,77,123,3,0,9,0,0,0,3,0,0,0,10,120, 
  3,128,1,176,1,128,2,176,129,127,11,8,67,129,132,184,1,128,31,152,2,128,6,176,1,128,7,176,129,127,131,40,2,128,8,4,15,1,98,216,2,0,17,1,54,186,2,0,1,4,15,1,98,216,2,0,17,1,216,172, 
  2,0,1,4,15,1,98,216,2,0,17,1,170,216,2,0,1,4,19,103,0,0,0,49,1,0,0,3,0,14,1,4,15,1,98,216,2,0,17,1,81,94,2,0,1,2,21,0,71,0,0,0,255,255,255,255,4,0,0,0, 
  2,0,0,0,126,208,1,128,129,16,1,128,102,48,130,127,127,112,1,128,19,102,0,0,0,45,1,0,0,2,0,1,19,102,0,0,0,46,1,0,0,2,0,1,19,102,0,0,0,47,1,0,0,2,0,1,1,2,21,1, 
  135,0,0,0,158,124,3,0,9,0,0,0,3,0,0,0,112,232,2,128,1,176,1,129,2,176,1,128,110,88,3,128,76,200,3,128,129,80,2,128,6,176,65,127,7,176,65,128,135,184,1,128,8,4,19,130,0,0,0,115, 
  1,0,0,1,0,17,1,15,218,2,0,1,4,19,121,0,0,0,104,1,0,0,1,0,17,1,15,218,2,0,1,4,15,1,15,218,2,0,17,1,185,242,0,0,1,4,15,1,15,218,2,0,17,1,50,217,2,0,1,4, 
  15,1,15,218,2,0,17,1,40,12,0,0,1,2,21,1,68,0,0,0,92,38,3,0,4,0,0,0,2,0,0,0,41,24,1,128,1,16,193,127,2,16,1,128,31,176,1,128,8,4,19,37,0,0,0,101,0,0,0,1, 
  0,17,1,119,217,2,0,1,4,15,1,119,217,2,0,17,1,116,10,0,0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,37,40,2,129,13,144,194,127,110,48,1,128,79,56,1,128,61,200,1, 
  128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,119,217,2,0,1,19,110,0,0,0,58,1,0,0,2,0,1,15,1,119,217,2,0,17,1,220,217,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,119,217, 
  2,0,1,2,21,1,39,0,0,0,197,167,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,150,0,0, 
  0,255,255,255,255,7,0,0,0,2,0,0,0,110,40,131,129,109,184,195,128,74,72,132,127,111,152,2,128,121,8,66,128,129,0,2,128,130,112,1,128,19,109,0,0,0,57,1,0,0,1,0,17,1,15,218,2,0,1,1, 
  19,109,0,0,0,56,1,0,0,1,0,17,1,15,218,2,0,1,19,74,0,0,0,208,0,0,0,1,0,17,1,15,218,2,0,1,19,74,0,0,0,207,0,0,0,1,0,17,1,15,218,2,0,1,19,74,0,0,0,206, 
  0,0,0,1,0,17,1,15,218,2,0,1,15,1,15,218,2,0,17,1,166,218,2,0,1,2,21,1,47,0,0,0,9,37,3,0,5,0,0,0,2,0,0,0,32,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128, 
  6,48,1,128,8,4,17,1,214,218,2,0,1,2,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56,1,128,8,4,17,1,6,219,2,0, 
  1,2,21,1,69,1,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80,5,128,73,232,5,128, 
  58,240,134,127,59,128,70,129,108,104,3,128,109,248,2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,76,220,2,0,17,1,76,231,2,0,1,4,15,1,76,220,2,0,17,1, 
  212,148,2,0,1,4,15,1,76,220,2,0,17,1,130,229,2,0,1,4,15,1,76,220,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,76,220,2,0,1,4,19,73,0,0,0,203,0, 
  0,0,1,0,17,1,76,220,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,76,220,2,0,1,4,15,1,76,220,2,0,17,1,151,127,1,0,1,4,15,1,76,220,2,0,17,1,81,127,1,0,1,4,15, 
  1,76,220,2,0,17,1,185,126,1,0,1,4,15,1,76,220,2,0,17,1,124,92,2,0,1,4,15,1,76,220,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,76,220,2,0,1,4, 
  15,1,76,220,2,0,17,1,182,91,2,0,1,4,15,1,76,220,2,0,17,1,78,174,2,0,1,2,21,0,94,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,96,248,4,128,129,176,2,128,70,160,7,128,19,32, 
  10,128,100,104,4,128,91,136,5,128,38,144,9,127,71,16,7,128,72,168,198,129,73,24,198,129,106,184,2,128,43,40,137,126,44,152,8,128,45,48,8,128,14,136,10,128,104,216,3,128,105,72,3,128,1,19,71,0,0,0, 
  199,0,0,0,1,0,17,1,76,220,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,76,220,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,76,220,2,0,1,19,70,0,0,0,196,0,0,0,1,0, 
  17,1,76,220,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,76,220,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,76,220,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,76,220,2,0, 
  1,15,1,76,220,2,0,17,1,130,185,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,76,220,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,76,220,2,0,1,15,1,76,220,2,0,17,1,81,224, 
  2,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,76,220,2,0,1,15,1,76,220,2,0,17,1,46,159,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,76,220,2,0,1,15,1,76,220,2,0,17,1, 
  226,221,2,0,1,15,1,76,220,2,0,17,1,171,221,2,0,1,2,21,1,54,0,0,0,80,122,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,1,128,2,48,129,127,7,48,65,128,11,56,1,128,8,4,19, 
  129,0,0,0,114,1,0,0,6,0,14,14,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,29,222,2,0,1, 
  8,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7, 
  144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,45,223,2,0,17,1,76,231,2,0,1,4,15,1,45,223,2,0,17,1,212, 
  148,2,0,1,4,15,1,45,223,2,0,17,1,130,229,2,0,1,4,15,1,45,223,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,45,223,2,0,1,4,19,73,0,0,0,203,0,0, 
  0,1,0,17,1,45,223,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,45,223,2,0,1,4,15,1,45,223,2,0,17,1,124,92,2,0,1,4,15,1,45,223,2,0,17,1,25,92,2,0,1,4,19,38, 
  0,0,0,112,0,0,0,1,0,17,1,45,223,2,0,1,4,15,1,45,223,2,0,17,1,182,91,2,0,1,4,15,1,45,223,2,0,17,1,153,152,2,0,1,2,21,0,35,1,0,0,255,255,255,255,15,0,0,0,3, 
  0,0,0,72,112,194,130,73,0,71,131,106,216,2,128,19,104,67,129,44,16,6,130,38,32,5,129,14,104,195,127,71,144,4,128,43,176,136,128,70,112,6,128,91,112,3,128,96,32,136,128,100,144,7,128,104,128,5,128,105, 
  0,4,128,15,1,45,223,2,0,17,1,217,155,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,45,223,2,0,1,1,19,70,0,0,0,194,0,0,0,1,0,17,1,45,223,2,0,1,19,71,0,0,0,198,0, 
  0,0,1,0,17,1,45,223,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,45,223,2,0,1,19,19,0,0,0,56,0,0,0,3,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,45,223,2,0,1,19, 
  14,0,0,0,44,0,0,0,3,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,45,223,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,45,223,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1, 
  45,223,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,45,223,2,0,1,15,1,45,223,2,0,17,1,218,179,2,0,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1, 
  112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,140,224,2,0,1,8,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144, 
  194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4, 
  15,1,156,225,2,0,17,1,76,231,2,0,1,4,15,1,156,225,2,0,17,1,212,148,2,0,1,4,15,1,156,225,2,0,17,1,130,229,2,0,1,4,15,1,156,225,2,0,17,1,223,92,2,0,1,4,19,73,0,0, 
  0,204,0,0,0,1,0,17,1,156,225,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,156,225,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,156,225,2,0,1,4,15,1,156,225,2,0,17, 
  1,124,92,2,0,1,4,15,1,156,225,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,156,225,2,0,1,4,15,1,156,225,2,0,17,1,182,91,2,0,1,4,15,1,156,225,2,0, 
  17,1,100,162,2,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88, 
  7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,156,225,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,156,225,2, 
  0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,156,225,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,156,225,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,156,225,2,0,1,19,70,0,0, 
  0,194,0,0,0,1,0,17,1,156,225,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,156,225,2,0,1,15,1,156,225,2,0,17,1,112,171,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,156,225, 
  2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,156,225,2,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,156,225,2,0,17,1,131,169,2,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,156, 
  225,2,0,1,15,1,156,225,2,0,17,1,211,226,2,0,1,1,2,21,1,47,0,0,0,101,167,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17, 
  1,15,227,2,0,1,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6, 
  128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,31,228,2,0,17,1,76,231,2,0,1,4,15,1,31, 
  228,2,0,17,1,212,148,2,0,1,4,15,1,31,228,2,0,17,1,130,229,2,0,1,4,15,1,31,228,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,31,228,2,0,1,4,19,73, 
  0,0,0,203,0,0,0,1,0,17,1,31,228,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,31,228,2,0,1,4,15,1,31,228,2,0,17,1,124,92,2,0,1,4,15,1,31,228,2,0,17,1,25,92, 
  2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,31,228,2,0,1,4,15,1,31,228,2,0,17,1,182,91,2,0,1,4,15,1,31,228,2,0,17,1,151,95,2,0,1,2,21,0,36,1,0,0,255,255,255, 
  255,15,0,0,0,3,0,0,0,72,184,200,130,73,200,71,131,106,72,5,128,43,96,199,129,44,104,6,130,38,88,200,128,14,32,196,127,15,32,132,128,70,216,5,128,71,184,4,128,91,40,4,128,96,112,130,128,100,144,3, 
  128,104,208,6,128,105,0,3,128,19,70,0,0,0,195,0,0,0,1,0,17,1,31,228,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,31,228,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,31,228, 
  2,0,1,1,19,70,0,0,0,194,0,0,0,1,0,17,1,31,228,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,31,228,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,31,228,2,0,1,19,44, 
  0,0,0,118,0,0,0,1,0,17,1,31,228,2,0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,19,72,0,0,0,200,0,0,0,1,0,17,1,31,228,2,0,1,15,1,31,228,2,0,17,1,148,167,2,0,1, 
  19,44,0,0,0,120,0,0,0,1,0,17,1,31,228,2,0,1,19,15,0,0,0,51,0,0,0,3,0,1,15,1,31,228,2,0,17,1,217,155,2,0,1,2,21,0,61,0,0,0,255,255,255,255,3,0,0,0,1,0, 
  0,0,100,224,1,128,103,128,65,128,129,240,0,128,19,103,0,0,0,48,1,0,0,1,0,17,1,68,229,2,0,1,19,100,0,0,0,38,1,0,0,4,0,1,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0, 
  2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,207,229,2,0,1,4,15,1,207,229,2,0,17,1,116,10,0, 
  0,1,2,21,0,100,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,104,48,1,128,13,144,66,128,37,40,130,128,79,56,1,128,61,200,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,207,229,2,0,1, 
  19,104,0,0,0,50,1,0,0,2,0,1,15,1,207,229,2,0,17,1,52,230,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,207,229,2,0,1,2,21,1,39,0,0,0,25,168,3,0,3,0,0,0,1,0, 
  0,0,2,48,1,128,1,48,65,128,79,240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1, 
  129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,180,230,2,0,1,4,15,1,180,230,2,0,17,1,116,10,0,0,1,2,21,0,100,0,0,0,255,255, 
  255,255,5,0,0,0,2,0,0,0,37,40,130,128,13,144,194,127,61,200,129,128,79,56,1,128,105,48,1,128,1,19,61,0,0,0,167,0,0,0,1,0,17,1,180,230,2,0,1,19,105,0,0,0,51,1,0,0,2,0, 
  1,15,1,180,230,2,0,17,1,25,231,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,180,230,2,0,1,2,21,1,39,0,0,0,110,168,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79, 
  240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,1,47,0,0,0,164,122,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,10,56, 
  1,128,8,4,17,1,124,231,2,0,1,2,21,1,76,0,0,0,46,124,3,0,6,0,0,0,2,0,0,0,6,80,1,128,1,80,1,129,2,80,129,127,7,80,65,128,31,240,1,128,41,88,1,128,8,4,19,37,0,0, 
  0,101,0,0,0,1,0,17,1,201,231,2,0,1,4,15,1,201,231,2,0,17,1,116,10,0,0,1,2,21,0,145,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,108,112,1,128,13,248,195,128,106,104,2,128,79, 
  112,194,128,37,144,67,128,61,0,3,128,107,216,1,128,15,1,201,231,2,0,17,1,91,232,2,0,1,19,108,0,0,0,54,1,0,0,1,0,17,1,201,231,2,0,1,1,19,61,0,0,0,167,0,0,0,1,0,17,1, 
  201,231,2,0,1,19,107,0,0,0,53,1,0,0,1,0,17,1,201,231,2,0,1,15,1,201,231,2,0,17,1,244,159,1,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,201,231,2,0,1,2,21,1,94,0,0, 
  0,67,127,3,0,7,0,0,0,2,0,0,0,6,112,1,128,1,112,65,129,2,112,129,127,7,112,65,128,11,128,66,128,31,16,2,128,41,120,1,128,8,4,19,37,0,0,0,101,0,0,0,1,0,17,1,186,232,2,0, 
  1,4,15,1,186,232,2,0,17,1,116,10,0,0,1,4,19,106,0,0,0,52,1,0,0,4,0,14,1,2,21,0,122,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,108,80,1,128,13,64,67,128,37,216,130,128, 
  79,184,129,128,61,72,2,128,107,88,1,128,1,19,108,0,0,0,55,1,0,0,2,0,1,19,61,0,0,0,167,0,0,0,1,0,17,1,186,232,2,0,1,19,107,0,0,0,53,1,0,0,1,0,17,1,186,232,2,0, 
  1,15,1,186,232,2,0,17,1,53,233,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,186,232,2,0,1,2,21,1,39,0,0,0,200,126,3,0,3,0,0,0,1,0,0,0,2,48,1,128,1,48,65,128,79, 
  240,0,128,4,17,1,206,8,0,0,1,8,19,13,0,0,0,34,0,0,0,1,0,1,21,0,93,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,0,224,74,129,70,152,7,128,91,128,5,128,19,24,10,128,100,96, 
  4,128,96,240,4,128,38,136,201,126,71,8,7,128,72,160,198,129,73,16,198,129,106,176,2,128,43,32,201,125,44,144,8,128,45,40,8,128,14,128,10,128,104,208,3,128,105,64,3,128,19,71,0,0,0,199,0,0,0,1, 
  0,17,1,104,233,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,104,233,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,104,233,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,104,233,2, 
  0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,104,233,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,104,233,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,104,233,2,0,1,15,1,104,233, 
  2,0,17,1,20,0,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,104,233,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,104,233,2,0,1,15,1,104,233,2,0,17,1,85,244,2,0,1,19,14, 
  0,0,0,48,0,0,0,1,0,17,1,104,233,2,0,1,15,1,104,233,2,0,17,1,106,242,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,104,233,2,0,1,15,1,104,233,2,0,17,1,198,234,2,0,1, 
  19,0,0,0,0,0,0,0,0,3,0,1,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,1,235,2,0,1, 
  8,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7, 
  144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,225,238,2,0,17,1,76,231,2,0,1,4,15,1,225,238,2,0,17,1,103, 
  230,2,0,1,4,15,1,225,238,2,0,17,1,130,229,2,0,1,4,15,1,225,238,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,225,238,2,0,1,4,19,73,0,0,0,203,0,0, 
  0,1,0,17,1,225,238,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,225,238,2,0,1,4,15,1,225,238,2,0,17,1,124,92,2,0,1,4,15,1,225,238,2,0,17,1,25,92,2,0,1,4,19,38, 
  0,0,0,112,0,0,0,1,0,17,1,225,238,2,0,1,4,15,1,225,238,2,0,17,1,182,91,2,0,1,4,15,1,225,238,2,0,17,1,17,236,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2, 
  0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,76,236,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,38,56,1,128,69,208,0,128,15,1,76,236,2,0,17,1,117,236,2,0,1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41, 
  112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,45,238,2,0,1,4,17,1,229,236,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,45,238,2, 
  0,1,4,15,1,45,238,2,0,17,1,116,10,0,0,1,2,21,1,47,0,0,0,10,105,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17,1,21, 
  237,2,0,1,2,21,1,99,0,0,0,125,105,3,0,7,0,0,0,2,0,0,0,72,120,1,128,1,112,65,129,2,112,129,128,7,112,129,128,6,112,1,128,31,168,2,128,41,16,2,128,8,4,19,69,0,0,0,193,0, 
  0,0,1,0,17,1,121,237,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,121,237,2,0,1,4,15,1,121,237,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2, 
  0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,121,237,2,0,1,15,1,121,237,2,0,17,1,10,81,2,0,1,15,1, 
  121,237,2,0,17,1,240,237,2,0,1,1,15,1,121,237,2,0,17,1,114,37,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,121,237,2,0,1,2,21,1,47,0,0,0,132,161,3,0,5,0,0,0,2,0, 
  0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,45,56,1,128,8,4,17,1,226,37,2,0,1,19,38,0,0,0,108,0,0,0,5,0,14,14,1,21,0,118,0,0,0,255,255,255,255,6,0,0,0,2, 
  0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,45,238,2,0,1,15,1,45,238,2,0,17,1,176,90,2,0,1,15,1, 
  45,238,2,0,17,1,164,238,2,0,1,1,15,1,45,238,2,0,17,1,114,37,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,45,238,2,0,1,2,21,1,47,0,0,0,132,161,3,0,5,0,0,0,2,0, 
  0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,45,56,1,128,8,4,17,1,196,82,2,0,1,19,38,0,0,0,109,0,0,0,3,0,14,14,1,21,0,35,1,0,0,255,255,255,255,15,0,0,0,3, 
  0,0,0,72,112,198,130,73,96,67,131,106,80,5,128,19,80,68,129,44,240,3,130,38,112,2,129,14,80,196,127,71,88,4,128,43,232,132,128,70,216,6,128,91,208,2,128,96,224,133,128,100,248,7,128,104,136,8,128,105, 
  104,7,128,19,19,0,0,0,56,0,0,0,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,225,238,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,225,238,2,0,1,19,14,0,0,0,44,0,0,0, 
  3,0,1,1,19,44,0,0,0,119,0,0,0,1,0,17,1,225,238,2,0,1,15,1,225,238,2,0,17,1,125,240,2,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,225,238,2,0,1,19,70,0,0,0,195,0, 
  0,0,1,0,17,1,225,238,2,0,1,15,1,225,238,2,0,17,1,5,240,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,225,238,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,225,238,2,0,1, 
  19,70,0,0,0,196,0,0,0,1,0,17,1,225,238,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,225,238,2,0,1,2,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1, 
  48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,53,240,2,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6, 
  80,1,128,107,200,1,128,8,4,15,1,156,172,2,0,17,1,103,230,2,0,1,4,15,1,156,172,2,0,17,1,130,229,2,0,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1, 
  112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,185,240,2,0,1,8,19,14,0,0,0,45,0,0,0,3,0,14,1,21,1,176,0,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73,232,4,128,1, 
  240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,106,241,2,0,17,1,76,231,2,0,1,4,15,1,106,241,2, 
  0,17,1,103,230,2,0,1,4,15,1,106,241,2,0,17,1,130,229,2,0,1,4,15,1,106,241,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,106,241,2,0,1,4,19,73,0,0, 
  0,203,0,0,0,1,0,17,1,106,241,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,106,241,2,0,1,2,21,0,255,0,0,0,255,255,255,255,12,0,0,0,3,0,0,0,72,0,6,130,73,112,133,130, 
  106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,240,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1,0,17,1,106,241,2,0,1,19,71, 
  0,0,0,198,0,0,0,1,0,17,1,106,241,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,106,241,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,106,241,2,0,1,19,70,0,0,0,195,0,0, 
  0,1,0,17,1,106,241,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,106,241,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,106,241,2,0,1,15,1,106,241,2,0,17,1,5,240,2,0,1,19, 
  44,0,0,0,119,0,0,0,1,0,17,1,106,241,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,106,241,2,0,1,19,14,0,0,0,43,0,0,0,5,0,14,1,1,2,21,1,47,0,0,0,234,168,3,0, 
  5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,165,242,2,0,1,19,14,0,0,0,49,0,0,0,1,0,1,21,1,176,0,0,0,55,109,3,0,11, 
  0,0,0,3,0,0,0,73,232,4,128,1,240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,86,243,2,0,17, 
  1,76,231,2,0,1,4,15,1,86,243,2,0,17,1,103,230,2,0,1,4,15,1,86,243,2,0,17,1,130,229,2,0,1,4,15,1,86,243,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0, 
  17,1,86,243,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,86,243,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,86,243,2,0,1,2,21,0,254,0,0,0,255,255,255,255,12,0,0,0, 
  3,0,0,0,72,0,6,130,73,112,133,130,106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,232,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0, 
  0,1,0,17,1,86,243,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,86,243,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,86,243,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,86, 
  243,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,86,243,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,86,243,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,86,243,2,0,1,15,1, 
  86,243,2,0,17,1,5,240,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,86,243,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,86,243,2,0,1,19,14,0,0,0,47,0,0,0,3,0,1,1, 
  2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,144,244,2,0,1,8,19,14,0,0,0,42,0,0,0,1,0,1, 
  21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240, 
  4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,116,246,2,0,17,1,76,231,2,0,1,4,15,1,116,246,2,0,17,1,103,230,2,0,1,4,15,1,116,246,2,0,17,1, 
  130,229,2,0,1,4,15,1,116,246,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,116,246,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,116,246,2,0,1,4,19,73, 
  0,0,0,202,0,0,0,1,0,17,1,116,246,2,0,1,4,15,1,116,246,2,0,17,1,124,92,2,0,1,4,15,1,116,246,2,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,116,246, 
  2,0,1,4,15,1,116,246,2,0,17,1,182,91,2,0,1,4,15,1,116,246,2,0,17,1,160,245,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0,0,2,0,0,0,72,56,1,128,1,48,1,128,2,48, 
  129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,219,245,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,38,56,1,128,69,208,0,128,15,1,219, 
  245,2,0,17,1,4,246,2,0,1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3,128,41,112,2,128,72,152,1,128,6,144,1,128,7,144, 
  1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,16,82,2,0,1,4,17,1,229,236,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,16,82,2,0,1,4,15,1,16,82,2,0,17,1,116,10, 
  0,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128,14,168,201,127,15,64,137,128,70,88,7,128,71,200, 
  6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,116,246,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,116,246,2,0,1,19,72, 
  0,0,0,200,0,0,0,1,0,17,1,116,246,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,116,246,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,116,246,2,0,1,19,70,0,0,0,194,0,0, 
  0,1,0,17,1,116,246,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,116,246,2,0,1,15,1,116,246,2,0,17,1,5,240,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,116,246,2,0,1,19, 
  44,0,0,0,118,0,0,0,1,0,17,1,116,246,2,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,116,246,2,0,17,1,39,254,2,0,1,19,15,0,0,0,50,0,0,0,1,0,17,1,116,246,2,0,1, 
  15,1,116,246,2,0,17,1,171,247,2,0,1,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,231,247,2,0, 
  1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2, 
  128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,19,251,2,0,17,1,76,231,2,0,1,4,15,1,19,251,2,0,17, 
  1,103,230,2,0,1,4,15,1,19,251,2,0,17,1,130,229,2,0,1,4,15,1,19,251,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,19,251,2,0,1,4,19,73,0,0,0,203, 
  0,0,0,1,0,17,1,19,251,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,19,251,2,0,1,4,15,1,19,251,2,0,17,1,124,92,2,0,1,4,15,1,19,251,2,0,17,1,25,92,2,0,1,4, 
  19,38,0,0,0,112,0,0,0,1,0,17,1,19,251,2,0,1,4,15,1,19,251,2,0,17,1,182,91,2,0,1,4,15,1,19,251,2,0,17,1,247,248,2,0,1,2,21,1,58,0,0,0,7,25,3,0,5,0,0, 
  0,2,0,0,0,72,56,1,128,1,48,1,128,2,48,129,128,7,48,1,128,6,48,1,128,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,50,249,2,0,1,2,21,0,40,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,38,56,1,128,69,208,0,128,15,1,50,249,2,0,17,1,91,249,2,0,1,1,2,21,1,111,0,0,0,128,25,3,0,8,0,0,0,3,0,0,0,48,48,66,129,1,144,193,128,2,144,1,128,31,8,3, 
  128,41,112,2,128,72,152,1,128,6,144,1,128,7,144,1,127,8,4,19,69,0,0,0,193,0,0,0,1,0,17,1,45,238,2,0,1,4,17,1,203,249,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,45, 
  238,2,0,1,4,15,1,45,238,2,0,17,1,116,10,0,0,1,2,21,1,47,0,0,0,10,105,3,0,5,0,0,0,2,0,0,0,6,48,1,129,1,48,1,128,2,48,129,127,7,48,1,128,42,56,1,128,8,4,17, 
  1,251,249,2,0,1,2,21,1,99,0,0,0,125,105,3,0,7,0,0,0,2,0,0,0,72,120,1,128,1,112,65,129,2,112,129,128,7,112,129,128,6,112,1,128,31,168,2,128,41,16,2,128,8,4,19,69,0,0,0, 
  193,0,0,0,1,0,17,1,95,250,2,0,1,4,19,37,0,0,0,101,0,0,0,1,0,17,1,95,250,2,0,1,4,15,1,95,250,2,0,17,1,116,10,0,0,1,2,21,0,118,0,0,0,255,255,255,255,6,0,0, 
  0,2,0,0,0,37,184,2,129,13,32,195,127,38,176,2,128,79,80,1,128,61,72,66,128,69,224,1,128,19,61,0,0,0,167,0,0,0,1,0,17,1,95,250,2,0,1,15,1,95,250,2,0,17,1,10,81,2,0,1, 
  15,1,95,250,2,0,17,1,214,250,2,0,1,1,15,1,95,250,2,0,17,1,114,37,2,0,1,19,61,0,0,0,166,0,0,0,1,0,17,1,95,250,2,0,1,2,21,1,47,0,0,0,132,161,3,0,5,0,0,0, 
  2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,45,48,1,128,4,17,1,226,37,2,0,1,8,19,38,0,0,0,108,0,0,0,5,0,14,14,1,21,0,36,1,0,0,255,255,255,255,15,0,0, 
  0,3,0,0,0,72,160,198,130,73,144,68,131,106,8,7,128,43,40,200,129,44,40,4,130,38,32,197,128,14,32,196,127,15,32,132,128,70,112,2,128,71,144,8,128,91,144,3,128,96,128,133,128,100,152,7,128,104,16,6, 
  128,105,0,3,128,19,44,0,0,0,118,0,0,0,1,0,17,1,19,251,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,19,251,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,19,251,2,0,1,1, 
  19,14,0,0,0,37,0,0,0,5,0,14,1,19,44,0,0,0,120,0,0,0,1,0,17,1,19,251,2,0,1,19,15,0,0,0,51,0,0,0,3,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,19,251,2,0, 
  1,19,72,0,0,0,200,0,0,0,1,0,17,1,19,251,2,0,1,15,1,19,251,2,0,17,1,20,0,3,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,19,251,2,0,1,19,70,0,0,0,196,0,0,0,1, 
  0,17,1,19,251,2,0,1,15,1,19,251,2,0,17,1,56,252,2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,19,251,2,0,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112, 
  1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,117,252,2,0,1,8,19,14,0,0,0,39,0,0,0,5,0,14,14,1,21,1,176,0,0,0,55,109,3,0,11,0,0,0,3,0,0,0,73, 
  232,4,128,1,240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15,1,38,253,2,0,17,1,76,231,2,0,1,4,15, 
  1,38,253,2,0,17,1,103,230,2,0,1,4,15,1,38,253,2,0,17,1,130,229,2,0,1,4,15,1,38,253,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,38,253,2,0,1,4, 
  19,73,0,0,0,203,0,0,0,1,0,17,1,38,253,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,38,253,2,0,1,2,21,0,0,1,0,0,255,255,255,255,12,0,0,0,3,0,0,0,72,0,6,130, 
  73,112,133,130,106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,248,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71,0,0,0,199,0,0,0,1,0,17,1,38,253,2, 
  0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,38,253,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,38,253,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,38,253,2,0,1,19,70,0,0, 
  0,195,0,0,0,1,0,17,1,38,253,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,38,253,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,38,253,2,0,1,15,1,38,253,2,0,17,1,5,240, 
  2,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,38,253,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,38,253,2,0,1,19,14,0,0,0,35,0,0,0,7,0,14,14,1,1,2,21,1,47,0,0, 
  0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,99,254,2,0,1,8,19,14,0,0,0,40,0,0,0,3,0,14,1,21,1,176,0,0, 
  0,55,109,3,0,11,0,0,0,3,0,0,0,73,232,4,128,1,240,193,127,2,240,129,129,75,184,195,129,108,104,2,128,109,248,1,128,6,240,1,128,7,240,129,128,74,80,4,128,103,72,3,128,107,216,2,128,8,4,15, 
  1,20,255,2,0,17,1,76,231,2,0,1,4,15,1,20,255,2,0,17,1,103,230,2,0,1,4,15,1,20,255,2,0,17,1,130,229,2,0,1,4,15,1,20,255,2,0,17,1,223,92,2,0,1,4,19,73,0,0,0, 
  204,0,0,0,1,0,17,1,20,255,2,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,20,255,2,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,20,255,2,0,1,2,21,0,255,0,0,0,255,255, 
  255,255,12,0,0,0,3,0,0,0,72,0,6,130,73,112,133,130,106,16,2,128,91,224,4,128,44,136,71,129,70,248,6,128,14,240,199,127,71,104,6,128,96,80,132,128,100,192,3,128,104,48,3,128,105,160,2,128,19,71, 
  0,0,0,199,0,0,0,1,0,17,1,20,255,2,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,20,255,2,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,20,255,2,0,1,19,70,0,0,0,196,0,0, 
  0,1,0,17,1,20,255,2,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,20,255,2,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,20,255,2,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,20, 
  255,2,0,1,15,1,20,255,2,0,17,1,20,0,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,20,255,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,20,255,2,0,1,19,14,0,0,0,36,0, 
  0,0,5,0,14,1,1,2,21,1,47,0,0,0,231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,68,0,3,0,1,2,21,1,71,0, 
  0,0,152,110,3,0,6,0,0,0,2,0,0,0,108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,250,185,2,0,17,1,103,230,2,0,1,4,15,1,250,185,2,0, 
  17,1,130,229,2,0,1,2,21,1,69,1,0,0,79,18,3,0,19,0,0,0,4,0,0,0,49,176,8,128,1,240,194,127,2,240,66,128,50,64,8,128,55,96,71,131,53,208,7,128,6,240,2,128,7,240,66,127,74,80, 
  5,128,73,232,5,128,58,240,134,127,59,128,70,129,108,104,3,128,109,248,2,128,46,184,9,128,47,72,9,128,75,184,132,128,103,72,4,128,107,216,3,128,8,4,15,1,210,1,3,0,17,1,76,231,2,0,1,4,15,1, 
  210,1,3,0,17,1,103,230,2,0,1,4,15,1,210,1,3,0,17,1,130,229,2,0,1,4,15,1,210,1,3,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,210,1,3,0,1,4,19, 
  73,0,0,0,203,0,0,0,1,0,17,1,210,1,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,210,1,3,0,1,4,15,1,210,1,3,0,17,1,151,127,1,0,1,4,15,1,210,1,3,0,17,1,81, 
  127,1,0,1,4,15,1,210,1,3,0,17,1,185,126,1,0,1,4,15,1,210,1,3,0,17,1,124,92,2,0,1,4,15,1,210,1,3,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1, 
  210,1,3,0,1,4,15,1,210,1,3,0,17,1,182,91,2,0,1,4,15,1,210,1,3,0,17,1,160,245,2,0,1,2,21,0,93,1,0,0,255,255,255,255,17,0,0,0,4,0,0,0,0,224,74,129,70,152,7,128, 
  91,128,5,128,19,24,10,128,100,96,4,128,96,240,4,128,38,136,201,126,71,8,7,128,72,160,198,129,73,16,198,129,106,176,2,128,43,32,201,125,44,144,8,128,45,40,8,128,14,128,10,128,104,208,3,128,105,64,3,128, 
  19,71,0,0,0,199,0,0,0,1,0,17,1,210,1,3,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,210,1,3,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,210,1,3,0,1,19,70,0,0,0,196, 
  0,0,0,1,0,17,1,210,1,3,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,210,1,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,210,1,3,0,1,19,44,0,0,0,120,0,0,0,1,0,17, 
  1,210,1,3,0,1,15,1,210,1,3,0,17,1,206,10,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,210,1,3,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,210,1,3,0,1,15,1,210,1,3, 
  0,17,1,219,5,3,0,1,19,14,0,0,0,48,0,0,0,1,0,17,1,210,1,3,0,1,15,1,210,1,3,0,17,1,106,242,2,0,1,19,19,0,0,0,55,0,0,0,1,0,17,1,210,1,3,0,1,15,1,210, 
  1,3,0,17,1,48,3,3,0,1,19,0,0,0,0,1,0,0,0,3,0,1,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56, 
  1,128,8,4,17,1,107,3,3,0,1,19,14,0,0,0,46,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3, 
  128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,123,4,3,0,17,1,76,231,2,0,1, 
  4,15,1,123,4,3,0,17,1,103,230,2,0,1,4,15,1,123,4,3,0,17,1,130,229,2,0,1,4,15,1,123,4,3,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,123,4,3,0, 
  1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,123,4,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,123,4,3,0,1,4,15,1,123,4,3,0,17,1,124,92,2,0,1,4,15,1,123,4,3,0, 
  17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,123,4,3,0,1,4,15,1,123,4,3,0,17,1,182,91,2,0,1,4,15,1,123,4,3,0,17,1,17,236,2,0,1,2,21,0,35,1,0, 
  0,255,255,255,255,15,0,0,0,3,0,0,0,72,248,195,130,73,128,69,131,106,32,8,128,19,240,67,129,44,16,6,130,38,144,3,129,14,240,195,127,71,0,3,128,43,176,136,128,70,96,4,128,91,112,6,128,96,240,132, 
  128,100,144,7,128,104,0,7,128,105,112,2,128,19,71,0,0,0,198,0,0,0,1,0,17,1,123,4,3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,123,4,3,0,1,19,19,0,0,0,56,0,0,0,3,0, 
  1,1,15,1,123,4,3,0,17,1,5,240,2,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,123,4,3,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,123,4,3,0,1,19,44,0,0,0,120,0,0,0, 
  1,0,17,1,123,4,3,0,1,19,14,0,0,0,44,0,0,0,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,123,4,3,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,123,4,3,0,1,19,70,0, 
  0,0,196,0,0,0,1,0,17,1,123,4,3,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,123,4,3,0,1,15,1,123,4,3,0,17,1,159,5,3,0,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0, 
  0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7,112,1,128,13,48,1,128,4,17,1,185,240,2,0,1,8,19,14,0,0,0,45,0,0,0,3,0,14,1,21,1,47,0,0,0,234,168,3,0,5,0,0, 
  0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,22,6,3,0,1,19,14,0,0,0,42,0,0,0,1,0,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0, 
  4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50,144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128, 
  46,8,8,128,47,152,7,128,8,4,15,1,38,7,3,0,17,1,76,231,2,0,1,4,15,1,38,7,3,0,17,1,103,230,2,0,1,4,15,1,38,7,3,0,17,1,130,229,2,0,1,4,15,1,38,7,3,0,17,1, 
  223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0,17,1,38,7,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,38,7,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,38,7,3, 
  0,1,4,15,1,38,7,3,0,17,1,124,92,2,0,1,4,15,1,38,7,3,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,38,7,3,0,1,4,15,1,38,7,3,0,17,1,182,91, 
  2,0,1,4,15,1,38,7,3,0,17,1,160,245,2,0,1,2,21,0,54,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,96,198,130,73,208,69,131,106,112,2,128,43,72,200,129,44,232,7,130,38,176,200,128, 
  14,168,201,127,15,64,137,128,70,88,7,128,71,200,6,128,91,64,5,128,96,176,132,128,100,32,4,128,104,144,3,128,105,0,3,128,19,71,0,0,0,199,0,0,0,1,0,17,1,38,7,3,0,1,19,71,0,0,0,198, 
  0,0,0,1,0,17,1,38,7,3,0,1,19,72,0,0,0,200,0,0,0,1,0,17,1,38,7,3,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,38,7,3,0,1,19,70,0,0,0,195,0,0,0,1,0,17, 
  1,38,7,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,38,7,3,0,1,19,44,0,0,0,120,0,0,0,1,0,17,1,38,7,3,0,1,15,1,38,7,3,0,17,1,5,240,2,0,1,19,44,0,0,0, 
  119,0,0,0,1,0,17,1,38,7,3,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,38,7,3,0,1,19,14,0,0,0,38,0,0,0,3,0,1,15,1,38,7,3,0,17,1,39,254,2,0,1,19,15,0,0, 
  0,50,0,0,0,1,0,17,1,38,7,3,0,1,15,1,38,7,3,0,17,1,93,8,3,0,1,1,2,21,1,47,0,0,0,234,168,3,0,5,0,0,0,2,0,0,0,6,112,1,128,1,112,193,128,2,112,129,127,7, 
  112,1,128,13,48,1,128,4,17,1,153,8,3,0,1,8,19,14,0,0,0,41,0,0,0,3,0,14,1,21,1,15,1,0,0,6,108,3,0,16,0,0,0,4,0,0,0,49,0,7,128,1,144,194,127,2,144,66,128,50, 
  144,6,128,103,232,3,128,53,32,6,128,6,144,2,128,7,144,66,127,107,120,3,128,73,136,5,128,74,240,4,128,75,88,68,127,108,8,3,128,109,152,2,128,46,8,8,128,47,152,7,128,8,4,15,1,169,9,3,0,17, 
  1,76,231,2,0,1,4,15,1,169,9,3,0,17,1,103,230,2,0,1,4,15,1,169,9,3,0,17,1,130,229,2,0,1,4,15,1,169,9,3,0,17,1,223,92,2,0,1,4,19,73,0,0,0,204,0,0,0,1,0, 
  17,1,169,9,3,0,1,4,19,73,0,0,0,203,0,0,0,1,0,17,1,169,9,3,0,1,4,19,73,0,0,0,202,0,0,0,1,0,17,1,169,9,3,0,1,4,15,1,169,9,3,0,17,1,124,92,2,0,1,4, 
  15,1,169,9,3,0,17,1,25,92,2,0,1,4,19,38,0,0,0,112,0,0,0,1,0,17,1,169,9,3,0,1,4,15,1,169,9,3,0,17,1,182,91,2,0,1,4,15,1,169,9,3,0,17,1,247,248,2,0,1, 
  2,21,0,36,1,0,0,255,255,255,255,15,0,0,0,3,0,0,0,72,200,199,130,73,56,71,131,106,144,8,128,43,112,194,129,44,208,6,130,38,48,200,128,14,104,195,127,15,104,131,128,70,32,5,128,71,176,5,128,91, 
  144,4,128,96,0,132,128,100,216,2,128,104,112,3,128,105,64,6,128,15,1,169,9,3,0,17,1,56,252,2,0,1,19,70,0,0,0,196,0,0,0,1,0,17,1,169,9,3,0,1,1,19,72,0,0,0,200,0,0,0, 
  1,0,17,1,169,9,3,0,1,19,70,0,0,0,195,0,0,0,1,0,17,1,169,9,3,0,1,19,70,0,0,0,194,0,0,0,1,0,17,1,169,9,3,0,1,19,44,0,0,0,118,0,0,0,1,0,17,1,169,9, 
  3,0,1,19,44,0,0,0,119,0,0,0,1,0,17,1,169,9,3,0,1,19,71,0,0,0,198,0,0,0,1,0,17,1,169,9,3,0,1,19,14,0,0,0,37,0,0,0,5,0,14,1,19,44,0,0,0,120,0,0, 
  0,1,0,17,1,169,9,3,0,1,15,1,169,9,3,0,17,1,20,0,3,0,1,19,15,0,0,0,51,0,0,0,3,0,1,19,71,0,0,0,199,0,0,0,1,0,17,1,169,9,3,0,1,2,21,1,47,0,0,0, 
  231,109,3,0,5,0,0,0,2,0,0,0,6,48,1,128,1,48,193,128,2,48,129,127,7,48,1,128,13,56,1,128,8,4,17,1,254,10,3,0,1,2,21,1,71,0,0,0,152,110,3,0,6,0,0,0,2,0,0,0, 
  108,88,1,128,1,80,1,128,2,80,129,128,7,80,129,128,6,80,1,128,107,200,1,128,8,4,15,1,232,171,2,0,17,1,103,230,2,0,1,4,15,1,232,171,2,0,17,1,130,229,2,0,1,2,15,1,220,163,1,0, 
  17,1,83,11,3,0,1,21,1,64,0,0,0,126,169,3,0,2,0,0,0,1,0,0,0,28,104,1,128,29,208,0,128,4,19,33,0,0,0,86,0,0,0,1,0,17,1,184,11,3,0,1,4,19,32,0,0,0,85,0, 
  0,0,1,0,17,1,148,11,3,0,1,2,21,1,35,0,0,0,78,172,3,0,1,0,0,0,0,0,0,0,8,176,0,128,4,19,8,0,0,0,26,0,0,0,2,0,1,2,21,1,35,0,0,0,78,172,3,0,1,0, 
  0,0,0,0,0,0,8,176,0,128,4,19,8,0,0,0,27,0,0,0,2,0,1,2,15,1,220,163,1,0,17,1,233,11,3,0,1,21,1,61,3,0,0,196,78,3,0,27,0,0,0,4,0,0,0,96,168,77,134,1, 
  240,3,132,2,240,131,131,99,56,11,128,84,152,150,132,101,32,9,128,86,200,85,132,87,248,20,128,88,40,20,128,89,88,19,128,90,136,18,128,91,184,17,128,92,232,16,128,93,24,16,128,94,72,15,128,31,120,25,129,34, 
  8,153,128,81,56,216,128,82,104,215,128,95,120,78,129,97,216,140,129,98,8,12,128,100,104,10,128,102,216,7,128,127,56,7,128,128,152,5,128,129,248,3,128,8,4,19,121,0,0,0,104,1,0,0,1,0,19,87,0,0, 
  0,7,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,3,101,1,0,1,4,19,120,0,0,0,103,1,0,0,1,0,19,87,0,0,0,6,1,0,0,1,0,19, 
  64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,3,101,1,0,1,4,15,1,3,101,1,0,15,1,196,100,1,0,17,1,112,100,1,0,1,4,19,87,0,0,0,5,1,0,0,1,0, 
  19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0,0,1,0,17,1,3,101,1,0,1,4,19,87,0,0,0,4,1,0,0,1,0,19,64,0,0,0,178,0,0,0,1,0,19,34,0,0,0,95,0,0, 
  0,1,0,17,1,3,101,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,19,100,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,206,99,1, 
  0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,137,99,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,68,99,1,0,1,4,15,1,3,101,1, 
  0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,255,98,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,186,98,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15, 
  1,100,100,1,0,17,1,117,98,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,48,98,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,235, 
  97,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,166,97,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,97,97,1,0,1,4,15,1,3, 
  101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,28,97,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,100,100,1,0,17,1,215,96,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1, 
  0,15,1,100,100,1,0,17,1,146,96,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,134,96,1,0,17,1,65,96,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,53,96,1,0,17, 
  1,121,93,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,109,93,1,0,17,1,30,90,1,0,1,4,15,1,3,101,1,0,15,1,88,100,1,0,15,1,18,90,1,0,17,1,179,81,1,0,1,4,15, 
  1,3,101,1,0,17,1,55,75,1,0,1,4,15,1,3,101,1,0,17,1,232,61,1,0,1,2,15,1,220,163,1,0,17,1,52,15,3,0,1,21,7,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,123,176, 
  0,128,4,17,1,39,7,1,0,1,21,9,27,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,208,0,128,8,2,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,47,48,129,128, 
  45,240,192,127,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3, 
  0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,18,2,0,0,0,1,18,1,0,0,0,1,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,42,16,1,128,47,208,0,128,3,17,1, 
  50,17,3,0,1,3,17,1,10,16,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,42,176,0,128,3,17,1,95,16,3,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0, 
  0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17,1,221,16,3,0,1,3,17,1,221,16,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,42,8,1, 
  128,47,208,0,128,3,18,7,0,0,0,1,3,17,1,191,16,3,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17, 
  1,221,16,3,0,1,3,17,1,221,16,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,47,176,0,128,3,18,7,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0, 
  0,0,0,42,176,0,128,3,17,1,191,16,3,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17,1,221,16,3,0, 
  1,3,17,1,221,16,3,0,1,2,21,2,53,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17,1,50,17,3,0,1,3,18,6,0, 
  0,0,1,2,18,41,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,61,208,0,128,47,16,193,127,3,17,1,7,18,3,0,1,3,17,1,223,15,3,0,1, 
  21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,62,208,0,128,33,8,1,128,3,18,3,0,0,0,1,3,17,1,49,18,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,62,176,0,128,3,18,4,0,0,0,1,2,21,4,114,0,0, 
  0,255,255,255,255,8,0,0,0,3,0,0,0,112,16,2,128,97,16,3,128,114,208,1,128,115,144,1,128,103,144,2,128,109,80,2,128,102,208,2,128,47,80,67,127,3,17,1,253,22,3,0,1,3,17,1,26,22,3,0, 
  1,3,17,1,2,21,3,0,1,3,17,1,135,20,3,0,1,3,17,1,43,20,3,0,1,3,17,1,134,19,3,0,1,3,17,1,236,18,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,99,176,0,128,3,17,1,11,19,3, 
  0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,99,176,0,128,3,17,1,42,19,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,73, 
  19,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,112,176,0,128,3,17,1,104,19,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18, 
  75,0,0,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,111,208,0,128,97,16,193,127,3,17,1,238,19,3,0,1,3,17,1,177,19,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1, 
  0,0,0,0,0,0,0,105,176,0,128,3,17,1,208,19,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,18,73,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255, 
  1,0,0,0,0,0,0,0,114,176,0,128,3,17,1,13,20,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,18,109,0,0,0,1,2,21,4,30,0,0,0,255,255,255, 
  255,1,0,0,0,0,0,0,0,111,176,0,128,3,17,1,74,20,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,105,20,3,0,1,2,21,4,29,0,0,0,255, 
  255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,18,108,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,166,20,3,0,1,2,21,4,30,0,0,0, 
  255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,197,20,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,99,176,0,128,3,17,1,228,20,3,0,1,2,21,4,29,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176,0,128,3,18,103,0,0,0,1,2,21,4,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,101,144,129,128,97,208,193,127,117,16,1,128,111,80,1,128, 
  3,17,1,221,21,3,0,1,3,17,1,191,21,3,0,1,3,17,1,130,21,3,0,1,3,17,1,69,21,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,17,1,100,21, 
  3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,18,74,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,161, 
  21,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,18,55,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,112,176,0,128,3,18,53, 
  0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,17,1,252,21,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176,0,128,3,18, 
  107,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,57,22,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,100,16,1,128,115, 
  208,0,128,3,17,1,192,22,3,0,1,3,17,1,100,22,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,117,176,0,128,3,17,1,131,22,3,0,1,2,21,4,30,0,0,0,255,255,255, 
  255,1,0,0,0,0,0,0,0,99,176,0,128,3,17,1,162,22,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,18,46,0,0,0,1,2,21,4,30,0,0,0,255,255, 
  255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,223,22,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,58,0,0,0,1,2,21,4,42,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,104,208,0,128,101,16,1,128,3,17,1,171,24,3,0,1,3,17,1,40,23,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17, 
  1,71,23,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,45,176,0,128,3,17,1,102,23,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,108,16,65,128, 
  116,208,0,128,3,17,1,237,23,3,0,1,3,17,1,145,23,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0,128,3,17,1,176,23,3,0,1,2,21,4,30,0,0,0,255,255, 
  255,255,1,0,0,0,0,0,0,0,110,176,0,128,3,17,1,207,23,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,18,49,0,0,0,1,2,21,4,30,0,0,0,255, 
  255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,17,1,12,24,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,17,1,43,24,3,0,1,2,18,47,0,0,0, 
  21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,45,176,0,128,3,17,1,79,24,3,0,1,1,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,17,1,110,24,3,0, 
  1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,141,24,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,110,176,0,128,3,18,50,0,0, 
  0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0,128,3,17,1,202,24,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,102,176,0,128,3,17,1,233, 
  24,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,59,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,47,176,0,128,3,17,1, 
  223,15,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92,25,3,0,1,2, 
  18,72,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,92,25,3,0,1,1,21,4,69,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,40,240,1,128,45,112, 
  1,128,95,112,129,128,47,176,193,127,115,48,1,128,3,17,1,8,26,3,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,66,0,0,0,255,255,255,255,4,0,0,0,2, 
  0,0,0,4,144,1,128,5,80,1,128,6,16,1,128,3,208,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92,25,3,0,1,3,17,1,104,17,3,0,1,2,18,41,0,0,0,21,4,46, 
  0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,240,128,128,45,240,192,127,121,48,1,128,3,17,1,104,17,3,0,1,3,17,1,94,26,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,240,128,128,45,240,192,127,109,48,1,128,3,17,1,104,17,3,0, 
  1,3,17,1,180,26,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3, 
  0,0,0,1,0,0,0,98,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,10,27,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0, 
  128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48,193,127,111,240,0,128,3,17,1,96,27,3,0,1,3,17,1,104,17,3,0, 
  1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,108, 
  240,0,128,45,48,65,128,95,48,1,128,3,17,1,182,27,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0, 
  1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,240,128,128,45,240,192,127,115,48,1,128,3,17,1,104,17,3,0,1,3,17,1,12,28,3,0,1,21,2,34,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,48,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3, 
  17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,4,127,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0, 
  40,192,3,128,47,72,67,129,34,80,2,128,91,208,66,129,36,136,67,129,45,8,3,128,95,8,3,128,39,144,130,126,99,16,2,128,116,208,1,128,3,17,1,215,30,3,0,1,3,17,1,130,30,3,0,1,3,17,1,151, 
  29,3,0,1,3,17,1,12,29,3,0,1,3,18,82,0,0,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,127,0,0,0,1,3,18,31,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3, 
  0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,92,208,0,128,39,16,1,128,3,17,1,108,29,3,0,1,3,18,135,0,0,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,112,1,128,5,48,1,128,2,112,129,128,3,112,1,128,6, 
  112,1,128,3,17,1,12,29,3,0,1,3,17,1,12,29,3,0,1,2,21,2,42,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,4,16,1,128,6,16,1,128,2,16,193,127,3,16,1,128,3,17,1,12,29,3, 
  0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,34,16,65,128,92,208,0,128,3,17,1,247,29,3,0,1,3,18,129,0,0,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0, 
  0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17,1,34,30,3,0,1,3,17,1,34,30,3,0,1,2,21,2,42,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,4,16,1, 
  128,6,16,1,128,2,16,193,127,3,16,1,128,3,17,1,34,30,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,34,16,65,128,92,208,0,128,3,17,1,247,29,3,0,1,3,18,129,0, 
  0,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,112,1,128,5,48,1,128,2,112,129,128,3,112,1,128,6,112,1,128,3,17,1,34,30,3,0,1,3,17,1,34,30,3,0,1,2,18,41, 
  0,0,0,21,4,45,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,18,112,0,0,0,1,21,2,34,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48,193,127,107,240,0,128,3,17, 
  1,45,31,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0, 
  255,255,255,255,3,0,0,0,1,0,0,0,58,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,131,31,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208, 
  0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,110,0,0,0,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,40,176,0,128,3,18,76,0,0,0,1,1,21,4,206,0,0,0,255,255,255,255, 
  17,0,0,0,4,0,0,0,58,152,3,128,91,24,196,131,34,240,5,128,99,120,5,128,36,184,133,128,95,48,6,128,116,0,5,128,39,216,3,128,40,176,2,128,41,80,4,128,42,64,133,125,43,40,131,125,124,136,4,128, 
  45,48,6,128,94,192,4,128,63,240,130,125,123,96,3,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,247,35,3,0,1,3,17,1,34,35,3,0, 
  1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1, 
  3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3, 
  0,1,3,17,1,173,35,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,34,16,65,128,92,208,0,128,3,17,1,11,33,3,0,1,3,18,129,0,0,0,1,21,2,54,0,0,0,255,255, 
  255,255,5,0,0,0,2,0,0,0,4,48,1,128,5,112,1,128,2,48,129,128,3,48,1,128,6,48,1,128,3,17,1,54,33,3,0,1,3,17,1,54,33,3,0,1,2,21,2,42,0,0,0,255,255,255,255,4,0,0, 
  0,2,0,0,0,4,16,1,128,6,16,1,128,2,16,193,127,3,16,1,128,3,17,1,54,33,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,34,16,65,128,92,208,0,128,3,17,1,11, 
  33,3,0,1,3,18,129,0,0,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,112,1,128,5,48,1,128,2,112,129,128,3,112,1,128,6,112,1,128,3,17,1,54,33,3,0,1,3,17,1, 
  54,33,3,0,1,2,18,41,0,0,0,21,4,45,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,240,0,128,45,40,65,128,95,40,1,128,3,18,112,0,0,0,1,3,17,1,173,35,3,0,1,21,2,34,0, 
  0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48, 
  193,127,107,240,0,128,3,17,1,65,34,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0, 
  0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,240,0,128,45,48,65,128,95,48,1,128,3,17,1,131,31,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,216,34,3,0,1,21,2,30, 
  0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,216,34,3,0,1,2,18,123,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3, 
  17,1,216,34,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,216,34,3,0,1,1,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0, 
  92,208,0,128,39,16,1,128,3,17,1,130,35,3,0,1,3,18,135,0,0,0,1,21,2,54,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,112,1,128,5,48,1,128,2,112,129,128,3,112,1,128,6,112,1, 
  128,3,17,1,34,35,3,0,1,3,17,1,34,35,3,0,1,2,21,2,42,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,4,16,1,128,6,16,1,128,2,16,193,127,3,16,1,128,3,17,1,34,35,3,0,1, 
  2,18,41,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208, 
  0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,16,1,128,97,208,0,128,3,17,1,69,36,3,0,1,3,17,1,34,36,3,0,1,2,18,79, 
  0,0,0,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,3,18,140,0,0,0,1,1,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,17,1,100,36, 
  3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,45,0,0,0,1,2,18,31,0,0,0,21,4,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,42,8,1, 
  128,43,208,0,128,3,18,137,0,0,0,1,3,18,136,0,0,0,1,1,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,54,0,0,0, 
  255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,47,208,0,128,41,16,193,127,3,17,1,223,15,3,0,1,3,18,32,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217, 
  15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,52,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,124,240,0,128,41,104,65,128,47,40,1,128,3,18,66,0,0,0,1,3,17,1,223,15,3,0,1,3,18, 
  32,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,105,0,0,0,255,255,255,255,8,0, 
  0,0,3,0,0,0,40,16,3,128,47,208,66,129,34,16,2,128,99,208,1,128,116,144,1,128,45,144,2,128,95,144,2,128,39,80,130,126,3,17,1,215,30,3,0,1,3,17,1,130,30,3,0,1,3,17,1,151,29,3, 
  0,1,3,17,1,12,29,3,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5, 
  48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,45,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,40,48,1,128,45,240,64,128,95,240,0,128,3,17, 
  1,104,17,3,0,1,3,18,31,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3, 
  17,1,104,17,3,0,1,2,21,4,174,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,80,2,128,42,56,196,129,34,240,196,127,43,8,67,130,116,248,3,128,45,48,69,129,94,184,3,128,39,120,131,128,58,144, 
  2,128,63,208,130,128,93,176,4,128,95,48,5,128,99,112,68,128,123,64,3,128,3,17,1,130,36,3,0,1,3,17,1,231,39,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3, 
  17,1,34,35,3,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3, 
  0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,18,83,0, 
  0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,33,176,0,128,3,17,1,201,39,3,0,1,1,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,63,176,0,128,3,18,125,0,0, 
  0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,3,18,79,0,0,0,1,2,21,4,174,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,80,2,128,42,248,195,129,34, 
  176,196,127,43,200,66,130,116,184,3,128,45,240,68,129,94,120,3,128,39,56,131,128,58,48,5,128,63,144,130,128,93,112,4,128,95,240,4,128,99,48,68,128,123,0,3,128,3,17,1,130,36,3,0,1,3,18,120,0,0, 
  0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39, 
  3,0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,3,17,1,234,40,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1, 
  217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,3,17,1,34,36,3,0,1,2,21,4,174,0,0,0,255, 
  255,255,255,14,0,0,0,3,0,0,0,40,80,2,128,42,56,196,129,34,240,196,127,43,8,67,130,116,248,3,128,45,48,69,129,94,184,3,128,39,120,131,128,58,144,2,128,63,208,130,128,93,176,4,128,95,48,5,128,99, 
  112,68,128,123,64,3,128,3,17,1,130,36,3,0,1,3,17,1,238,41,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,151,34,3,0,1, 
  3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0, 
  58,176,0,128,3,17,1,13,42,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,60,176,0,128,3,18,140,0,0,0,1,2,21,4,93,0,0,0,255,255,255,255,7,0,0,0,2,0,0, 
  0,40,112,130,129,45,48,2,128,34,176,1,128,39,240,65,128,95,48,66,128,99,112,1,128,116,168,2,128,3,17,1,130,30,3,0,1,3,17,1,151,29,3,0,1,3,17,1,12,29,3,0,1,3,17,1,104,17,3,0, 
  1,3,18,31,0,0,0,1,3,17,1,191,42,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3, 
  0,1,3,17,1,104,17,3,0,1,2,18,41,0,0,0,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,104,193,127,107,240,0,128,3,17,1,45,31,3,0,1,3,18,40,0,0,0, 
  1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,4,86,0,0,0,255,255,255,255,6,0,0,0,2,0, 
  0,0,40,112,66,128,44,200,1,128,42,56,130,128,43,0,2,128,58,136,65,128,62,80,1,128,3,18,21,0,0,0,1,3,17,1,231,39,3,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0, 
  0,1,3,17,1,157,43,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,40,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,42,8,1,128,43,208,0,128,3,18,137,0,0,0,1,3,18,136,0,0,0,1,2,21,4,86,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,40,112,66,128,44,200,1,128, 
  42,56,130,128,43,0,2,128,58,136,65,128,62,80,1,128,3,18,21,0,0,0,1,3,17,1,234,40,3,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,17,1,157,43,3,0,1, 
  21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,86,0,0,0,255,255,255,255,6,0,0,0,2,0,0, 
  0,40,112,66,128,44,200,1,128,42,56,130,128,43,0,2,128,58,136,65,128,62,80,1,128,3,18,21,0,0,0,1,3,17,1,238,41,3,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0, 
  1,3,17,1,157,43,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,74,0,0,0,255,255, 
  255,255,5,0,0,0,2,0,0,0,40,16,66,128,44,104,1,128,42,216,129,128,43,160,1,128,62,48,1,128,3,18,21,0,0,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,17, 
  1,157,43,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,65,0,0,0,255,255,255,255,4, 
  0,0,0,2,0,0,0,99,16,1,128,41,80,1,128,34,200,1,128,39,136,65,127,3,17,1,169,45,3,0,1,3,18,32,0,0,0,1,3,17,1,12,29,3,0,1,3,17,1,151,29,3,0,1,21,2,42,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,3, 
  18,112,0,0,0,1,2,21,4,139,0,0,0,255,255,255,255,11,0,0,0,3,0,0,0,40,224,3,128,63,240,1,130,34,160,3,128,99,32,195,129,116,224,2,128,45,24,196,128,94,40,2,128,39,160,130,126,93,96,3, 
  128,95,24,4,128,123,104,2,128,3,18,120,0,0,0,1,3,17,1,137,46,3,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39, 
  3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217, 
  15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,216,34,3,0,1,21,2,30,0,0, 
  0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,216,34,3,0,1,2,21,4,52,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,104,1,128,107,40,65,128,125,240,0,128,3,18,11,0, 
  0,0,1,3,17,1,53,47,3,0,1,3,18,39,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211, 
  15,3,0,1,3,17,1,83,47,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,119,176,0,128,3,18,139,0,0,0,1,2,18,138,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0, 
  0,0,0,0,0,0,4,176,0,128,3,17,1,83,47,3,0,1,1,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,125,176,0,128,3,18,11,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0, 
  0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,83,47,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,125,208,0,128,107,8,193,127,3,18,11,0,0,0,1,3,17,1,53,47,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3, 
  0,1,3,17,1,211,15,3,0,1,3,17,1,83,47,3,0,1,2,21,4,128,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,40,136,3,128,63,208,1,130,34,72,3,128,99,200,2,128,116,136,2,128,45,192,195, 
  128,94,8,2,128,39,72,130,126,93,8,3,128,95,192,3,128,3,18,120,0,0,0,1,3,17,1,137,46,3,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165, 
  39,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1, 
  217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,117,0,0,0,255,255,255,255,9,0,0,0,3,0,0,0,40,48,3,128,93,176,2,128,34,240,2,128,99,112,2,128,116,48,2,128, 
  45,104,3,127,94,176,1,128,39,240,65,128,95,104,3,128,3,17,1,137,46,3,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171, 
  32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1, 
  211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,116,0,0,0,255,255,255,255,9,0,0,0,3,0,0,0,40,40,3,128,63,176,193,129,34,232,2,128,99,104,2,128,116,40,2,128,45,96,67,128,93,168,2,128, 
  39,232,129,126,95,96,3,128,3,18,120,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0, 
  0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173, 
  35,3,0,1,2,21,4,128,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,40,136,3,128,93,8,3,128,34,72,3,128,99,200,130,129,116,136,2,128,45,192,3,127,94,208,1,128,39,72,66,128,95,192,3,128,123, 
  16,2,128,3,17,1,137,46,3,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,18, 
  31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3, 
  17,1,173,35,3,0,1,2,21,4,116,0,0,0,255,255,255,255,9,0,0,0,3,0,0,0,40,40,3,128,93,168,2,128,34,232,2,128,99,104,66,129,116,40,2,128,45,96,3,127,95,96,3,128,39,232,193,127,123,176, 
  1,128,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173, 
  35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21, 
  4,127,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,40,128,3,128,63,208,193,129,34,64,3,128,99,192,130,129,116,128,2,128,45,184,67,128,93,0,3,128,39,64,130,126,95,184,3,128,123,8,2,128,3,18,120, 
  0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17, 
  1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1, 
  2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,93,208,0,128,47,16,193,127,3,17,1,165,39,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,172,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,176,4,128,33,40,69,129,34,112,196,129,91,144,2,130, 
  36,248,3,130,45,232,4,128,41,200,2,128,39,80,66,128,47,120,131,128,58,48,4,128,95,232,4,128,99,184,3,128,116,56,67,128,124,0,3,128,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0, 
  0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,223,15,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0, 
  0,0,1,3,17,1,173,35,3,0,1,3,18,124,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211, 
  15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,69,36,3,0,1,2,21,4,117,0,0,0,255,255,255,255,9,0,0,0,3,0, 
  0,0,40,112,3,128,47,240,194,129,34,48,2,128,99,240,1,128,116,176,1,128,45,176,66,128,93,48,3,128,39,112,130,126,95,176,2,128,3,17,1,215,30,3,0,1,3,17,1,130,30,3,0,1,3,17,1,151,29,3, 
  0,1,3,17,1,12,29,3,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,17,1,165,39,3,0,1,3,18,31,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6, 
  240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,162,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40,48,2,128,42,216, 
  3,128,34,144,196,127,43,168,2,130,116,152,3,128,45,208,4,129,94,88,3,128,39,24,67,128,63,112,130,128,93,80,4,128,95,208,4,128,99,16,68,128,123,224,2,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0, 
  1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,17,1,165,39,3, 
  0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211, 
  15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,206,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,240,5,128,91,216,195,131,34,176,5,128,99,56,5,128,36,120,133,128,95,48,6,128,116,192,4,128,39, 
  152,3,128,40,176,2,128,41,16,4,128,42,0,133,125,43,40,131,125,124,72,4,128,45,48,6,128,94,128,4,128,63,240,130,125,123,96,3,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0, 
  1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1, 
  3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,50,56,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0, 
  128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,16,1,128,97,208,0,128, 
  3,17,1,69,36,3,0,1,3,18,79,0,0,0,1,2,21,4,206,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,48,6,128,91,216,195,131,34,176,5,128,99,56,5,128,36,120,133,128,95,240,5,128,116,192, 
  4,128,39,152,3,128,40,176,2,128,41,16,4,128,42,0,133,125,43,40,131,125,124,72,4,128,45,240,5,128,94,128,4,128,63,240,130,125,123,96,3,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25, 
  0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0, 
  0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,3,17,1,97,57,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0, 
  6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,16,1,128,97, 
  208,0,128,3,17,1,69,36,3,0,1,3,17,1,13,42,3,0,1,2,21,4,161,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40,208,4,128,41,104,3,128,34,176,130,129,91,48,195,129,36,88,196,129,45,216, 
  3,128,47,24,196,128,39,240,194,127,58,144,4,128,95,216,3,128,99,112,2,128,116,48,66,128,124,160,3,128,3,17,1,215,30,3,0,1,3,17,1,130,30,3,0,1,3,17,1,151,29,3,0,1,3,17,1,12,29,3, 
  0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,18,31,0,0,0, 
  1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,183,0, 
  0,0,255,255,255,255,15,0,0,0,3,0,0,0,40,64,5,128,41,152,3,128,34,0,133,129,91,96,3,130,36,136,4,130,45,120,5,128,94,168,2,128,39,32,131,128,58,192,4,128,63,112,66,128,95,120,5,128,99,72, 
  132,128,116,8,132,128,123,232,2,128,124,208,3,128,3,18,120,0,0,0,1,3,17,1,137,46,3,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18, 
  66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21, 
  2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,172,0,0,0, 
  255,255,255,255,14,0,0,0,3,0,0,0,40,232,4,128,41,64,3,128,34,168,132,129,91,8,195,129,36,48,196,129,45,32,5,128,94,80,2,128,39,200,130,128,58,104,4,128,95,32,5,128,99,240,131,128,116,176,131,128, 
  123,144,2,128,124,120,3,128,3,17,1,137,46,3,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1, 
  3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0, 
  1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,160,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40, 
  136,4,128,41,224,2,128,34,72,4,129,91,168,130,129,36,208,131,129,45,192,4,128,58,8,4,128,39,104,66,128,95,192,4,128,99,144,131,128,116,80,131,128,123,48,2,128,124,24,3,128,3,18,10,0,0,0,1,3,17, 
  1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17, 
  1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3, 
  17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,161,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40,144,4,128,41,232,2,128,34,80,132,129,91,176,194,129,36,216,195,129,45,200,4,128,94,48, 
  2,128,39,112,130,128,58,16,4,128,95,200,4,128,99,152,3,128,116,88,67,128,124,32,3,128,3,17,1,137,46,3,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0, 
  0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54, 
  0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,172,0,0,0,255,255, 
  255,255,14,0,0,0,3,0,0,0,40,232,4,128,41,64,3,128,34,168,132,129,91,8,3,130,36,48,4,130,45,32,5,128,94,136,2,128,39,200,130,128,58,104,4,128,63,80,66,128,95,32,5,128,99,240,3,128,116,176, 
  67,128,124,120,3,128,3,18,120,0,0,0,1,3,17,1,137,46,3,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17, 
  1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0, 
  0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,160,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40,136,4, 
  128,41,224,2,128,34,72,4,129,91,168,194,129,36,208,195,129,45,192,4,128,58,8,4,128,39,104,66,128,63,48,66,128,95,192,4,128,99,144,3,128,116,80,67,128,124,24,3,128,3,18,120,0,0,0,1,3,17,1,34, 
  35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171, 
  32,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1, 
  211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,171,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,224,4,128,41,56,3,128,34,160,4,129,91,0,195,129,36,40,196,129,45,24,5,128,58,96,4,128, 
  39,192,66,128,63,80,66,128,95,24,5,128,99,232,131,128,116,168,131,128,123,136,2,128,124,112,3,128,3,18,120,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32, 
  0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,18,31,0,0,0,1,3,17,1, 
  173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2, 
  21,4,206,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,176,5,128,91,216,195,131,34,240,5,128,99,56,5,128,36,120,133,128,95,48,6,128,116,192,4,128,39,152,3,128,40,176,2,128,41,16,4,128,42,0, 
  133,125,43,40,131,125,124,72,4,128,45,48,6,128,94,128,4,128,63,240,130,125,123,96,3,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35, 
  3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0, 
  0,1,3,17,1,137,53,3,0,1,3,17,1,171,32,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217, 
  15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,64,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,124,16,1,128,41,200,1,128,58,72,1,128,47,136,1,128,3,18,66,0,0, 
  0,1,3,17,1,137,53,3,0,1,3,17,1,223,15,3,0,1,3,18,32,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3, 
  17,1,211,15,3,0,1,2,21,4,194,0,0,0,255,255,255,255,15,0,0,0,3,0,0,0,40,96,5,128,105,168,3,128,34,208,197,129,43,32,69,129,36,152,5,130,45,224,68,129,102,232,3,128,47,160,4,128,91,104, 
  196,128,98,40,4,128,109,104,195,128,115,40,195,128,116,232,2,128,117,168,2,128,123,112,2,128,3,18,10,0,0,0,1,3,17,1,119,72,3,0,1,3,17,1,27,72,3,0,1,3,17,1,222,71,3,0,1,3,17,1, 
  161,71,3,0,1,3,17,1,219,70,3,0,1,3,17,1,173,69,3,0,1,3,17,1,81,69,3,0,1,3,18,82,0,0,0,1,3,17,1,223,15,3,0,1,3,17,1,8,67,3,0,1,3,17,1,233,66,3,0,1, 
  3,18,31,0,0,0,1,3,18,127,0,0,0,1,3,17,1,151,29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1, 
  3,17,1,211,15,3,0,1,3,17,1,61,73,3,0,1,2,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,61,73,3,0,1,2,18,34,0,0,0,21,2,30,0,0,0,255, 
  255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,44,67,3,0,1,1,18,128,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,46,240,0,128,69,48,65,128,101,48,1,128,3, 
  17,1,127,68,3,0,1,3,17,1,126,67,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,2,68,3,0,1,2,21,4,34,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,45,208,0,128,43,208,192,127,3,17,1,191,67,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,222,67,3,0,1,2,21,2,30,0,0,0,255,255,255, 
  255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,222,67,3,0,1,2,18,128,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,222,67,3,0,1,1,18,128, 
  0,0,0,21,4,42,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,46,240,0,128,69,240,64,128,101,240,0,128,18,128,0,0,0,17,1,80,68,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0, 
  0,0,0,4,176,0,128,3,17,1,2,68,3,0,1,2,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,46,240,0,128,69,48,65,128,101,48,1,128,3,17,1,127,68,3,0,1,3,17,1,126,67,3, 
  0,1,2,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,158,68,3,0,1,2,18,128,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,101,208,0, 
  128,69,208,192,127,3,17,1,126,67,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,228,68,3,0,1,2,18,128,0,0,0,21,4,38,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,101,208,0,128,69,208,192,127,18,128,0,0,0,17,1,46,69,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,228,68,3,0,1,2,21,4, 
  34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,101,208,0,128,69,208,192,127,3,17,1,126,67,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,17,1,112,69, 
  3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,17,1,143,69,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,18,86, 
  0,0,0,1,2,21,4,77,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,95,112,1,128,49,40,194,128,54,168,1,128,51,232,65,127,97,48,1,128,3,17,1,127,70,3,0,1,3,18,130,0,0,0,1,3,17, 
  1,97,70,3,0,1,3,17,1,67,70,3,0,1,3,17,1,251,69,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,50,8,65,128,54,208,0,128,3,18,95,0,0,0,1,3,17,1,37, 
  70,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,56,176,0,128,3,18,98,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,50,176,0,128,3,18,89, 
  0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,52,176,0,128,3,18,92,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,17,1, 
  158,70,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,17,1,189,70,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3, 
  18,102,0,0,0,1,2,21,4,65,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,56,16,1,128,49,200,1,128,54,72,1,128,51,136,1,128,3,18,87,0,0,0,1,3,17,1,131,71,3,0,1,3,17,1,101, 
  71,3,0,1,3,17,1,29,71,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,50,8,65,128,54,208,0,128,3,18,96,0,0,0,1,3,17,1,71,71,3,0,1,2,21,4,29,0,0, 
  0,255,255,255,255,1,0,0,0,0,0,0,0,56,176,0,128,3,18,99,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,50,176,0,128,3,18,90,0,0,0,1,2,21,4,29,0,0, 
  0,255,255,255,255,1,0,0,0,0,0,0,0,52,176,0,128,3,18,93,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,192,71,3,0,1,2,21,4,29,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,112,176,0,128,3,18,81,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,253,71,3,0,1,2,21,4,29, 
  0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,114,176,0,128,3,18,84,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,114,176,0,128,3,17,1,58,72,3,0,1,2,21,4, 
  30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,117,176,0,128,3,17,1,89,72,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,18,101,0,0,0,1,2,21, 
  4,65,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,56,16,1,128,49,200,1,128,54,72,1,128,51,136,1,128,3,18,88,0,0,0,1,3,17,1,31,73,3,0,1,3,17,1,1,73,3,0,1,3,17,1,185, 
  72,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,50,8,65,128,54,208,0,128,3,18,97,0,0,0,1,3,17,1,227,72,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0, 
  0,0,0,0,0,56,176,0,128,3,18,100,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,50,176,0,128,3,18,91,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0, 
  0,0,0,0,0,52,176,0,128,3,18,94,0,0,0,1,2,18,128,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,46,240,0,128,69,48,65,128,101,48,1,128,3,17,1,127,68,3,0,1, 
  3,17,1,126,67,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,2,68,3,0,1,2,21,4,171,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,40,168,4, 
  128,105,48,3,128,34,24,133,129,43,104,4,129,36,224,196,129,45,40,4,129,102,112,3,128,91,240,195,128,98,176,3,128,109,240,194,128,115,176,2,128,116,112,2,128,117,48,2,128,3,17,1,119,72,3,0,1,3,17,1, 
  180,74,3,0,1,3,17,1,222,71,3,0,1,3,17,1,161,71,3,0,1,3,17,1,219,70,3,0,1,3,17,1,113,74,3,0,1,3,17,1,81,69,3,0,1,3,18,82,0,0,0,1,3,17,1,8,67,3,0,1, 
  3,17,1,233,66,3,0,1,3,18,31,0,0,0,1,3,18,127,0,0,0,1,3,17,1,151,29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128, 
  3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,61,73,3,0,1,2,21,4,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,97,16,1,128,49,208,193,127,54,80,1,128,51,144,1,128,3, 
  17,1,127,70,3,0,1,3,17,1,97,70,3,0,1,3,17,1,67,70,3,0,1,3,17,1,251,69,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,114,208,0,128,95,16,1,128,3,17, 
  1,58,72,3,0,1,3,18,40,0,0,0,1,2,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,116,240,0,128,45,48,65,128,95,48,1,128,3,17,1,67,75,3,0,1,3,17,1,104,17,3,0,1, 
  21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,18,41,0,0,0, 
  21,4,58,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,107,144,129,128,45,16,1,128,111,80,1,128,95,16,65,127,3,17,1,104,17,3,0,1,3,17,1,239,75,3,0,1,3,17,1,165,75,3,0,1,21,2, 
  34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,69,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128, 
  45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255, 
  255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48,193,127,107,240,0,128,3,17,1,69,76,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128, 
  3,208,0,128,3,17,1,104,17,3,0,1,1,18,54,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,240,128,128,45,240,192,127,101,48,1,128,3,17,1,104,17,3,0,1,3,17,1,155, 
  76,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0, 
  0,0,110,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,241,76,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104, 
  17,3,0,1,1,18,70,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,2,52,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,96,129,128,5,40,1,128,6,240,0,128,3,18,1,0,0,0,1,3,18,2,0, 
  0,0,1,3,17,1,92,25,3,0,1,2,21,4,182,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,0,5,128,105,136,3,128,34,112,133,129,43,192,4,129,36,56,197,129,45,128,4,129,102,200,3,128,91,72, 
  196,128,98,8,4,128,109,72,195,128,115,8,195,128,116,200,2,128,117,136,2,128,123,80,2,128,3,18,10,0,0,0,1,3,17,1,119,72,3,0,1,3,17,1,27,72,3,0,1,3,17,1,222,71,3,0,1,3,17,1, 
  161,71,3,0,1,3,17,1,219,70,3,0,1,3,17,1,113,74,3,0,1,3,17,1,81,69,3,0,1,3,18,82,0,0,0,1,3,17,1,8,67,3,0,1,3,17,1,233,66,3,0,1,3,18,31,0,0,0,1,3, 
  18,127,0,0,0,1,3,17,1,151,29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1, 
  3,17,1,61,73,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,166,78,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0, 
  128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,95,176,0,128,3,18,40,0,0,0,1,2,21,4,171,0,0,0,255,255, 
  255,255,13,0,0,0,3,0,0,0,40,168,4,128,105,48,3,128,34,24,133,129,43,104,4,129,36,224,196,129,45,40,4,129,102,112,3,128,91,240,195,128,98,176,3,128,109,240,194,128,115,176,2,128,116,112,2,128,117,48, 
  2,128,3,17,1,119,72,3,0,1,3,17,1,27,72,3,0,1,3,17,1,222,71,3,0,1,3,17,1,161,71,3,0,1,3,17,1,219,70,3,0,1,3,17,1,113,74,3,0,1,3,17,1,81,69,3,0,1,3,18, 
  82,0,0,0,1,3,17,1,8,67,3,0,1,3,17,1,233,66,3,0,1,3,18,31,0,0,0,1,3,18,127,0,0,0,1,3,17,1,151,29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0, 
  0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,61,73,3,0,1,2,21,4,182,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,0,5,128, 
  105,80,3,128,34,112,197,129,43,192,4,129,36,56,5,130,45,128,196,128,102,144,3,128,91,72,4,129,93,16,132,128,98,208,3,128,109,16,195,128,115,208,2,128,116,144,2,128,117,80,2,128,3,17,1,119,72,3,0,1, 
  3,17,1,27,72,3,0,1,3,17,1,222,71,3,0,1,3,17,1,161,71,3,0,1,3,17,1,219,70,3,0,1,3,17,1,113,74,3,0,1,3,17,1,81,69,3,0,1,3,18,83,0,0,0,1,3,18,82,0,0, 
  0,1,3,17,1,8,67,3,0,1,3,17,1,233,66,3,0,1,3,18,31,0,0,0,1,3,18,127,0,0,0,1,3,17,1,151,29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112, 
  129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,61,73,3,0,1,2,21,4,89,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,36,80,66,129,45,208,1, 
  128,34,136,130,128,43,16,2,128,102,144,1,128,116,80,1,128,3,17,1,97,81,3,0,1,3,17,1,66,81,3,0,1,3,17,1,35,81,3,0,1,3,17,1,233,66,3,0,1,3,18,127,0,0,0,1,3,17,1,151, 
  29,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129,128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,61,73,3,0,1,2,21, 
  2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,44,67,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,127,70,3,0,1, 
  2,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,114,240,0,128,107,112,65,128,111,48,1,128,3,17,1,58,72,3,0,1,3,17,1,151,81,3,0,1,3,18,69,0,0,0,1,2,21,4,30,0,0, 
  0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,17,1,182,81,3,0,1,2,18,54,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,218,81,3,0, 
  1,1,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,110,176,0,128,3,18,70,0,0,0,1,2,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17, 
  1,104,17,3,0,1,21,2,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,4,144,1,128,5,80,1,128,6,16,1,128,3,208,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92, 
  25,3,0,1,3,17,1,104,17,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,3,17,1,231,39,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,90,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,116,144,1,128,97,144,194,128,110,16,194,128,115,208,1,128, 
  105,80,2,128,118,80,1,128,3,17,1,157,86,3,0,1,3,17,1,245,85,3,0,1,3,17,1,29,85,3,0,1,3,17,1,69,84,3,0,1,3,17,1,223,83,3,0,1,3,17,1,55,83,3,0,1,21,2,54,0, 
  0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,135,87,3,0,1,2,18,111,0,0,0,21,4,30,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,110,176,0,128,3,17,1,121,83,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0, 
  0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,121,176,0,128,3,17,1,187,83,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3, 
  0,1,1,18,118,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0, 
  0,0,100,176,0,128,3,17,1,33,84,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,113,0,0,0,21,2,30,0,0,0,255,255,255,255, 
  1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,108,16,1,128,117,208,0,128,3,17,1,183,84,3,0,1, 
  3,17,1,147,84,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,114,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0, 
  0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,109,176,0,128,3,17,1,249,84,3,0,1,21,2,30,0,0,0,255,255,255,255, 
  1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,117,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0, 
  0,0,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,112,16,1,128,121,208,0,128,3,17,1,143,85,3,0,1,3,17,1,107,85,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0, 
  0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,115,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,109,176,0,128,3,17,1,209,85,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,67,0, 
  0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128, 
  3,17,1,55,86,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0, 
  0,0,98,176,0,128,3,17,1,121,86,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,116,0,0,0,21,2,30,0,0,0,255,255,255,255, 
  1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,223,86,3,0,1,21,2,30,0, 
  0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,33,87,3, 
  0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,98,176,0,128, 
  3,17,1,99,87,3,0,1,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,119,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0, 
  0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,18,111,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,176,0,128,3,17,1,135,87,3,0,1,1,21,4,67,1,0,0,255,255,255, 
  255,27,0,0,0,4,0,0,0,58,200,5,128,65,152,72,133,34,216,8,128,99,224,7,128,36,32,200,132,69,128,6,128,60,24,201,132,39,8,6,128,40,40,4,128,41,192,198,129,42,168,135,125,43,24,197,129,44,240,131, 
  126,45,152,137,129,62,112,199,128,63,224,132,129,73,80,5,128,78,160,196,128,91,72,134,129,93,88,200,129,94,48,7,128,95,152,9,128,97,88,9,128,116,216,9,128,123,144,5,128,124,248,6,128,125,104,4,128,3,18,9, 
  0,0,0,1,3,17,1,130,36,3,0,1,3,18,11,0,0,0,1,3,17,1,180,97,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,17,1,14,94,3,0,1,3,18,10,0,0,0,1,3,17,1,216, 
  93,3,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,17,1,224,91,3,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,18,21,0,0,0,1,3,18,33,0, 
  0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,165,39,3,0,1,3,17,1,64,91,3,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,125,90,3,0,1,3,17, 
  1,173,35,3,0,1,3,17,1,37,89,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1, 
  3,17,1,173,35,3,0,1,2,18,41,0,0,0,21,4,58,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,104,80,1,128,45,144,1,128,107,16,1,128,95,144,193,127,3,17,1,65,34,3,0,1,3,17,1,135, 
  89,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255, 
  255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48,193,127,101,240,0,128,3,17,1,221,89,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128, 
  3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,110,240,0,128,45,48,65,128,95,48,1,128,3,17,1,51,90,3,0,1,3,17,1,173, 
  35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,13,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4, 
  46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,95,48,129,128,45,48,193,127,115,240,0,128,3,17,1,211,90,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,61,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2, 
  34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,27,0,0,0,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,62,176,0,128, 
  3,18,22,0,0,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,83,240,128,128,45,48,193,127,95,48,1,128,3,17,1,150,91,3,0,1,3,17,1,173,35,3,0,1,21, 
  2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,60,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0, 
  128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255, 
  255,255,255,3,0,0,0,1,0,0,0,88,240,0,128,45,48,65,128,95,48,1,128,3,17,1,54,92,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0, 
  128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,80,240,0,128,45,48,65,128,95,48,1,128,3,17,1,140,92,3,0,1,3,17,1, 
  173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,79,240,128,128,45,48,193,127,95,48,1,128,3,17,1,226,92,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1, 
  173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0,128,45,48,65,128,95,48,1,128,3,17,1,56,93,3,0,1,3,17,1,173,35,3,0,1,21,2,34, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,84,240,0,128,45, 
  48,65,128,95,48,1,128,3,17,1,142,93,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,62, 
  0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3, 
  208,0,128,3,17,1,173,35,3,0,1,1,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,104,129,128,97,240,0,128,62,48,1,128,3,17,1,69,36,3,0,1,3,18,24,0,0,0,1,3,17,1, 
  34,36,3,0,1,2,18,41,0,0,0,21,4,58,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,77,80,1,128,45,144,193,127,95,144,1,128,71,16,193,127,3,17,1,18,96,3,0,1,3,17,1,112,94,3,0, 
  1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3, 
  0,0,0,1,0,0,0,80,48,1,128,45,240,64,128,95,240,0,128,3,17,1,173,35,3,0,1,3,17,1,198,94,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0, 
  128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,79,48,129,128,45,240,192,127,95,240,0,128,3,17,1,173,35,3,0,1,3,17,1,28,95,3,0, 
  1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82, 
  48,1,128,45,240,64,128,95,240,0,128,3,17,1,173,35,3,0,1,3,17,1,114,95,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0, 
  1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,84,240,0,128,45,48,65,128,95,48,1,128,3,17,1,200,95,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,63,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3, 
  17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,78,240,0,128,45,48,65,128,95,48,1,128,3,17,1,104,96,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3, 
  17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,79,240,128,128,45,48,193,127,95,48,1,128,3,17,1,190,96,3,0,1,3,17,1,173,35,3,0,1,21, 
  2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0, 
  128,45,48,65,128,95,48,1,128,3,17,1,20,97,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1, 
  18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,69,240,128,128,45,48,193,127,95,48,1,128,3,17,1,106,97,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,65,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1, 
  173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,65,48,129,128,45,240,192,127,95,240,0,128,3,17,1,173,35,3,0,1,3,17,1,10,98,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1, 
  173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,77,240,128,128,45,48,193,127,95,48,1,128,3,17,1,96,98,3,0,1,3,17,1,173,35,3,0,1,21,2,34, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,69,240,128,128,45, 
  48,193,127,95,48,1,128,3,17,1,182,98,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,18,64, 
  0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3, 
  208,0,128,3,17,1,173,35,3,0,1,1,21,4,104,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0,95,192,2,128,116,144,1,128,58,0,3,128,43,8,2,128,60,128,66,127,45,192,66,128,125,208,1,128,47,64, 
  66,126,3,17,1,201,99,3,0,1,3,18,11,0,0,0,1,3,18,25,0,0,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,3,17,1,159,99,3,0,1,21,2,54,0, 
  0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,41,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,62,16,1,128,97,208,0,128,3,17,1,69,36,3,0,1,3,18,24,0,0,0,1,2,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,104,240,0,128, 
  45,48,65,128,95,48,1,128,3,17,1,135,89,3,0,1,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,21, 
  4,166,0,0,0,255,255,255,255,13,0,0,0,3,0,0,0,45,16,4,131,41,192,4,128,42,136,132,129,43,80,4,128,60,88,131,129,37,248,196,126,94,32,3,128,47,216,131,128,58,152,3,128,95,224,2,128,116,160,66, 
  128,124,104,2,128,125,48,2,128,3,18,11,0,0,0,1,3,18,66,0,0,0,1,3,17,1,201,99,3,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3, 
  0,1,3,18,35,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,32,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,18,34,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1, 
  0,0,0,95,208,0,128,45,208,192,127,3,17,1,173,35,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,173,35,3,0,1,1,21,4,29,0,0,0, 
  255,255,255,255,1,0,0,0,0,0,0,0,62,176,0,128,3,18,24,0,0,0,1,2,21,4,177,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,45,104,68,131,41,24,5,128,42,224,132,129,43,168,4,128,60,120, 
  195,129,37,80,197,126,46,48,196,128,47,248,195,128,58,184,3,128,94,64,3,128,95,0,3,128,116,192,66,128,124,136,2,128,125,80,2,128,3,18,11,0,0,0,1,3,18,66,0,0,0,1,3,17,1,201,99,3,0,1, 
  3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3,18,80,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1, 
  3,18,33,0,0,0,1,3,18,32,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3, 
  17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,116,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,189,102,3, 
  0,1,21,2,66,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,4,144,1,128,5,80,1,128,6,16,1,128,3,208,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92,25,3,0,1, 
  3,17,1,104,17,3,0,1,2,18,41,0,0,0,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,8,193,127,3,18,40,0,0,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0, 
  0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,4,199,0,0,0,255,255,255,255,16,0,0,0,4,0,0,0,58,48,4,128,60,240,67,129,93,184,67,129, 
  95,64,3,128,116,0,3,128,37,0,6,128,124,200,2,128,125,144,2,128,40,200,5,128,41,144,5,128,42,88,133,125,43,32,5,128,44,232,68,125,45,168,68,125,94,128,3,128,47,112,4,125,3,18,11,0,0,0,1,3, 
  18,66,0,0,0,1,3,17,1,201,99,3,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,18,83,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3, 
  17,1,252,100,3,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,32,0,0,0,1,3,18,31,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3, 
  0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,199,0,0,0,255,255,255,255,16,0,0,0,4,0, 
  0,0,58,48,4,128,60,240,131,129,93,184,131,129,94,128,3,128,116,0,3,128,37,0,6,128,95,64,3,128,124,200,2,128,125,144,2,128,41,200,5,128,42,144,133,125,43,88,5,128,44,32,69,125,45,224,68,125,46,168, 
  68,125,47,112,196,125,3,18,11,0,0,0,1,3,18,66,0,0,0,1,3,17,1,201,99,3,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,18,83,0,0,0,1,3,17,1,29,91,3,0,1,3,17, 
  1,70,101,3,0,1,3,18,35,0,0,0,1,3,18,80,0,0,0,1,3,17,1,252,100,3,0,1,3,18,9,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,32,0,0,0,1,3,18,30,0, 
  0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4, 
  42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,116,208,0,128,47,16,1,128,3,17,1,95,105,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208, 
  0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,18,42,0,0,0,1,2,21,4,57,0,0,0,255, 
  255,255,255,4,0,0,0,2,0,0,0,40,144,1,128,45,16,1,128,95,16,1,128,47,80,193,127,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,66,0,0,0,255,255,255,255, 
  4,0,0,0,2,0,0,0,4,144,1,128,5,80,1,128,6,16,1,128,3,208,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92,25,3,0,1,3,17,1,104,17,3,0,1,2,21,4,42, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,119,208,0,128,47,16,193,127,3,17,1,90,106,3,0,1,3,17,1,223,15,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,4,112,129, 
  128,5,48,1,128,6,240,0,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,92,25,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0,128,3,17,1,121, 
  106,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,17,1,152,106,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176,0,128,3,18, 
  44,0,0,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,114,208,0,128,47,16,1,128,3,17,1,11,107,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,117,176,0,128,3,17,1,42,107,3,0, 
  1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,17,1,73,107,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,18,43,0,0, 
  0,1,2,21,4,104,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0,95,0,3,128,116,144,1,128,58,64,2,128,43,8,2,128,60,192,66,127,45,0,67,128,125,208,1,128,47,128,66,126,3,17,1,201,99,3,0, 
  1,3,18,11,0,0,0,1,3,18,25,0,0,0,1,3,17,1,70,101,3,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,114,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0, 
  112,16,2,128,97,16,3,128,114,208,1,128,115,144,1,128,103,144,2,128,109,80,2,128,102,208,2,128,47,80,67,127,3,17,1,24,109,3,0,1,3,17,1,218,108,3,0,1,3,17,1,163,108,3,0,1,3,17,1,135, 
  20,3,0,1,3,17,1,43,20,3,0,1,3,17,1,134,19,3,0,1,3,17,1,236,18,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16, 
  1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,111,48,129,128,97,112,193,127,117,240,0,128,3,17,1,221,21,3,0,1,3,17,1, 
  191,21,3,0,1,3,17,1,69,21,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,249,108,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0, 
  0,0,0,100,176,0,128,3,17,1,100,22,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,40,23,3,0,1,2,21,4,90,0,0,0,255,255,255,255,6,0,0, 
  0,2,0,0,0,112,80,1,128,97,80,2,129,102,16,2,128,47,144,66,128,103,208,1,128,109,144,1,128,3,17,1,188,109,3,0,1,3,17,1,135,20,3,0,1,3,17,1,43,20,3,0,1,3,17,1,134,19,3,0, 
  1,3,17,1,236,18,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2, 
  21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,117,208,0,128,97,16,193,127,3,17,1,221,21,3,0,1,3,17,1,69,21,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,116,208,0,128,47,16,1,128,3,17,1,60,110,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3, 
  17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176,0,128,3,17,1,91,110,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0, 
  128,3,17,1,122,110,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,110,176,0,128,3,18,13,0,0,0,1,2,21,4,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,112,240, 
  0,128,47,112,65,128,103,48,1,128,3,17,1,249,110,3,0,1,3,17,1,43,20,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128, 
  3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,117,176,0,128,3,17,1,221,21,3,0,1,2,21,4,66,0,0,0,255,255,255,255,4,0, 
  0,0,2,0,0,0,116,16,1,128,45,208,1,128,99,80,1,128,47,144,193,127,3,17,1,92,112,3,0,1,3,17,1,0,112,3,0,1,3,17,1,223,15,3,0,1,3,17,1,133,111,3,0,1,21,2,42,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3, 
  17,1,164,111,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,17,1,195,111,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0, 
  128,3,17,1,226,111,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,112,176,0,128,3,18,57,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176, 
  0,128,3,17,1,31,112,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,62,112,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0, 
  114,176,0,128,3,18,56,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,111,176,0,128,3,17,1,123,112,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0, 
  0,107,176,0,128,3,18,54,0,0,0,1,2,21,4,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,116,240,0,128,47,112,65,128,99,48,1,128,3,17,1,92,112,3,0,1,3,17,1,0,112,3,0,1,3, 
  17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,41,0,0,0,255,255,255,255, 
  2,0,0,0,1,0,0,0,58,208,0,128,47,8,1,128,3,18,39,0,0,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1, 
  217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,70,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,80,240,129,128,45,112,1,128,84,48,1,128,47,176,65,128,95,112,1,128,3,17,1,27,117,3,0,1, 
  3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,17,1,203,113,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3, 
  0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0,128,45,48,65,128,95,48,1,128,3,17,1,33,114,3, 
  0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255, 
  3,0,0,0,1,0,0,0,79,240,128,128,45,48,193,127,95,48,1,128,3,17,1,119,114,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208, 
  0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,68,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,205,114,3, 
  0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0, 
  85,240,128,128,45,48,193,127,95,48,1,128,3,17,1,35,115,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3, 
  0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,67,48,129,128,45,240,192,127,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,121,115,3,0,1,21,2,34,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,84,240,0,128,45,48,65,128, 
  95,48,1,128,3,17,1,207,115,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0, 
  21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,73,48,129,128,45,240,192,127,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,37,116,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,79,48,129,128,45,240,192,127,95,240,0,128,3,17,1,104, 
  17,3,0,1,3,17,1,123,116,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255, 
  255,255,3,0,0,0,1,0,0,0,78,240,0,128,45,48,65,128,95,48,1,128,3,17,1,209,116,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128, 
  3,208,0,128,3,17,1,104,17,3,0,1,1,18,105,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255, 
  255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,69,240,128,128,45,48,193,127,95,48, 
  1,128,3,17,1,113,117,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4, 
  46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0,128,45,48,65,128,95,48,1,128,3,17,1,199,117,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0, 
  0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,77,48,129,128,45,240,192,127,95,240,0,128,3,17,1,104,17,3, 
  0,1,3,17,1,29,118,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255, 
  3,0,0,0,1,0,0,0,73,240,128,128,45,48,193,127,95,48,1,128,3,17,1,115,118,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208, 
  0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,78,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,201,118,3, 
  0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0, 
  65,240,128,128,45,48,193,127,95,48,1,128,3,17,1,31,119,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3, 
  0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,76,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,117,119,3,0,1,21,2,34,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,106,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127, 
  3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,21,4,63,0,0,0,255,255,255,255,4,0,0,0,2,0,0, 
  0,40,192,1,128,123,16,1,128,58,72,1,128,47,128,129,127,3,18,10,0,0,0,1,3,18,39,0,0,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0, 
  1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,76,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,40,40,66,128,100,168,1,128,102,104,1,128,47, 
  232,65,128,123,48,1,128,3,18,10,0,0,0,1,3,17,1,89,121,3,0,1,3,17,1,160,120,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1, 
  0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,101,176,0,128,3,17,1,191,120,3,0,1,2,21, 
  4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,102,176,0,128,3,17,1,222,120,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,253,120,3,0,1, 
  2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,117,176,0,128,3,17,1,28,121,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,17,1,59,121,3, 
  0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,131,0,0,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,97,176,0,128,3,17,1,120,121, 
  3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0,128,3,17,1,151,121,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,108,176,0,128,3,17,1, 
  182,121,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,45,176,0,128,3,17,1,213,121,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,104,176,0,128,3, 
  17,1,244,121,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,105,176,0,128,3,17,1,19,122,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,110,176,0, 
  128,3,17,1,50,122,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,132,0,0,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,125,208, 
  0,128,47,8,193,127,3,18,11,0,0,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15, 
  3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,123,208,0,128,47,8,193,127,3,18,10,0,0,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1, 
  0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,34,16,1,128,47,208,0,128,3,17,1,223,15,3, 
  0,1,3,17,1,151,29,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,87,0,0,0,255, 
  255,255,255,6,0,0,0,2,0,0,0,40,128,2,129,125,80,1,128,102,192,1,128,47,64,130,128,100,0,2,128,123,136,1,128,3,18,11,0,0,0,1,3,18,10,0,0,0,1,3,17,1,89,121,3,0,1,3,17,1, 
  160,120,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3, 
  0,1,2,21,4,52,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,40,104,1,128,47,40,65,128,123,240,0,128,3,18,10,0,0,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,42,0,0, 
  0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,57,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,40,144,1,128, 
  45,16,1,128,95,16,1,128,47,80,193,127,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65, 
  128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,78,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,116,48,1,128,47,176,193,128,34,48,2,128, 
  39,240,129,127,99,112,1,128,3,17,1,23,125,3,0,1,3,17,1,169,45,3,0,1,3,17,1,223,15,3,0,1,3,17,1,12,29,3,0,1,3,17,1,151,29,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0, 
  0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,107,176,0,128,3,17,1,54,125,3,0, 
  1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,58,176,0,128,3,17,1,131,31,3,0,1,2,21,4,7,1,0,0,255,255,255,255,22,0,0,0,4,0,0,0,58,184,7,128,60,120,199,132,34, 
  56,7,128,99,128,6,128,36,192,134,131,91,232,132,131,93,248,198,131,39,168,4,128,40,136,3,128,41,32,5,128,42,72,134,125,43,56,132,126,44,80,67,125,45,248,71,126,62,208,133,128,63,0,132,128,94,144,5,128,95, 
  248,7,128,116,8,6,128,123,112,4,128,124,88,5,128,125,200,3,128,3,18,9,0,0,0,1,3,17,1,130,36,3,0,1,3,18,11,0,0,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0, 
  0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,32,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,18,21,0,0,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0, 
  1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,165,39,3,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,147,126,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0, 
  0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,52,0,0,0,255,255,255, 
  255,3,0,0,0,1,0,0,0,58,104,129,128,97,240,0,128,62,48,1,128,3,17,1,69,36,3,0,1,3,18,24,0,0,0,1,3,18,79,0,0,0,1,2,21,4,68,0,0,0,255,255,255,255,5,0,0,0,2,0, 
  0,0,40,168,1,128,45,224,193,128,58,104,1,128,95,224,1,128,125,48,1,128,3,18,11,0,0,0,1,3,17,1,231,39,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255, 
  255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,68,0,0,0,255,255,255,255,5,0,0, 
  0,2,0,0,0,40,232,1,128,45,104,193,128,95,104,1,128,47,168,193,127,125,48,1,128,3,18,11,0,0,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,18,31,0,0,0,1,21,2,54,0,0, 
  0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,117,0,0,0,255,255,255,255, 
  9,0,0,0,3,0,0,0,69,104,2,128,73,40,2,128,58,232,1,128,43,176,1,128,60,104,3,128,45,168,194,126,78,232,2,128,47,40,67,128,95,168,2,128,3,18,25,0,0,0,1,3,17,1,70,101,3,0,1,3, 
  17,1,174,131,3,0,1,3,17,1,182,129,3,0,1,3,17,1,104,17,3,0,1,3,17,1,106,128,3,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,65,240,128,128,45,48,193,127,95,48,1,128,3,17,1,192,128,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3, 
  17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,77,240,128,128,45,48,193,127,95,48,1,128,3,17,1,22,129,3,0,1,3,17,1,104,17,3,0,1,21, 
  2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,69,48,129, 
  128,45,240,192,127,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,108,129,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1, 
  18,64,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0, 
  128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,88,240,0,128,45,48,65,128,95,48,1,128,3,17,1,12,130,3,0,1,3,17,1, 
  104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,80,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,98,130,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1, 
  104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,79,240,128,128,45,48,193,127,95,48,1,128,3,17,1,184,130,3,0,1,3,17,1,104,17,3,0,1,21,2,34, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,48,1,128,45, 
  240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,14,131,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41, 
  0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,84,240,0,128,45,48,65,128,95,48,1,128,3,17,1,100,131,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,62,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17, 
  3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,58,0,0,0,255,255,255,255,4,0,0,0,2,0,0, 
  0,77,80,1,128,45,16,193,127,95,16,1,128,71,144,193,127,3,17,1,104,17,3,0,1,3,17,1,178,133,3,0,1,3,17,1,16,132,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4, 
  208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,78,48,1,128,45,240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3, 
  17,1,102,132,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0, 
  0,1,0,0,0,79,48,129,128,45,240,192,127,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,188,132,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3, 
  17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0,128,45,48,65,128,95,48,1,128,3,17,1,18,133,3,0,1,3,17,1,104,17,3,0,1,21, 
  2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,69,240,128, 
  128,45,48,193,127,95,48,1,128,3,17,1,104,133,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1, 
  18,65,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0, 
  128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,80,240,0,128,45,48,65,128,95,48,1,128,3,17,1,8,134,3,0,1,3,17,1, 
  104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,79,240,128,128,45,48,193,127,95,48,1,128,3,17,1,94,134,3,0,1,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1, 
  104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,82,240,0,128,45,48,65,128,95,48,1,128,3,17,1,180,134,3,0,1,3,17,1,104,17,3,0,1,21,2,34, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,41,0,0,0,21,4,46,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,84,48,1,128,45, 
  240,64,128,95,240,0,128,3,17,1,104,17,3,0,1,3,17,1,10,135,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,104,17,3,0,1,1,18,63, 
  0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,104,17,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3, 
  208,0,128,3,17,1,104,17,3,0,1,1,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,62,208,0,128,47,8,1,128,3,18,21,0,0,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255, 
  255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,184,0,0,0,255,255,255,255,15,0,0,0,3,0,0,0,40,16,5,128,33,136, 
  5,128,34,144,132,129,43,176,194,129,36,88,68,129,45,72,5,128,47,216,67,129,39,232,194,127,58,112,2,128,60,208,4,129,91,40,131,128,95,72,5,128,99,24,4,128,116,152,67,128,124,96,3,128,3,17,1,159,99,3, 
  0,1,3,18,25,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,223,15,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0, 
  0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,3,18,124,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240, 
  0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,207,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,248,5,128,91,216,3, 
  130,34,120,5,128,99,0,5,128,36,64,133,128,95,56,6,128,116,136,4,128,39,152,3,128,40,176,2,128,123,96,3,128,42,200,132,125,43,40,131,125,60,184,5,129,45,56,6,128,94,72,4,128,63,240,130,125,124,16,4, 
  128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1, 
  3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,147,126,3,0,1,3,17,1,173,35,3, 
  0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,207, 
  0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,152,3,128,91,24,4,130,34,184,5,128,99,64,5,128,36,128,133,128,95,56,6,128,116,200,4,128,39,216,3,128,40,176,2,128,123,96,3,128,42,8,133,125,43, 
  40,131,125,60,248,5,129,45,56,6,128,94,136,4,128,63,240,130,125,124,80,4,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,216,93,3,0,1, 
  3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1, 
  3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3, 
  0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,92,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,60,96,130,129,45,160,2,128,58,168,1,128,43,112,65,128,47,32,66,128,95,160,2, 
  128,124,232,1,128,3,18,25,0,0,0,1,3,17,1,70,101,3,0,1,3,18,66,0,0,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255, 
  255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,207,0,0,0,255,255,255,255,17,0,0,0, 
  4,0,0,0,58,16,4,128,91,216,3,130,34,184,5,128,99,64,5,128,36,128,133,128,95,56,6,128,116,200,4,128,39,152,3,128,40,176,2,128,123,96,3,128,42,8,133,125,43,40,131,125,60,248,5,129,45,56,6,128, 
  94,136,4,128,63,240,130,125,124,80,4,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,17,1,60, 
  140,3,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1, 
  29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3, 
  17,1,173,35,3,0,1,2,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,104,129,128,97,240,0,128,62,48,1,128,3,17,1,69,36,3,0,1,3,18,24,0,0,0,1,3,17,1,13,42,3,0, 
  1,2,21,4,173,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,176,4,128,47,184,67,130,34,200,2,129,43,144,130,129,36,56,4,129,45,40,5,128,58,80,2,128,39,8,131,126,60,112,4,129,91,72,131,128, 
  95,40,5,128,99,248,3,128,116,232,68,128,124,128,3,128,3,17,1,159,99,3,0,1,3,18,25,0,0,0,1,3,17,1,151,29,3,0,1,3,17,1,12,29,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0, 
  1,3,17,1,223,15,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0, 
  0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,231,0,0,0,255,255,255,255, 
  19,0,0,0,4,0,0,0,58,216,3,128,61,24,4,128,34,120,6,128,99,0,6,128,36,64,6,131,63,48,3,129,91,152,196,130,39,88,4,128,40,240,2,128,95,248,6,128,42,200,133,125,43,104,195,126,60,184,134,129, 
  45,248,6,125,94,8,5,128,47,136,133,125,116,72,5,128,123,160,3,128,124,208,4,128,3,17,1,130,36,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,216,93,3,0, 
  1,3,17,1,7,18,3,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,17,1,223,15,3,0,1,3,18,33,0,0, 
  0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6, 
  240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,195,0,0,0,255,255,255,255,16,0,0,0,4,0,0,0,91,248,131,129,95,216, 
  5,128,34,32,5,128,99,168,4,128,36,232,68,128,116,104,4,128,123,128,3,128,39,184,3,128,40,160,5,128,124,48,4,128,58,144,2,128,43,8,67,125,60,96,69,127,45,216,5,128,94,64,3,128,63,208,130,124,3,17, 
  1,159,99,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,17,1,137,46,3,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1, 
  235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255, 
  255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,183,0,0,0,255,255,255,255,15,0,0,0, 
  3,0,0,0,40,64,5,128,58,112,2,128,34,192,196,127,43,232,130,129,36,136,132,128,45,120,5,128,60,0,133,129,39,88,67,128,63,176,130,128,91,152,131,128,95,120,5,128,99,72,132,128,116,8,132,128,123,32,3,128, 
  124,208,3,128,3,17,1,159,99,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33, 
  3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3, 
  0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,172,0,0,0,255,255,255,255,14,0,0,0,3,0, 
  0,0,40,232,4,128,58,80,2,128,34,104,196,127,43,200,130,129,36,48,132,128,45,32,5,128,60,168,132,129,39,0,67,128,63,144,130,128,91,64,131,128,95,32,5,128,99,240,3,128,116,176,67,128,124,120,3,128,3,17, 
  1,159,99,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18, 
  127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112, 
  65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,172,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,232,4,128,58,80,2,128,34,104,196, 
  127,43,144,66,129,36,48,132,128,45,32,5,128,60,168,68,129,39,0,131,128,91,64,131,128,95,32,5,128,99,240,131,128,116,176,131,128,123,200,2,128,124,120,3,128,3,17,1,159,99,3,0,1,3,18,25,0,0,0,1, 
  3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1, 
  3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0, 
  1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,184,0,0,0,255,255,255,255,15,0,0,0,3,0,0,0,40,72,5,128,58,112,2,128,34,200,196,127,43,176,130,129,36,144,4,129,45,128,5,128, 
  94,232,2,128,39,96,195,128,60,8,5,129,91,160,131,128,95,128,5,128,99,80,132,128,116,16,132,128,123,40,3,128,124,216,3,128,3,17,1,159,99,3,0,1,3,18,25,0,0,0,1,3,17,1,137,46,3,0,1,3, 
  18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3, 
  17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1, 
  3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,173,0,0,0,255,255,255,255,14,0,0,0,3,0,0,0,40,240,4,128,58,80,2,128,34,112,196,127,43,144,130,129,36,56,4,129,45,40,5,128,94, 
  200,2,128,39,8,195,128,60,176,4,129,91,72,131,128,95,40,5,128,99,248,3,128,116,184,67,128,124,128,3,128,3,17,1,159,99,3,0,1,3,18,25,0,0,0,1,3,17,1,137,46,3,0,1,3,17,1,34,35,3, 
  0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0, 
  0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173, 
  35,3,0,1,2,21,4,184,0,0,0,255,255,255,255,15,0,0,0,3,0,0,0,40,72,5,128,58,112,2,128,34,200,196,127,43,232,194,129,36,144,4,129,45,128,5,128,94,32,3,128,39,96,131,128,60,8,69,129,63, 
  176,130,128,91,160,131,128,95,128,5,128,99,80,4,128,116,16,68,128,124,216,3,128,3,17,1,159,99,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,17,1,137,46,3,0,1,3,17,1,34,35,3,0, 
  1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0, 
  1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35, 
  3,0,1,2,21,4,207,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,58,240,2,128,91,24,4,130,34,184,5,128,99,64,5,128,36,128,133,128,95,56,6,128,116,200,4,128,39,216,3,128,40,176,2,128,123,160, 
  3,128,42,8,133,125,43,104,131,125,60,248,5,129,45,56,6,128,94,136,4,128,63,48,131,125,124,80,4,128,3,17,1,130,36,3,0,1,3,17,1,159,99,3,0,1,3,18,120,0,0,0,1,3,18,25,0,0,0,1, 
  3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,17,1,235,33,3,0,1,3,18,33,0,0,0,1,3,17,1,150,33,3,0,1, 
  3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1, 
  128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,206,0,0,0,255,255,255,255,17,0,0,0,4,0,0,0,91,216,67,130,94,72,4,128,34,120,5,128,99,0,5,128, 
  36,64,133,128,95,48,6,128,116,192,4,128,39,152,3,128,40,248,5,128,123,96,3,128,58,176,2,128,43,40,67,125,60,184,5,129,45,48,6,128,62,136,196,124,63,240,130,125,124,16,4,128,3,17,1,159,99,3,0,1, 
  3,18,120,0,0,0,1,3,18,25,0,0,0,1,3,18,10,0,0,0,1,3,17,1,34,35,3,0,1,3,18,82,0,0,0,1,3,18,66,0,0,0,1,3,17,1,151,34,3,0,1,3,18,21,0,0,0,1,3,17, 
  1,235,33,3,0,1,3,17,1,150,33,3,0,1,3,18,127,0,0,0,1,3,17,1,171,32,3,0,1,3,17,1,29,91,3,0,1,3,18,31,0,0,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255, 
  255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,92,0,0,0,255,255,255,255,7,0,0, 
  0,2,0,0,0,60,32,130,129,45,96,2,128,58,160,2,128,43,112,65,128,47,224,65,128,95,96,2,128,124,168,1,128,3,18,25,0,0,0,1,3,18,66,0,0,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91, 
  3,0,1,3,17,1,173,35,3,0,1,3,17,1,159,99,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1, 
  211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,143,0,0,0,255,255,255,255,11,0,0,0,3,0,0,0,40,8,4,128,45,88,3,128,42,208,131,129,43,152,3,128,60,160,130,129,37,64,4,127,94,104,2,128, 
  47,32,131,128,58,224,2,128,95,40,2,128,124,240,1,128,3,18,66,0,0,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0, 
  1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,31,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3, 
  112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,143,0,0,0,255,255,255,255,11,0,0,0,3,0,0,0,45,144,3,128,58,224,2,128,42,8, 
  196,127,43,208,3,128,60,160,130,129,37,64,196,126,46,88,131,128,47,32,131,128,94,104,2,128,95,40,2,128,124,240,1,128,3,18,66,0,0,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29, 
  91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3,18,80,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0, 
  0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,132,0,0,0,255,255,255,255, 
  10,0,0,0,3,0,0,0,45,56,3,128,58,192,2,128,42,176,195,127,43,120,3,128,60,128,66,129,37,232,195,126,94,72,2,128,47,0,67,128,95,8,2,128,124,208,1,128,3,18,66,0,0,0,1,3,17,1,173,35, 
  3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,30,0,0, 
  0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,41, 
  0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,8,65,128,62,208,0,128,3,18,21,0,0,0,1,3,17,1,231,39,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128, 
  5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,58,0,0,0,255,255,255,255,4,0,0,0,2,0,0,0,116,144,1,128,45,16,1,128,95,16,1,128,47,80,193,127,3,17,1,104,17, 
  3,0,1,3,17,1,223,15,3,0,1,3,17,1,189,102,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1, 
  211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,52,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,44,104,129,128,47,40,1,128,62,240,0,128,3,18,21,0,0,0,1,3,17,1,223,15,3,0,1,3, 
  18,9,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,63,0,0,0,255,255,255,255,4, 
  0,0,0,2,0,0,0,44,192,1,128,62,16,1,128,58,72,193,127,47,128,1,128,3,18,21,0,0,0,1,3,18,39,0,0,0,1,3,17,1,223,15,3,0,1,3,18,9,0,0,0,1,21,2,42,0,0,0,255,255, 
  255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,115,208,0,128,47,16,193, 
  127,3,17,1,172,155,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2, 
  21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,121,176,0,128,3,17,1,203,155,3,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,109,176,0,128,3,18,67,0,0,0,1, 
  2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,97,208,0,128,47,16,193,127,3,17,1,62,156,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,17,1,93,156,3,0,1,2,21,4,29, 
  0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,116,176,0,128,3,18,68,0,0,0,1,2,21,4,129,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,69,136,2,128,65,8,195,129,58,200,2,128,43,16,2, 
  128,60,72,3,128,45,200,195,126,78,208,1,128,95,200,3,128,73,72,66,128,97,136,3,128,3,17,1,180,97,3,0,1,3,18,25,0,0,0,1,3,17,1,14,94,3,0,1,3,17,1,224,91,3,0,1,3,17,1,51, 
  157,3,0,1,3,17,1,64,91,3,0,1,3,17,1,29,91,3,0,1,3,17,1,125,90,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112, 
  65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,40,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,8,65,128,62,208,0,128,3,18,24, 
  0,0,0,1,3,18,79,0,0,0,1,2,21,4,141,0,0,0,255,255,255,255,11,0,0,0,3,0,0,0,69,232,2,128,65,104,195,129,58,168,2,128,43,48,2,128,60,168,3,128,45,40,196,126,78,240,1,128,47,40, 
  131,128,73,104,130,128,95,40,4,128,97,232,3,128,3,17,1,180,97,3,0,1,3,18,25,0,0,0,1,3,17,1,14,94,3,0,1,3,17,1,70,101,3,0,1,3,17,1,224,91,3,0,1,3,17,1,223,15,3,0, 
  1,3,17,1,64,91,3,0,1,3,17,1,29,91,3,0,1,3,17,1,125,90,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5, 
  48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,47,176,0,128,3,17,1,141,158,3,0,1,21,2, 
  78,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,4,176,1,128,5,112,1,128,2,48,130,128,3,240,1,128,6,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,201,158,3,0,1, 
  3,17,1,195,158,3,0,1,3,17,1,189,158,3,0,1,2,18,19,0,0,0,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,42,16,1,128,47,208,0,128,3,17,1,50,17,3,0,1,3,17,1,10, 
  16,3,0,1,1,18,19,0,0,0,1,18,17,0,0,0,1,18,18,0,0,0,1,21,4,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,65,48,129,128,47,112,193,127,97,240,0,128,3,17,1,78,159,3,0, 
  1,3,17,1,48,159,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2, 
  21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,83,176,0,128,3,18,60,0,0,0,1,2,21,4,29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,115,176,0,128,3,18,61,0,0,0,1,2, 
  21,4,89,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,116,136,1,128,125,80,1,128,34,136,2,128,39,72,66,128,47,8,66,128,99,200,1,128,3,18,11,0,0,0,1,3,17,1,23,125,3,0,1,3,17,1, 
  169,45,3,0,1,3,17,1,223,15,3,0,1,3,17,1,12,29,3,0,1,3,17,1,151,29,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15, 
  3,0,1,3,17,1,211,15,3,0,1,2,21,4,89,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,116,136,1,128,125,80,1,128,34,136,130,128,39,72,130,128,58,8,2,128,99,200,1,128,3,18,11,0,0,0, 
  1,3,17,1,23,125,3,0,1,3,17,1,169,45,3,0,1,3,17,1,231,39,3,0,1,3,17,1,34,35,3,0,1,3,17,1,171,32,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6, 
  208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,81,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,60,72,2,128,45,200,1,128,58,136,1,128,43,80,65,128,47,8, 
  66,128,95,200,1,128,3,18,25,0,0,0,1,3,17,1,70,101,3,0,1,3,17,1,104,17,3,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1, 
  0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,104,17,3,0,1,2,21,4,81,0,0,0,255,255,255,255,6,0,0,0,2,0,0,0,60,200, 
  65,129,45,72,2,128,58,8,2,128,43,144,65,128,95,72,2,128,116,80,1,128,3,17,1,201,99,3,0,1,3,18,25,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,147,126,3,0,1,3,17,1,173,35,3,0, 
  1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,93,0, 
  0,0,255,255,255,255,7,0,0,0,2,0,0,0,60,40,130,129,45,104,2,128,58,168,2,128,43,176,65,128,47,232,65,128,95,104,2,128,116,112,1,128,3,17,1,201,99,3,0,1,3,18,25,0,0,0,1,3,17,1, 
  223,15,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,3,17,1,159,99,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3, 
  17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,144,0,0,0,255,255,255,255,11,0,0,0,3,0,0,0,40,16,4,128,45,96,3,128,42,216,131,129,43,160,3,128,60,168, 
  130,129,37,72,4,127,94,112,2,128,47,40,131,128,58,232,2,128,95,48,2,128,116,240,1,128,3,17,1,201,99,3,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1, 
  70,101,3,0,1,3,18,35,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,31,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0, 
  0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,144,0,0,0,255,255,255,255,11,0,0,0,3,0,0, 
  0,45,152,3,128,58,232,2,128,42,16,196,127,43,216,3,128,60,168,130,129,37,72,196,126,46,96,131,128,47,40,131,128,94,112,2,128,95,48,2,128,116,240,1,128,3,17,1,201,99,3,0,1,3,17,1,173,35,3,0, 
  1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3,18,80,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1, 
  3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0, 
  1,2,21,4,133,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,45,64,3,128,58,200,2,128,42,184,195,127,43,128,3,128,60,136,66,129,37,240,195,126,94,80,2,128,47,8,67,128,95,16,2,128,116,208,1,128, 
  3,17,1,201,99,3,0,1,3,17,1,173,35,3,0,1,3,18,36,0,0,0,1,3,17,1,29,91,3,0,1,3,17,1,70,101,3,0,1,3,18,35,0,0,0,1,3,17,1,252,100,3,0,1,3,18,25,0,0,0, 
  1,3,18,33,0,0,0,1,3,18,30,0,0,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0, 
  1,3,17,1,173,35,3,0,1,2,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,58,104,129,128,125,240,0,128,116,40,1,128,3,18,11,0,0,0,1,3,17,1,60,110,3,0,1,3,17,1,50,56, 
  3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,65,0,0,0,255,255,255,255,4,0,0,0, 
  2,0,0,0,116,72,1,128,125,16,1,128,58,136,1,128,47,200,1,128,3,18,11,0,0,0,1,3,17,1,60,110,3,0,1,3,17,1,137,53,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0,255,255,255, 
  255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,118,0,0,0,255,255,255,255,9,0,0,0,3,0,0,0,40,64,3,128,45,152,194,129, 
  42,8,3,128,43,208,2,128,116,232,1,128,37,120,3,127,94,40,2,128,47,96,2,128,125,176,1,128,3,18,11,0,0,0,1,3,17,1,60,110,3,0,1,3,18,36,0,0,0,1,3,18,35,0,0,0,1,3,18,34, 
  0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,31,0,0,0,1,3,18,30,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17, 
  1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,129,0,0,0,255,255,255,255,10,0,0,0,3,0,0,0,45,40,67,130,94,72,2,128,42,152,3,128,43,96,3,128,60,128,2,129,37,208,195,126,46,240,194, 
  126,47,184,2,128,116,8,2,128,125,208,1,128,3,18,11,0,0,0,1,3,17,1,60,110,3,0,1,3,18,36,0,0,0,1,3,18,27,0,0,0,1,3,18,35,0,0,0,1,3,18,80,0,0,0,1,3,18,34,0, 
  0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,30,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17, 
  1,211,15,3,0,1,2,21,4,107,0,0,0,255,255,255,255,8,0,0,0,3,0,0,0,45,120,66,128,125,144,1,128,42,232,2,128,43,176,2,128,116,200,1,128,37,32,195,126,94,8,2,128,47,64,2,128,3,18,11, 
  0,0,0,1,3,17,1,60,110,3,0,1,3,18,36,0,0,0,1,3,18,35,0,0,0,1,3,18,34,0,0,0,1,3,18,25,0,0,0,1,3,18,33,0,0,0,1,3,18,30,0,0,0,1,21,2,42,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,8,1,128,125, 
  208,0,128,3,18,11,0,0,0,1,3,17,1,231,39,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1, 
  2,21,4,53,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,116,40,1,128,47,104,65,128,125,240,0,128,3,18,11,0,0,0,1,3,17,1,60,110,3,0,1,3,17,1,223,15,3,0,1,21,2,42,0,0,0, 
  255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,41,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,208,0,128,41, 
  16,1,128,3,17,1,231,39,3,0,1,3,18,32,0,0,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1, 
  2,21,4,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,58,16,65,128,116,208,0,128,3,17,1,60,110,3,0,1,3,17,1,231,39,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,6,208,0,128,5,16,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,2,21,4,69,0,0,0,255,255,255,255,5,0,0,0,2,0,0,0,60,168,1,128,45,232,1,128,58,104,1,128,43,48,65,128, 
  95,232,1,128,3,18,25,0,0,0,1,3,17,1,51,157,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35,3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65, 
  128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4,93,0,0,0,255,255,255,255,7,0,0,0,2,0,0,0,60,104,130,129,45,168,2,128,58,232,1,128, 
  43,176,65,128,47,40,66,128,95,168,2,128,116,112,1,128,3,17,1,201,99,3,0,1,3,18,25,0,0,0,1,3,17,1,70,101,3,0,1,3,17,1,223,15,3,0,1,3,17,1,29,91,3,0,1,3,17,1,173,35, 
  3,0,1,21,2,54,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,6,240,0,128,3,112,65,128,5,48,1,128,3,17,1,217,15,3,0,1,3,17,1,211,15,3,0,1,3,17,1,173,35,3,0,1,2,21,4, 
  30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,95,176,0,128,3,17,1,199,169,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,16,1,128,3,17,1,42,172,3, 
  0,1,3,17,1,66,171,3,0,1,2,21,4,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,95,176,0,128,3,17,1,199,169,3,0,1,21,2,42,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4, 
  208,0,128,3,16,1,128,3,17,1,248,170,3,0,1,3,17,1,16,170,3,0,1,2,18,28,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,90,170, 
  3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,90,170,3,0,1,1,18,28,0,0,0,21,4,38,0,0,0,255,255,255,255,2,0,0,0,1,0,0, 
  0,95,208,0,128,45,208,192,127,18,28,0,0,0,17,1,179,170,3,0,1,21,2,33,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,17,1,167,170,3,0,1,2,18,28,0,0,0, 
  17,1,179,170,3,0,1,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,90,170,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4, 
  208,0,128,3,208,0,128,3,17,1,90,170,3,0,1,2,18,28,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,90,170,3,0,1,21,2,34,0,0, 
  0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,90,170,3,0,1,1,18,28,0,0,0,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192, 
  127,3,17,1,140,171,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,140,171,3,0,1,1,18,28,0,0,0,21,4,38,0,0,0,255,255,255,255,2, 
  0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,18,28,0,0,0,17,1,229,171,3,0,1,21,2,33,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,4,208,0,128,3,208,0,128,17,1,217,171,3,0,1, 
  2,18,28,0,0,0,17,1,229,171,3,0,1,21,4,34,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,95,208,0,128,45,208,192,127,3,17,1,140,171,3,0,1,21,2,34,0,0,0,255,255,255,255,2,0,0, 
  0,1,0,0,0,4,208,0,128,3,208,0,128,3,17,1,140,171,3,0,1,2,18,29,0,0,0,21,2,30,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,176,0,128,3,17,1,42,172,3,0,1,1,21,5, 
  29,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,176,0,128,3,18,8,0,0,0,1,2, 
];

pub mod ast{
  impl AstObject for ASTNode {}
  type ASTSlot = (ASTNode, TokenRange, TokenRange);
  use super::*; 
  type Node = ASTNode;
  
  pub fn ir_from<'a> (mut reader: UTF8StringReader)-> Result<Box<State>, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(8);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0;
    let obj_0_0 = obj_0_0.to_State();
    Ok(obj_0_0)
  }
  
  pub fn escaped_from<'a> (mut reader: UTF8StringReader)-> Result<Vec<String>, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(107485);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0.into_strings();
    Ok(obj_0_0)
  }
  
  pub fn grammar_from<'a> (mut reader: UTF8StringReader)-> Result<Box<Grammar>, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(108304);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0;
    let obj_0_0 = obj_0_0.to_Grammar();
    Ok(obj_0_0)
  }
  
  pub fn type_eval_from<'a> (mut reader: UTF8StringReader)-> Result<ASTNode, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(199494);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0;
    Ok(obj_0_0)
  }
  
  pub fn ast_expression_from<'a> (mut reader: UTF8StringReader)-> Result<ASTNode, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(199644);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0;
    Ok(obj_0_0)
  }
  
  pub fn ast_struct_from<'a> (mut reader: UTF8StringReader)-> Result<Box<AST_Struct>, RadlrParseError> {
    let reduce_functions = ReduceFunctions::<_, u32, true>::new();
    let mut parser = Parser::new(&mut reader, &bytecode);
    parser.init_parser(200487);
    let AstSlot (ref_0, __rule_rng__, _) = parser.parse_ast(&reduce_functions.0, &mut None)?;
    let obj_0_0 = ref_0;
    let obj_0_0 = obj_0_0.to_AST_Struct();
    Ok(obj_0_0)
  }
}